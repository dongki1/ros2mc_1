// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const AirspeedRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  timestamp_sample: primitiveTypes.uint64,
  indicated_airspeed_m_s: primitiveTypes.float32,
  true_airspeed_m_s: primitiveTypes.float32,
  air_temperature_celsius: primitiveTypes.float32,
  confidence: primitiveTypes.float32,
});
const AirspeedRefArray = ArrayType(AirspeedRefStruct);
const AirspeedRefStructArray = StructType({
  data: AirspeedRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class AirspeedWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new AirspeedRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._timestamp_sampleIntialized = true;
      this._indicated_airspeed_m_sIntialized = true;
      this._true_airspeed_m_sIntialized = true;
      this._air_temperature_celsiusIntialized = true;
      this._confidenceIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new AirspeedRefStruct();
    this._timestampIntialized = false;
    this._timestamp_sampleIntialized = false;
    this._indicated_airspeed_m_sIntialized = false;
    this._true_airspeed_m_sIntialized = false;
    this._air_temperature_celsiusIntialized = false;
    this._confidenceIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new AirspeedWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new AirspeedArrayWrapper;
  }
  static get ArrayType() {
    return AirspeedArrayWrapper;
  }
  static get refObjectArrayType() {
    return AirspeedRefStructArray
  }
  static get refObjectType() {
    return AirspeedRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in Airspeed');
      }
      if (checkConsistency && !this._timestamp_sampleIntialized) {
        throw new TypeError('Invalid argument: timestamp_sample in Airspeed');
      }
      if (checkConsistency && !this._indicated_airspeed_m_sIntialized) {
        throw new TypeError('Invalid argument: indicated_airspeed_m_s in Airspeed');
      }
      if (checkConsistency && !this._true_airspeed_m_sIntialized) {
        throw new TypeError('Invalid argument: true_airspeed_m_s in Airspeed');
      }
      if (checkConsistency && !this._air_temperature_celsiusIntialized) {
        throw new TypeError('Invalid argument: air_temperature_celsius in Airspeed');
      }
      if (checkConsistency && !this._confidenceIntialized) {
        throw new TypeError('Invalid argument: confidence in Airspeed');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = refObject.timestamp_sample;
    this._indicated_airspeed_m_sIntialized = true;
    this._refObject.indicated_airspeed_m_s = refObject.indicated_airspeed_m_s;
    this._true_airspeed_m_sIntialized = true;
    this._refObject.true_airspeed_m_s = refObject.true_airspeed_m_s;
    this._air_temperature_celsiusIntialized = true;
    this._refObject.air_temperature_celsius = refObject.air_temperature_celsius;
    this._confidenceIntialized = true;
    this._refObject.confidence = refObject.confidence;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    AirspeedWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'Airspeed'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get timestamp_sample() {
    if (!this._timestamp_sampleIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_sample;
  }
  set timestamp_sample(value) {
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = value;
  }
  get indicated_airspeed_m_s() {
    if (!this._indicated_airspeed_m_sIntialized) {
      return undefined;
    }
    return this._refObject.indicated_airspeed_m_s;
  }
  set indicated_airspeed_m_s(value) {
    this._indicated_airspeed_m_sIntialized = true;
    this._refObject.indicated_airspeed_m_s = value;
  }
  get true_airspeed_m_s() {
    if (!this._true_airspeed_m_sIntialized) {
      return undefined;
    }
    return this._refObject.true_airspeed_m_s;
  }
  set true_airspeed_m_s(value) {
    this._true_airspeed_m_sIntialized = true;
    this._refObject.true_airspeed_m_s = value;
  }
  get air_temperature_celsius() {
    if (!this._air_temperature_celsiusIntialized) {
      return undefined;
    }
    return this._refObject.air_temperature_celsius;
  }
  set air_temperature_celsius(value) {
    this._air_temperature_celsiusIntialized = true;
    this._refObject.air_temperature_celsius = value;
  }
  get confidence() {
    if (!this._confidenceIntialized) {
      return undefined;
    }
    return this._refObject.confidence;
  }
  set confidence(value) {
    this._confidenceIntialized = true;
    this._refObject.confidence = value;
  }
  copyRefObject(refObject) {
    this._refObject = new AirspeedRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._indicated_airspeed_m_sIntialized = true;
    this._true_airspeed_m_sIntialized = true;
    this._air_temperature_celsiusIntialized = true;
    this._confidenceIntialized = true;
  }
  copy(other) {
    this._refObject = new AirspeedRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._indicated_airspeed_m_sIntialized = true;
    this._true_airspeed_m_sIntialized = true;
    this._air_temperature_celsiusIntialized = true;
    this._confidenceIntialized = true;
  }
  static get classType() {
    return AirspeedWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_sample","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"indicated_airspeed_m_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"true_airspeed_m_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"air_temperature_celsius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"confidence","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"Airspeed","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Airspeed"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","timestamp_sample","indicated_airspeed_m_s","true_airspeed_m_s","air_temperature_celsius","confidence"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class AirspeedArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof AirspeedWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new AirspeedWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AirspeedArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to AirspeedArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new AirspeedRefArray(size);
    this._refObject = new AirspeedRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new AirspeedWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof AirspeedArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "AirspeedArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      AirspeedWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return AirspeedWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return AirspeedArrayWrapper;
  }
}
module.exports = AirspeedWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_sample",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "indicated_airspeed_m_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "true_airspeed_m_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "air_temperature_celsius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "confidence",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "Airspeed",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Airspeed"
}
*/
