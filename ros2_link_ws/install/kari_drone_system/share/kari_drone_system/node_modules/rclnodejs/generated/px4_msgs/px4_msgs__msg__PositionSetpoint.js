// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PositionSetpointRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  valid: primitiveTypes.bool,
  type: primitiveTypes.uint8,
  vx: primitiveTypes.float32,
  vy: primitiveTypes.float32,
  vz: primitiveTypes.float32,
  lat: primitiveTypes.float64,
  lon: primitiveTypes.float64,
  alt: primitiveTypes.float32,
  yaw: primitiveTypes.float32,
  yaw_valid: primitiveTypes.bool,
  yawspeed: primitiveTypes.float32,
  yawspeed_valid: primitiveTypes.bool,
  loiter_radius: primitiveTypes.float32,
  loiter_direction_counter_clockwise: primitiveTypes.bool,
  acceptance_radius: primitiveTypes.float32,
  cruising_speed: primitiveTypes.float32,
  gliding_enabled: primitiveTypes.bool,
  cruising_throttle: primitiveTypes.float32,
  disable_weather_vane: primitiveTypes.bool,
});
const PositionSetpointRefArray = ArrayType(PositionSetpointRefStruct);
const PositionSetpointRefStructArray = StructType({
  data: PositionSetpointRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PositionSetpointWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PositionSetpointRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._validIntialized = true;
      this._typeIntialized = true;
      this._vxIntialized = true;
      this._vyIntialized = true;
      this._vzIntialized = true;
      this._latIntialized = true;
      this._lonIntialized = true;
      this._altIntialized = true;
      this._yawIntialized = true;
      this._yaw_validIntialized = true;
      this._yawspeedIntialized = true;
      this._yawspeed_validIntialized = true;
      this._loiter_radiusIntialized = true;
      this._loiter_direction_counter_clockwiseIntialized = true;
      this._acceptance_radiusIntialized = true;
      this._cruising_speedIntialized = true;
      this._gliding_enabledIntialized = true;
      this._cruising_throttleIntialized = true;
      this._disable_weather_vaneIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PositionSetpointRefStruct();
    this._timestampIntialized = false;
    this._validIntialized = false;
    this._typeIntialized = false;
    this._vxIntialized = false;
    this._vyIntialized = false;
    this._vzIntialized = false;
    this._latIntialized = false;
    this._lonIntialized = false;
    this._altIntialized = false;
    this._yawIntialized = false;
    this._yaw_validIntialized = false;
    this._yawspeedIntialized = false;
    this._yawspeed_validIntialized = false;
    this._loiter_radiusIntialized = false;
    this._loiter_direction_counter_clockwiseIntialized = false;
    this._acceptance_radiusIntialized = false;
    this._cruising_speedIntialized = false;
    this._gliding_enabledIntialized = false;
    this._cruising_throttleIntialized = false;
    this._disable_weather_vaneIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PositionSetpointWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PositionSetpointArrayWrapper;
  }
  static get ArrayType() {
    return PositionSetpointArrayWrapper;
  }
  static get refObjectArrayType() {
    return PositionSetpointRefStructArray
  }
  static get refObjectType() {
    return PositionSetpointRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in PositionSetpoint');
      }
      if (checkConsistency && !this._validIntialized) {
        throw new TypeError('Invalid argument: valid in PositionSetpoint');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in PositionSetpoint');
      }
      if (checkConsistency && !this._vxIntialized) {
        throw new TypeError('Invalid argument: vx in PositionSetpoint');
      }
      if (checkConsistency && !this._vyIntialized) {
        throw new TypeError('Invalid argument: vy in PositionSetpoint');
      }
      if (checkConsistency && !this._vzIntialized) {
        throw new TypeError('Invalid argument: vz in PositionSetpoint');
      }
      if (checkConsistency && !this._latIntialized) {
        throw new TypeError('Invalid argument: lat in PositionSetpoint');
      }
      if (checkConsistency && !this._lonIntialized) {
        throw new TypeError('Invalid argument: lon in PositionSetpoint');
      }
      if (checkConsistency && !this._altIntialized) {
        throw new TypeError('Invalid argument: alt in PositionSetpoint');
      }
      if (checkConsistency && !this._yawIntialized) {
        throw new TypeError('Invalid argument: yaw in PositionSetpoint');
      }
      if (checkConsistency && !this._yaw_validIntialized) {
        throw new TypeError('Invalid argument: yaw_valid in PositionSetpoint');
      }
      if (checkConsistency && !this._yawspeedIntialized) {
        throw new TypeError('Invalid argument: yawspeed in PositionSetpoint');
      }
      if (checkConsistency && !this._yawspeed_validIntialized) {
        throw new TypeError('Invalid argument: yawspeed_valid in PositionSetpoint');
      }
      if (checkConsistency && !this._loiter_radiusIntialized) {
        throw new TypeError('Invalid argument: loiter_radius in PositionSetpoint');
      }
      if (checkConsistency && !this._loiter_direction_counter_clockwiseIntialized) {
        throw new TypeError('Invalid argument: loiter_direction_counter_clockwise in PositionSetpoint');
      }
      if (checkConsistency && !this._acceptance_radiusIntialized) {
        throw new TypeError('Invalid argument: acceptance_radius in PositionSetpoint');
      }
      if (checkConsistency && !this._cruising_speedIntialized) {
        throw new TypeError('Invalid argument: cruising_speed in PositionSetpoint');
      }
      if (checkConsistency && !this._gliding_enabledIntialized) {
        throw new TypeError('Invalid argument: gliding_enabled in PositionSetpoint');
      }
      if (checkConsistency && !this._cruising_throttleIntialized) {
        throw new TypeError('Invalid argument: cruising_throttle in PositionSetpoint');
      }
      if (checkConsistency && !this._disable_weather_vaneIntialized) {
        throw new TypeError('Invalid argument: disable_weather_vane in PositionSetpoint');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._validIntialized = true;
    this._refObject.valid = refObject.valid;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._vxIntialized = true;
    this._refObject.vx = refObject.vx;
    this._vyIntialized = true;
    this._refObject.vy = refObject.vy;
    this._vzIntialized = true;
    this._refObject.vz = refObject.vz;
    this._latIntialized = true;
    this._refObject.lat = refObject.lat;
    this._lonIntialized = true;
    this._refObject.lon = refObject.lon;
    this._altIntialized = true;
    this._refObject.alt = refObject.alt;
    this._yawIntialized = true;
    this._refObject.yaw = refObject.yaw;
    this._yaw_validIntialized = true;
    this._refObject.yaw_valid = refObject.yaw_valid;
    this._yawspeedIntialized = true;
    this._refObject.yawspeed = refObject.yawspeed;
    this._yawspeed_validIntialized = true;
    this._refObject.yawspeed_valid = refObject.yawspeed_valid;
    this._loiter_radiusIntialized = true;
    this._refObject.loiter_radius = refObject.loiter_radius;
    this._loiter_direction_counter_clockwiseIntialized = true;
    this._refObject.loiter_direction_counter_clockwise = refObject.loiter_direction_counter_clockwise;
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = refObject.acceptance_radius;
    this._cruising_speedIntialized = true;
    this._refObject.cruising_speed = refObject.cruising_speed;
    this._gliding_enabledIntialized = true;
    this._refObject.gliding_enabled = refObject.gliding_enabled;
    this._cruising_throttleIntialized = true;
    this._refObject.cruising_throttle = refObject.cruising_throttle;
    this._disable_weather_vaneIntialized = true;
    this._refObject.disable_weather_vane = refObject.disable_weather_vane;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    PositionSetpointWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'PositionSetpoint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get valid() {
    if (!this._validIntialized) {
      return undefined;
    }
    return this._refObject.valid;
  }
  set valid(value) {
    this._validIntialized = true;
    this._refObject.valid = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get vx() {
    if (!this._vxIntialized) {
      return undefined;
    }
    return this._refObject.vx;
  }
  set vx(value) {
    this._vxIntialized = true;
    this._refObject.vx = value;
  }
  get vy() {
    if (!this._vyIntialized) {
      return undefined;
    }
    return this._refObject.vy;
  }
  set vy(value) {
    this._vyIntialized = true;
    this._refObject.vy = value;
  }
  get vz() {
    if (!this._vzIntialized) {
      return undefined;
    }
    return this._refObject.vz;
  }
  set vz(value) {
    this._vzIntialized = true;
    this._refObject.vz = value;
  }
  get lat() {
    if (!this._latIntialized) {
      return undefined;
    }
    return this._refObject.lat;
  }
  set lat(value) {
    this._latIntialized = true;
    this._refObject.lat = value;
  }
  get lon() {
    if (!this._lonIntialized) {
      return undefined;
    }
    return this._refObject.lon;
  }
  set lon(value) {
    this._lonIntialized = true;
    this._refObject.lon = value;
  }
  get alt() {
    if (!this._altIntialized) {
      return undefined;
    }
    return this._refObject.alt;
  }
  set alt(value) {
    this._altIntialized = true;
    this._refObject.alt = value;
  }
  get yaw() {
    if (!this._yawIntialized) {
      return undefined;
    }
    return this._refObject.yaw;
  }
  set yaw(value) {
    this._yawIntialized = true;
    this._refObject.yaw = value;
  }
  get yaw_valid() {
    if (!this._yaw_validIntialized) {
      return undefined;
    }
    return this._refObject.yaw_valid;
  }
  set yaw_valid(value) {
    this._yaw_validIntialized = true;
    this._refObject.yaw_valid = value;
  }
  get yawspeed() {
    if (!this._yawspeedIntialized) {
      return undefined;
    }
    return this._refObject.yawspeed;
  }
  set yawspeed(value) {
    this._yawspeedIntialized = true;
    this._refObject.yawspeed = value;
  }
  get yawspeed_valid() {
    if (!this._yawspeed_validIntialized) {
      return undefined;
    }
    return this._refObject.yawspeed_valid;
  }
  set yawspeed_valid(value) {
    this._yawspeed_validIntialized = true;
    this._refObject.yawspeed_valid = value;
  }
  get loiter_radius() {
    if (!this._loiter_radiusIntialized) {
      return undefined;
    }
    return this._refObject.loiter_radius;
  }
  set loiter_radius(value) {
    this._loiter_radiusIntialized = true;
    this._refObject.loiter_radius = value;
  }
  get loiter_direction_counter_clockwise() {
    if (!this._loiter_direction_counter_clockwiseIntialized) {
      return undefined;
    }
    return this._refObject.loiter_direction_counter_clockwise;
  }
  set loiter_direction_counter_clockwise(value) {
    this._loiter_direction_counter_clockwiseIntialized = true;
    this._refObject.loiter_direction_counter_clockwise = value;
  }
  get acceptance_radius() {
    if (!this._acceptance_radiusIntialized) {
      return undefined;
    }
    return this._refObject.acceptance_radius;
  }
  set acceptance_radius(value) {
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = value;
  }
  get cruising_speed() {
    if (!this._cruising_speedIntialized) {
      return undefined;
    }
    return this._refObject.cruising_speed;
  }
  set cruising_speed(value) {
    this._cruising_speedIntialized = true;
    this._refObject.cruising_speed = value;
  }
  get gliding_enabled() {
    if (!this._gliding_enabledIntialized) {
      return undefined;
    }
    return this._refObject.gliding_enabled;
  }
  set gliding_enabled(value) {
    this._gliding_enabledIntialized = true;
    this._refObject.gliding_enabled = value;
  }
  get cruising_throttle() {
    if (!this._cruising_throttleIntialized) {
      return undefined;
    }
    return this._refObject.cruising_throttle;
  }
  set cruising_throttle(value) {
    this._cruising_throttleIntialized = true;
    this._refObject.cruising_throttle = value;
  }
  get disable_weather_vane() {
    if (!this._disable_weather_vaneIntialized) {
      return undefined;
    }
    return this._refObject.disable_weather_vane;
  }
  set disable_weather_vane(value) {
    this._disable_weather_vaneIntialized = true;
    this._refObject.disable_weather_vane = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PositionSetpointRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._validIntialized = true;
    this._typeIntialized = true;
    this._vxIntialized = true;
    this._vyIntialized = true;
    this._vzIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._altIntialized = true;
    this._yawIntialized = true;
    this._yaw_validIntialized = true;
    this._yawspeedIntialized = true;
    this._yawspeed_validIntialized = true;
    this._loiter_radiusIntialized = true;
    this._loiter_direction_counter_clockwiseIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._cruising_speedIntialized = true;
    this._gliding_enabledIntialized = true;
    this._cruising_throttleIntialized = true;
    this._disable_weather_vaneIntialized = true;
  }
  copy(other) {
    this._refObject = new PositionSetpointRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._validIntialized = true;
    this._typeIntialized = true;
    this._vxIntialized = true;
    this._vyIntialized = true;
    this._vzIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._altIntialized = true;
    this._yawIntialized = true;
    this._yaw_validIntialized = true;
    this._yawspeedIntialized = true;
    this._yawspeed_validIntialized = true;
    this._loiter_radiusIntialized = true;
    this._loiter_direction_counter_clockwiseIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._cruising_speedIntialized = true;
    this._gliding_enabledIntialized = true;
    this._cruising_throttleIntialized = true;
    this._disable_weather_vaneIntialized = true;
  }
  static get classType() {
    return PositionSetpointWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"SETPOINT_TYPE_POSITION","value":0},{"type":"uint8","name":"SETPOINT_TYPE_VELOCITY","value":1},{"type":"uint8","name":"SETPOINT_TYPE_LOITER","value":2},{"type":"uint8","name":"SETPOINT_TYPE_TAKEOFF","value":3},{"type":"uint8","name":"SETPOINT_TYPE_LAND","value":4},{"type":"uint8","name":"SETPOINT_TYPE_IDLE","value":5}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vx","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vy","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vz","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lon","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw_valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yawspeed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yawspeed_valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loiter_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loiter_direction_counter_clockwise","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"acceptance_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cruising_speed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gliding_enabled","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cruising_throttle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"disable_weather_vane","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"PositionSetpoint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PositionSetpoint"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","valid","type","vx","vy","vz","lat","lon","alt","yaw","yaw_valid","yawspeed","yawspeed_valid","loiter_radius","loiter_direction_counter_clockwise","acceptance_radius","cruising_speed","gliding_enabled","cruising_throttle","disable_weather_vane"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PositionSetpointArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PositionSetpointWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PositionSetpointWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionSetpointArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionSetpointArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PositionSetpointRefArray(size);
    this._refObject = new PositionSetpointRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PositionSetpointWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PositionSetpointArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PositionSetpointArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PositionSetpointWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PositionSetpointWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PositionSetpointArrayWrapper;
  }
}
// Define constants (6 in total)
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_POSITION", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_VELOCITY", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_LOITER", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_TAKEOFF", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_LAND", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(PositionSetpointWrapper, "SETPOINT_TYPE_IDLE", {value: 5, writable: false, enumerable: true, configurable: true});
module.exports = PositionSetpointWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_POSITION",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_VELOCITY",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_LOITER",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_TAKEOFF",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_LAND",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "SETPOINT_TYPE_IDLE",
      "value": 5
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vx",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vy",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vz",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lon",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw_valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yawspeed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yawspeed_valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loiter_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loiter_direction_counter_clockwise",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "acceptance_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cruising_speed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gliding_enabled",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cruising_throttle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "disable_weather_vane",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "PositionSetpoint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PositionSetpoint"
}
*/
