// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const PositionControllerStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  nav_roll: primitiveTypes.float32,
  nav_pitch: primitiveTypes.float32,
  nav_bearing: primitiveTypes.float32,
  target_bearing: primitiveTypes.float32,
  xtrack_error: primitiveTypes.float32,
  wp_dist: primitiveTypes.float32,
  acceptance_radius: primitiveTypes.float32,
  yaw_acceptance: primitiveTypes.float32,
  altitude_acceptance: primitiveTypes.float32,
  type: primitiveTypes.uint8,
});
const PositionControllerStatusRefArray = ArrayType(PositionControllerStatusRefStruct);
const PositionControllerStatusRefStructArray = StructType({
  data: PositionControllerStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class PositionControllerStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new PositionControllerStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._nav_rollIntialized = true;
      this._nav_pitchIntialized = true;
      this._nav_bearingIntialized = true;
      this._target_bearingIntialized = true;
      this._xtrack_errorIntialized = true;
      this._wp_distIntialized = true;
      this._acceptance_radiusIntialized = true;
      this._yaw_acceptanceIntialized = true;
      this._altitude_acceptanceIntialized = true;
      this._typeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new PositionControllerStatusRefStruct();
    this._timestampIntialized = false;
    this._nav_rollIntialized = false;
    this._nav_pitchIntialized = false;
    this._nav_bearingIntialized = false;
    this._target_bearingIntialized = false;
    this._xtrack_errorIntialized = false;
    this._wp_distIntialized = false;
    this._acceptance_radiusIntialized = false;
    this._yaw_acceptanceIntialized = false;
    this._altitude_acceptanceIntialized = false;
    this._typeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new PositionControllerStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new PositionControllerStatusArrayWrapper;
  }
  static get ArrayType() {
    return PositionControllerStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return PositionControllerStatusRefStructArray
  }
  static get refObjectType() {
    return PositionControllerStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in PositionControllerStatus');
      }
      if (checkConsistency && !this._nav_rollIntialized) {
        throw new TypeError('Invalid argument: nav_roll in PositionControllerStatus');
      }
      if (checkConsistency && !this._nav_pitchIntialized) {
        throw new TypeError('Invalid argument: nav_pitch in PositionControllerStatus');
      }
      if (checkConsistency && !this._nav_bearingIntialized) {
        throw new TypeError('Invalid argument: nav_bearing in PositionControllerStatus');
      }
      if (checkConsistency && !this._target_bearingIntialized) {
        throw new TypeError('Invalid argument: target_bearing in PositionControllerStatus');
      }
      if (checkConsistency && !this._xtrack_errorIntialized) {
        throw new TypeError('Invalid argument: xtrack_error in PositionControllerStatus');
      }
      if (checkConsistency && !this._wp_distIntialized) {
        throw new TypeError('Invalid argument: wp_dist in PositionControllerStatus');
      }
      if (checkConsistency && !this._acceptance_radiusIntialized) {
        throw new TypeError('Invalid argument: acceptance_radius in PositionControllerStatus');
      }
      if (checkConsistency && !this._yaw_acceptanceIntialized) {
        throw new TypeError('Invalid argument: yaw_acceptance in PositionControllerStatus');
      }
      if (checkConsistency && !this._altitude_acceptanceIntialized) {
        throw new TypeError('Invalid argument: altitude_acceptance in PositionControllerStatus');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in PositionControllerStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._nav_rollIntialized = true;
    this._refObject.nav_roll = refObject.nav_roll;
    this._nav_pitchIntialized = true;
    this._refObject.nav_pitch = refObject.nav_pitch;
    this._nav_bearingIntialized = true;
    this._refObject.nav_bearing = refObject.nav_bearing;
    this._target_bearingIntialized = true;
    this._refObject.target_bearing = refObject.target_bearing;
    this._xtrack_errorIntialized = true;
    this._refObject.xtrack_error = refObject.xtrack_error;
    this._wp_distIntialized = true;
    this._refObject.wp_dist = refObject.wp_dist;
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = refObject.acceptance_radius;
    this._yaw_acceptanceIntialized = true;
    this._refObject.yaw_acceptance = refObject.yaw_acceptance;
    this._altitude_acceptanceIntialized = true;
    this._refObject.altitude_acceptance = refObject.altitude_acceptance;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    PositionControllerStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'PositionControllerStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get nav_roll() {
    if (!this._nav_rollIntialized) {
      return undefined;
    }
    return this._refObject.nav_roll;
  }
  set nav_roll(value) {
    this._nav_rollIntialized = true;
    this._refObject.nav_roll = value;
  }
  get nav_pitch() {
    if (!this._nav_pitchIntialized) {
      return undefined;
    }
    return this._refObject.nav_pitch;
  }
  set nav_pitch(value) {
    this._nav_pitchIntialized = true;
    this._refObject.nav_pitch = value;
  }
  get nav_bearing() {
    if (!this._nav_bearingIntialized) {
      return undefined;
    }
    return this._refObject.nav_bearing;
  }
  set nav_bearing(value) {
    this._nav_bearingIntialized = true;
    this._refObject.nav_bearing = value;
  }
  get target_bearing() {
    if (!this._target_bearingIntialized) {
      return undefined;
    }
    return this._refObject.target_bearing;
  }
  set target_bearing(value) {
    this._target_bearingIntialized = true;
    this._refObject.target_bearing = value;
  }
  get xtrack_error() {
    if (!this._xtrack_errorIntialized) {
      return undefined;
    }
    return this._refObject.xtrack_error;
  }
  set xtrack_error(value) {
    this._xtrack_errorIntialized = true;
    this._refObject.xtrack_error = value;
  }
  get wp_dist() {
    if (!this._wp_distIntialized) {
      return undefined;
    }
    return this._refObject.wp_dist;
  }
  set wp_dist(value) {
    this._wp_distIntialized = true;
    this._refObject.wp_dist = value;
  }
  get acceptance_radius() {
    if (!this._acceptance_radiusIntialized) {
      return undefined;
    }
    return this._refObject.acceptance_radius;
  }
  set acceptance_radius(value) {
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = value;
  }
  get yaw_acceptance() {
    if (!this._yaw_acceptanceIntialized) {
      return undefined;
    }
    return this._refObject.yaw_acceptance;
  }
  set yaw_acceptance(value) {
    this._yaw_acceptanceIntialized = true;
    this._refObject.yaw_acceptance = value;
  }
  get altitude_acceptance() {
    if (!this._altitude_acceptanceIntialized) {
      return undefined;
    }
    return this._refObject.altitude_acceptance;
  }
  set altitude_acceptance(value) {
    this._altitude_acceptanceIntialized = true;
    this._refObject.altitude_acceptance = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  copyRefObject(refObject) {
    this._refObject = new PositionControllerStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._nav_rollIntialized = true;
    this._nav_pitchIntialized = true;
    this._nav_bearingIntialized = true;
    this._target_bearingIntialized = true;
    this._xtrack_errorIntialized = true;
    this._wp_distIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._yaw_acceptanceIntialized = true;
    this._altitude_acceptanceIntialized = true;
    this._typeIntialized = true;
  }
  copy(other) {
    this._refObject = new PositionControllerStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._nav_rollIntialized = true;
    this._nav_pitchIntialized = true;
    this._nav_bearingIntialized = true;
    this._target_bearingIntialized = true;
    this._xtrack_errorIntialized = true;
    this._wp_distIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._yaw_acceptanceIntialized = true;
    this._altitude_acceptanceIntialized = true;
    this._typeIntialized = true;
  }
  static get classType() {
    return PositionControllerStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"nav_roll","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"nav_pitch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"nav_bearing","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"target_bearing","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"xtrack_error","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"wp_dist","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"acceptance_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw_acceptance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"altitude_acceptance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"PositionControllerStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"PositionControllerStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","nav_roll","nav_pitch","nav_bearing","target_bearing","xtrack_error","wp_dist","acceptance_radius","yaw_acceptance","altitude_acceptance","type"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class PositionControllerStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof PositionControllerStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new PositionControllerStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionControllerStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to PositionControllerStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new PositionControllerStatusRefArray(size);
    this._refObject = new PositionControllerStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new PositionControllerStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof PositionControllerStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "PositionControllerStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      PositionControllerStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return PositionControllerStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return PositionControllerStatusArrayWrapper;
  }
}
module.exports = PositionControllerStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "nav_roll",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "nav_pitch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "nav_bearing",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "target_bearing",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "xtrack_error",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "wp_dist",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "acceptance_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw_acceptance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "altitude_acceptance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "PositionControllerStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "PositionControllerStatus"
}
*/
