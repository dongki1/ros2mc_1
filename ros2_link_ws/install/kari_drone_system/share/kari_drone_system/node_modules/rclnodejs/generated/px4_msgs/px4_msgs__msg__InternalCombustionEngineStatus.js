// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const InternalCombustionEngineStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  state: primitiveTypes.uint8,
  flags: primitiveTypes.uint32,
  engine_load_percent: primitiveTypes.uint8,
  engine_speed_rpm: primitiveTypes.uint32,
  spark_dwell_time_ms: primitiveTypes.float32,
  atmospheric_pressure_kpa: primitiveTypes.float32,
  intake_manifold_pressure_kpa: primitiveTypes.float32,
  intake_manifold_temperature: primitiveTypes.float32,
  coolant_temperature: primitiveTypes.float32,
  oil_pressure: primitiveTypes.float32,
  oil_temperature: primitiveTypes.float32,
  fuel_pressure: primitiveTypes.float32,
  fuel_consumption_rate_cm3pm: primitiveTypes.float32,
  estimated_consumed_fuel_volume_cm3: primitiveTypes.float32,
  throttle_position_percent: primitiveTypes.uint8,
  ecu_index: primitiveTypes.uint8,
  spark_plug_usage: primitiveTypes.uint8,
  ignition_timing_deg: primitiveTypes.float32,
  injection_time_ms: primitiveTypes.float32,
  cylinder_head_temperature: primitiveTypes.float32,
  exhaust_gas_temperature: primitiveTypes.float32,
  lambda_coefficient: primitiveTypes.float32,
});
const InternalCombustionEngineStatusRefArray = ArrayType(InternalCombustionEngineStatusRefStruct);
const InternalCombustionEngineStatusRefStructArray = StructType({
  data: InternalCombustionEngineStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class InternalCombustionEngineStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new InternalCombustionEngineStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._stateIntialized = true;
      this._flagsIntialized = true;
      this._engine_load_percentIntialized = true;
      this._engine_speed_rpmIntialized = true;
      this._spark_dwell_time_msIntialized = true;
      this._atmospheric_pressure_kpaIntialized = true;
      this._intake_manifold_pressure_kpaIntialized = true;
      this._intake_manifold_temperatureIntialized = true;
      this._coolant_temperatureIntialized = true;
      this._oil_pressureIntialized = true;
      this._oil_temperatureIntialized = true;
      this._fuel_pressureIntialized = true;
      this._fuel_consumption_rate_cm3pmIntialized = true;
      this._estimated_consumed_fuel_volume_cm3Intialized = true;
      this._throttle_position_percentIntialized = true;
      this._ecu_indexIntialized = true;
      this._spark_plug_usageIntialized = true;
      this._ignition_timing_degIntialized = true;
      this._injection_time_msIntialized = true;
      this._cylinder_head_temperatureIntialized = true;
      this._exhaust_gas_temperatureIntialized = true;
      this._lambda_coefficientIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new InternalCombustionEngineStatusRefStruct();
    this._timestampIntialized = false;
    this._stateIntialized = false;
    this._flagsIntialized = false;
    this._engine_load_percentIntialized = false;
    this._engine_speed_rpmIntialized = false;
    this._spark_dwell_time_msIntialized = false;
    this._atmospheric_pressure_kpaIntialized = false;
    this._intake_manifold_pressure_kpaIntialized = false;
    this._intake_manifold_temperatureIntialized = false;
    this._coolant_temperatureIntialized = false;
    this._oil_pressureIntialized = false;
    this._oil_temperatureIntialized = false;
    this._fuel_pressureIntialized = false;
    this._fuel_consumption_rate_cm3pmIntialized = false;
    this._estimated_consumed_fuel_volume_cm3Intialized = false;
    this._throttle_position_percentIntialized = false;
    this._ecu_indexIntialized = false;
    this._spark_plug_usageIntialized = false;
    this._ignition_timing_degIntialized = false;
    this._injection_time_msIntialized = false;
    this._cylinder_head_temperatureIntialized = false;
    this._exhaust_gas_temperatureIntialized = false;
    this._lambda_coefficientIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new InternalCombustionEngineStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new InternalCombustionEngineStatusArrayWrapper;
  }
  static get ArrayType() {
    return InternalCombustionEngineStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return InternalCombustionEngineStatusRefStructArray
  }
  static get refObjectType() {
    return InternalCombustionEngineStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._stateIntialized) {
        throw new TypeError('Invalid argument: state in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._flagsIntialized) {
        throw new TypeError('Invalid argument: flags in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._engine_load_percentIntialized) {
        throw new TypeError('Invalid argument: engine_load_percent in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._engine_speed_rpmIntialized) {
        throw new TypeError('Invalid argument: engine_speed_rpm in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._spark_dwell_time_msIntialized) {
        throw new TypeError('Invalid argument: spark_dwell_time_ms in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._atmospheric_pressure_kpaIntialized) {
        throw new TypeError('Invalid argument: atmospheric_pressure_kpa in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._intake_manifold_pressure_kpaIntialized) {
        throw new TypeError('Invalid argument: intake_manifold_pressure_kpa in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._intake_manifold_temperatureIntialized) {
        throw new TypeError('Invalid argument: intake_manifold_temperature in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._coolant_temperatureIntialized) {
        throw new TypeError('Invalid argument: coolant_temperature in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._oil_pressureIntialized) {
        throw new TypeError('Invalid argument: oil_pressure in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._oil_temperatureIntialized) {
        throw new TypeError('Invalid argument: oil_temperature in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._fuel_pressureIntialized) {
        throw new TypeError('Invalid argument: fuel_pressure in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._fuel_consumption_rate_cm3pmIntialized) {
        throw new TypeError('Invalid argument: fuel_consumption_rate_cm3pm in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._estimated_consumed_fuel_volume_cm3Intialized) {
        throw new TypeError('Invalid argument: estimated_consumed_fuel_volume_cm3 in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._throttle_position_percentIntialized) {
        throw new TypeError('Invalid argument: throttle_position_percent in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._ecu_indexIntialized) {
        throw new TypeError('Invalid argument: ecu_index in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._spark_plug_usageIntialized) {
        throw new TypeError('Invalid argument: spark_plug_usage in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._ignition_timing_degIntialized) {
        throw new TypeError('Invalid argument: ignition_timing_deg in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._injection_time_msIntialized) {
        throw new TypeError('Invalid argument: injection_time_ms in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._cylinder_head_temperatureIntialized) {
        throw new TypeError('Invalid argument: cylinder_head_temperature in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._exhaust_gas_temperatureIntialized) {
        throw new TypeError('Invalid argument: exhaust_gas_temperature in InternalCombustionEngineStatus');
      }
      if (checkConsistency && !this._lambda_coefficientIntialized) {
        throw new TypeError('Invalid argument: lambda_coefficient in InternalCombustionEngineStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._stateIntialized = true;
    this._refObject.state = refObject.state;
    this._flagsIntialized = true;
    this._refObject.flags = refObject.flags;
    this._engine_load_percentIntialized = true;
    this._refObject.engine_load_percent = refObject.engine_load_percent;
    this._engine_speed_rpmIntialized = true;
    this._refObject.engine_speed_rpm = refObject.engine_speed_rpm;
    this._spark_dwell_time_msIntialized = true;
    this._refObject.spark_dwell_time_ms = refObject.spark_dwell_time_ms;
    this._atmospheric_pressure_kpaIntialized = true;
    this._refObject.atmospheric_pressure_kpa = refObject.atmospheric_pressure_kpa;
    this._intake_manifold_pressure_kpaIntialized = true;
    this._refObject.intake_manifold_pressure_kpa = refObject.intake_manifold_pressure_kpa;
    this._intake_manifold_temperatureIntialized = true;
    this._refObject.intake_manifold_temperature = refObject.intake_manifold_temperature;
    this._coolant_temperatureIntialized = true;
    this._refObject.coolant_temperature = refObject.coolant_temperature;
    this._oil_pressureIntialized = true;
    this._refObject.oil_pressure = refObject.oil_pressure;
    this._oil_temperatureIntialized = true;
    this._refObject.oil_temperature = refObject.oil_temperature;
    this._fuel_pressureIntialized = true;
    this._refObject.fuel_pressure = refObject.fuel_pressure;
    this._fuel_consumption_rate_cm3pmIntialized = true;
    this._refObject.fuel_consumption_rate_cm3pm = refObject.fuel_consumption_rate_cm3pm;
    this._estimated_consumed_fuel_volume_cm3Intialized = true;
    this._refObject.estimated_consumed_fuel_volume_cm3 = refObject.estimated_consumed_fuel_volume_cm3;
    this._throttle_position_percentIntialized = true;
    this._refObject.throttle_position_percent = refObject.throttle_position_percent;
    this._ecu_indexIntialized = true;
    this._refObject.ecu_index = refObject.ecu_index;
    this._spark_plug_usageIntialized = true;
    this._refObject.spark_plug_usage = refObject.spark_plug_usage;
    this._ignition_timing_degIntialized = true;
    this._refObject.ignition_timing_deg = refObject.ignition_timing_deg;
    this._injection_time_msIntialized = true;
    this._refObject.injection_time_ms = refObject.injection_time_ms;
    this._cylinder_head_temperatureIntialized = true;
    this._refObject.cylinder_head_temperature = refObject.cylinder_head_temperature;
    this._exhaust_gas_temperatureIntialized = true;
    this._refObject.exhaust_gas_temperature = refObject.exhaust_gas_temperature;
    this._lambda_coefficientIntialized = true;
    this._refObject.lambda_coefficient = refObject.lambda_coefficient;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    InternalCombustionEngineStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'InternalCombustionEngineStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get state() {
    if (!this._stateIntialized) {
      return undefined;
    }
    return this._refObject.state;
  }
  set state(value) {
    this._stateIntialized = true;
    this._refObject.state = value;
  }
  get flags() {
    if (!this._flagsIntialized) {
      return undefined;
    }
    return this._refObject.flags;
  }
  set flags(value) {
    this._flagsIntialized = true;
    this._refObject.flags = value;
  }
  get engine_load_percent() {
    if (!this._engine_load_percentIntialized) {
      return undefined;
    }
    return this._refObject.engine_load_percent;
  }
  set engine_load_percent(value) {
    this._engine_load_percentIntialized = true;
    this._refObject.engine_load_percent = value;
  }
  get engine_speed_rpm() {
    if (!this._engine_speed_rpmIntialized) {
      return undefined;
    }
    return this._refObject.engine_speed_rpm;
  }
  set engine_speed_rpm(value) {
    this._engine_speed_rpmIntialized = true;
    this._refObject.engine_speed_rpm = value;
  }
  get spark_dwell_time_ms() {
    if (!this._spark_dwell_time_msIntialized) {
      return undefined;
    }
    return this._refObject.spark_dwell_time_ms;
  }
  set spark_dwell_time_ms(value) {
    this._spark_dwell_time_msIntialized = true;
    this._refObject.spark_dwell_time_ms = value;
  }
  get atmospheric_pressure_kpa() {
    if (!this._atmospheric_pressure_kpaIntialized) {
      return undefined;
    }
    return this._refObject.atmospheric_pressure_kpa;
  }
  set atmospheric_pressure_kpa(value) {
    this._atmospheric_pressure_kpaIntialized = true;
    this._refObject.atmospheric_pressure_kpa = value;
  }
  get intake_manifold_pressure_kpa() {
    if (!this._intake_manifold_pressure_kpaIntialized) {
      return undefined;
    }
    return this._refObject.intake_manifold_pressure_kpa;
  }
  set intake_manifold_pressure_kpa(value) {
    this._intake_manifold_pressure_kpaIntialized = true;
    this._refObject.intake_manifold_pressure_kpa = value;
  }
  get intake_manifold_temperature() {
    if (!this._intake_manifold_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.intake_manifold_temperature;
  }
  set intake_manifold_temperature(value) {
    this._intake_manifold_temperatureIntialized = true;
    this._refObject.intake_manifold_temperature = value;
  }
  get coolant_temperature() {
    if (!this._coolant_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.coolant_temperature;
  }
  set coolant_temperature(value) {
    this._coolant_temperatureIntialized = true;
    this._refObject.coolant_temperature = value;
  }
  get oil_pressure() {
    if (!this._oil_pressureIntialized) {
      return undefined;
    }
    return this._refObject.oil_pressure;
  }
  set oil_pressure(value) {
    this._oil_pressureIntialized = true;
    this._refObject.oil_pressure = value;
  }
  get oil_temperature() {
    if (!this._oil_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.oil_temperature;
  }
  set oil_temperature(value) {
    this._oil_temperatureIntialized = true;
    this._refObject.oil_temperature = value;
  }
  get fuel_pressure() {
    if (!this._fuel_pressureIntialized) {
      return undefined;
    }
    return this._refObject.fuel_pressure;
  }
  set fuel_pressure(value) {
    this._fuel_pressureIntialized = true;
    this._refObject.fuel_pressure = value;
  }
  get fuel_consumption_rate_cm3pm() {
    if (!this._fuel_consumption_rate_cm3pmIntialized) {
      return undefined;
    }
    return this._refObject.fuel_consumption_rate_cm3pm;
  }
  set fuel_consumption_rate_cm3pm(value) {
    this._fuel_consumption_rate_cm3pmIntialized = true;
    this._refObject.fuel_consumption_rate_cm3pm = value;
  }
  get estimated_consumed_fuel_volume_cm3() {
    if (!this._estimated_consumed_fuel_volume_cm3Intialized) {
      return undefined;
    }
    return this._refObject.estimated_consumed_fuel_volume_cm3;
  }
  set estimated_consumed_fuel_volume_cm3(value) {
    this._estimated_consumed_fuel_volume_cm3Intialized = true;
    this._refObject.estimated_consumed_fuel_volume_cm3 = value;
  }
  get throttle_position_percent() {
    if (!this._throttle_position_percentIntialized) {
      return undefined;
    }
    return this._refObject.throttle_position_percent;
  }
  set throttle_position_percent(value) {
    this._throttle_position_percentIntialized = true;
    this._refObject.throttle_position_percent = value;
  }
  get ecu_index() {
    if (!this._ecu_indexIntialized) {
      return undefined;
    }
    return this._refObject.ecu_index;
  }
  set ecu_index(value) {
    this._ecu_indexIntialized = true;
    this._refObject.ecu_index = value;
  }
  get spark_plug_usage() {
    if (!this._spark_plug_usageIntialized) {
      return undefined;
    }
    return this._refObject.spark_plug_usage;
  }
  set spark_plug_usage(value) {
    this._spark_plug_usageIntialized = true;
    this._refObject.spark_plug_usage = value;
  }
  get ignition_timing_deg() {
    if (!this._ignition_timing_degIntialized) {
      return undefined;
    }
    return this._refObject.ignition_timing_deg;
  }
  set ignition_timing_deg(value) {
    this._ignition_timing_degIntialized = true;
    this._refObject.ignition_timing_deg = value;
  }
  get injection_time_ms() {
    if (!this._injection_time_msIntialized) {
      return undefined;
    }
    return this._refObject.injection_time_ms;
  }
  set injection_time_ms(value) {
    this._injection_time_msIntialized = true;
    this._refObject.injection_time_ms = value;
  }
  get cylinder_head_temperature() {
    if (!this._cylinder_head_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.cylinder_head_temperature;
  }
  set cylinder_head_temperature(value) {
    this._cylinder_head_temperatureIntialized = true;
    this._refObject.cylinder_head_temperature = value;
  }
  get exhaust_gas_temperature() {
    if (!this._exhaust_gas_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.exhaust_gas_temperature;
  }
  set exhaust_gas_temperature(value) {
    this._exhaust_gas_temperatureIntialized = true;
    this._refObject.exhaust_gas_temperature = value;
  }
  get lambda_coefficient() {
    if (!this._lambda_coefficientIntialized) {
      return undefined;
    }
    return this._refObject.lambda_coefficient;
  }
  set lambda_coefficient(value) {
    this._lambda_coefficientIntialized = true;
    this._refObject.lambda_coefficient = value;
  }
  copyRefObject(refObject) {
    this._refObject = new InternalCombustionEngineStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._stateIntialized = true;
    this._flagsIntialized = true;
    this._engine_load_percentIntialized = true;
    this._engine_speed_rpmIntialized = true;
    this._spark_dwell_time_msIntialized = true;
    this._atmospheric_pressure_kpaIntialized = true;
    this._intake_manifold_pressure_kpaIntialized = true;
    this._intake_manifold_temperatureIntialized = true;
    this._coolant_temperatureIntialized = true;
    this._oil_pressureIntialized = true;
    this._oil_temperatureIntialized = true;
    this._fuel_pressureIntialized = true;
    this._fuel_consumption_rate_cm3pmIntialized = true;
    this._estimated_consumed_fuel_volume_cm3Intialized = true;
    this._throttle_position_percentIntialized = true;
    this._ecu_indexIntialized = true;
    this._spark_plug_usageIntialized = true;
    this._ignition_timing_degIntialized = true;
    this._injection_time_msIntialized = true;
    this._cylinder_head_temperatureIntialized = true;
    this._exhaust_gas_temperatureIntialized = true;
    this._lambda_coefficientIntialized = true;
  }
  copy(other) {
    this._refObject = new InternalCombustionEngineStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._stateIntialized = true;
    this._flagsIntialized = true;
    this._engine_load_percentIntialized = true;
    this._engine_speed_rpmIntialized = true;
    this._spark_dwell_time_msIntialized = true;
    this._atmospheric_pressure_kpaIntialized = true;
    this._intake_manifold_pressure_kpaIntialized = true;
    this._intake_manifold_temperatureIntialized = true;
    this._coolant_temperatureIntialized = true;
    this._oil_pressureIntialized = true;
    this._oil_temperatureIntialized = true;
    this._fuel_pressureIntialized = true;
    this._fuel_consumption_rate_cm3pmIntialized = true;
    this._estimated_consumed_fuel_volume_cm3Intialized = true;
    this._throttle_position_percentIntialized = true;
    this._ecu_indexIntialized = true;
    this._spark_plug_usageIntialized = true;
    this._ignition_timing_degIntialized = true;
    this._injection_time_msIntialized = true;
    this._cylinder_head_temperatureIntialized = true;
    this._exhaust_gas_temperatureIntialized = true;
    this._lambda_coefficientIntialized = true;
  }
  static get classType() {
    return InternalCombustionEngineStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"STATE_STOPPED","value":0},{"type":"uint8","name":"STATE_STARTING","value":1},{"type":"uint8","name":"STATE_RUNNING","value":2},{"type":"uint8","name":"STATE_FAULT","value":3},{"type":"uint32","name":"FLAG_GENERAL_ERROR","value":1},{"type":"uint32","name":"FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED","value":2},{"type":"uint32","name":"FLAG_CRANKSHAFT_SENSOR_ERROR","value":4},{"type":"uint32","name":"FLAG_TEMPERATURE_SUPPORTED","value":8},{"type":"uint32","name":"FLAG_TEMPERATURE_BELOW_NOMINAL","value":16},{"type":"uint32","name":"FLAG_TEMPERATURE_ABOVE_NOMINAL","value":32},{"type":"uint32","name":"FLAG_TEMPERATURE_OVERHEATING","value":64},{"type":"uint32","name":"FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL","value":128},{"type":"uint32","name":"FLAG_FUEL_PRESSURE_SUPPORTED","value":256},{"type":"uint32","name":"FLAG_FUEL_PRESSURE_BELOW_NOMINAL","value":512},{"type":"uint32","name":"FLAG_FUEL_PRESSURE_ABOVE_NOMINAL","value":1024},{"type":"uint32","name":"FLAG_DETONATION_SUPPORTED","value":2048},{"type":"uint32","name":"FLAG_DETONATION_OBSERVED","value":4096},{"type":"uint32","name":"FLAG_MISFIRE_SUPPORTED","value":8192},{"type":"uint32","name":"FLAG_MISFIRE_OBSERVED","value":16384},{"type":"uint32","name":"FLAG_OIL_PRESSURE_SUPPORTED","value":32768},{"type":"uint32","name":"FLAG_OIL_PRESSURE_BELOW_NOMINAL","value":65536},{"type":"uint32","name":"FLAG_OIL_PRESSURE_ABOVE_NOMINAL","value":131072},{"type":"uint32","name":"FLAG_DEBRIS_SUPPORTED","value":262144},{"type":"uint32","name":"FLAG_DEBRIS_DETECTED","value":524288},{"type":"uint8","name":"SPARK_PLUG_SINGLE","value":0},{"type":"uint8","name":"SPARK_PLUG_FIRST_ACTIVE","value":1},{"type":"uint8","name":"SPARK_PLUG_SECOND_ACTIVE","value":2},{"type":"uint8","name":"SPARK_PLUG_BOTH_ACTIVE","value":3}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"flags","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"engine_load_percent","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"engine_speed_rpm","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"spark_dwell_time_ms","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"atmospheric_pressure_kpa","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"intake_manifold_pressure_kpa","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"intake_manifold_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"coolant_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"oil_pressure","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"oil_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fuel_pressure","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fuel_consumption_rate_cm3pm","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"estimated_consumed_fuel_volume_cm3","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"throttle_position_percent","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ecu_index","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"spark_plug_usage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ignition_timing_deg","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"injection_time_ms","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cylinder_head_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"exhaust_gas_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lambda_coefficient","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"InternalCombustionEngineStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"InternalCombustionEngineStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","state","flags","engine_load_percent","engine_speed_rpm","spark_dwell_time_ms","atmospheric_pressure_kpa","intake_manifold_pressure_kpa","intake_manifold_temperature","coolant_temperature","oil_pressure","oil_temperature","fuel_pressure","fuel_consumption_rate_cm3pm","estimated_consumed_fuel_volume_cm3","throttle_position_percent","ecu_index","spark_plug_usage","ignition_timing_deg","injection_time_ms","cylinder_head_temperature","exhaust_gas_temperature","lambda_coefficient"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class InternalCombustionEngineStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof InternalCombustionEngineStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new InternalCombustionEngineStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InternalCombustionEngineStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InternalCombustionEngineStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new InternalCombustionEngineStatusRefArray(size);
    this._refObject = new InternalCombustionEngineStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new InternalCombustionEngineStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof InternalCombustionEngineStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "InternalCombustionEngineStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      InternalCombustionEngineStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return InternalCombustionEngineStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return InternalCombustionEngineStatusArrayWrapper;
  }
}
// Define constants (28 in total)
Object.defineProperty(InternalCombustionEngineStatusWrapper, "STATE_STOPPED", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "STATE_STARTING", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "STATE_RUNNING", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "STATE_FAULT", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_GENERAL_ERROR", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_CRANKSHAFT_SENSOR_ERROR", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_TEMPERATURE_SUPPORTED", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_TEMPERATURE_BELOW_NOMINAL", {value: 16, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_TEMPERATURE_ABOVE_NOMINAL", {value: 32, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_TEMPERATURE_OVERHEATING", {value: 64, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL", {value: 128, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_FUEL_PRESSURE_SUPPORTED", {value: 256, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_FUEL_PRESSURE_BELOW_NOMINAL", {value: 512, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_FUEL_PRESSURE_ABOVE_NOMINAL", {value: 1024, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_DETONATION_SUPPORTED", {value: 2048, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_DETONATION_OBSERVED", {value: 4096, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_MISFIRE_SUPPORTED", {value: 8192, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_MISFIRE_OBSERVED", {value: 16384, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_OIL_PRESSURE_SUPPORTED", {value: 32768, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_OIL_PRESSURE_BELOW_NOMINAL", {value: 65536, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_OIL_PRESSURE_ABOVE_NOMINAL", {value: 131072, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_DEBRIS_SUPPORTED", {value: 262144, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "FLAG_DEBRIS_DETECTED", {value: 524288, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "SPARK_PLUG_SINGLE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "SPARK_PLUG_FIRST_ACTIVE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "SPARK_PLUG_SECOND_ACTIVE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(InternalCombustionEngineStatusWrapper, "SPARK_PLUG_BOTH_ACTIVE", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = InternalCombustionEngineStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "STATE_STOPPED",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "STATE_STARTING",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "STATE_RUNNING",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "STATE_FAULT",
      "value": 3
    },
    {
      "type": "uint32",
      "name": "FLAG_GENERAL_ERROR",
      "value": 1
    },
    {
      "type": "uint32",
      "name": "FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED",
      "value": 2
    },
    {
      "type": "uint32",
      "name": "FLAG_CRANKSHAFT_SENSOR_ERROR",
      "value": 4
    },
    {
      "type": "uint32",
      "name": "FLAG_TEMPERATURE_SUPPORTED",
      "value": 8
    },
    {
      "type": "uint32",
      "name": "FLAG_TEMPERATURE_BELOW_NOMINAL",
      "value": 16
    },
    {
      "type": "uint32",
      "name": "FLAG_TEMPERATURE_ABOVE_NOMINAL",
      "value": 32
    },
    {
      "type": "uint32",
      "name": "FLAG_TEMPERATURE_OVERHEATING",
      "value": 64
    },
    {
      "type": "uint32",
      "name": "FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL",
      "value": 128
    },
    {
      "type": "uint32",
      "name": "FLAG_FUEL_PRESSURE_SUPPORTED",
      "value": 256
    },
    {
      "type": "uint32",
      "name": "FLAG_FUEL_PRESSURE_BELOW_NOMINAL",
      "value": 512
    },
    {
      "type": "uint32",
      "name": "FLAG_FUEL_PRESSURE_ABOVE_NOMINAL",
      "value": 1024
    },
    {
      "type": "uint32",
      "name": "FLAG_DETONATION_SUPPORTED",
      "value": 2048
    },
    {
      "type": "uint32",
      "name": "FLAG_DETONATION_OBSERVED",
      "value": 4096
    },
    {
      "type": "uint32",
      "name": "FLAG_MISFIRE_SUPPORTED",
      "value": 8192
    },
    {
      "type": "uint32",
      "name": "FLAG_MISFIRE_OBSERVED",
      "value": 16384
    },
    {
      "type": "uint32",
      "name": "FLAG_OIL_PRESSURE_SUPPORTED",
      "value": 32768
    },
    {
      "type": "uint32",
      "name": "FLAG_OIL_PRESSURE_BELOW_NOMINAL",
      "value": 65536
    },
    {
      "type": "uint32",
      "name": "FLAG_OIL_PRESSURE_ABOVE_NOMINAL",
      "value": 131072
    },
    {
      "type": "uint32",
      "name": "FLAG_DEBRIS_SUPPORTED",
      "value": 262144
    },
    {
      "type": "uint32",
      "name": "FLAG_DEBRIS_DETECTED",
      "value": 524288
    },
    {
      "type": "uint8",
      "name": "SPARK_PLUG_SINGLE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SPARK_PLUG_FIRST_ACTIVE",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SPARK_PLUG_SECOND_ACTIVE",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "SPARK_PLUG_BOTH_ACTIVE",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "flags",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "engine_load_percent",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "engine_speed_rpm",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "spark_dwell_time_ms",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "atmospheric_pressure_kpa",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "intake_manifold_pressure_kpa",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "intake_manifold_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "coolant_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "oil_pressure",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "oil_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fuel_pressure",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fuel_consumption_rate_cm3pm",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "estimated_consumed_fuel_volume_cm3",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "throttle_position_percent",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ecu_index",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "spark_plug_usage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ignition_timing_deg",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "injection_time_ms",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cylinder_head_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "exhaust_gas_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lambda_coefficient",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "InternalCombustionEngineStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "InternalCombustionEngineStatus"
}
*/
