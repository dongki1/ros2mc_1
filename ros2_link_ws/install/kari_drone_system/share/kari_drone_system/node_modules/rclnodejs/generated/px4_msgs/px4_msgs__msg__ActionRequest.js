// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ActionRequestRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  action: primitiveTypes.uint8,
  source: primitiveTypes.uint8,
  mode: primitiveTypes.uint8,
});
const ActionRequestRefArray = ArrayType(ActionRequestRefStruct);
const ActionRequestRefStructArray = StructType({
  data: ActionRequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ActionRequestWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ActionRequestRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._actionIntialized = true;
      this._sourceIntialized = true;
      this._modeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ActionRequestRefStruct();
    this._timestampIntialized = false;
    this._actionIntialized = false;
    this._sourceIntialized = false;
    this._modeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ActionRequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ActionRequestArrayWrapper;
  }
  static get ArrayType() {
    return ActionRequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return ActionRequestRefStructArray
  }
  static get refObjectType() {
    return ActionRequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in ActionRequest');
      }
      if (checkConsistency && !this._actionIntialized) {
        throw new TypeError('Invalid argument: action in ActionRequest');
      }
      if (checkConsistency && !this._sourceIntialized) {
        throw new TypeError('Invalid argument: source in ActionRequest');
      }
      if (checkConsistency && !this._modeIntialized) {
        throw new TypeError('Invalid argument: mode in ActionRequest');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._actionIntialized = true;
    this._refObject.action = refObject.action;
    this._sourceIntialized = true;
    this._refObject.source = refObject.source;
    this._modeIntialized = true;
    this._refObject.mode = refObject.mode;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ActionRequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'ActionRequest'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get action() {
    if (!this._actionIntialized) {
      return undefined;
    }
    return this._refObject.action;
  }
  set action(value) {
    this._actionIntialized = true;
    this._refObject.action = value;
  }
  get source() {
    if (!this._sourceIntialized) {
      return undefined;
    }
    return this._refObject.source;
  }
  set source(value) {
    this._sourceIntialized = true;
    this._refObject.source = value;
  }
  get mode() {
    if (!this._modeIntialized) {
      return undefined;
    }
    return this._refObject.mode;
  }
  set mode(value) {
    this._modeIntialized = true;
    this._refObject.mode = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ActionRequestRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._actionIntialized = true;
    this._sourceIntialized = true;
    this._modeIntialized = true;
  }
  copy(other) {
    this._refObject = new ActionRequestRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._actionIntialized = true;
    this._sourceIntialized = true;
    this._modeIntialized = true;
  }
  static get classType() {
    return ActionRequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"ACTION_DISARM","value":0},{"type":"uint8","name":"ACTION_ARM","value":1},{"type":"uint8","name":"ACTION_TOGGLE_ARMING","value":2},{"type":"uint8","name":"ACTION_UNKILL","value":3},{"type":"uint8","name":"ACTION_KILL","value":4},{"type":"uint8","name":"ACTION_SWITCH_MODE","value":5},{"type":"uint8","name":"ACTION_VTOL_TRANSITION_TO_MULTICOPTER","value":6},{"type":"uint8","name":"ACTION_VTOL_TRANSITION_TO_FIXEDWING","value":7},{"type":"uint8","name":"SOURCE_RC_STICK_GESTURE","value":0},{"type":"uint8","name":"SOURCE_RC_SWITCH","value":1},{"type":"uint8","name":"SOURCE_RC_BUTTON","value":2},{"type":"uint8","name":"SOURCE_RC_MODE_SLOT","value":3}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"action","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"source","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"ActionRequest","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ActionRequest"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","action","source","mode"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ActionRequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ActionRequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ActionRequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ActionRequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ActionRequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ActionRequestRefArray(size);
    this._refObject = new ActionRequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ActionRequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ActionRequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ActionRequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ActionRequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ActionRequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ActionRequestArrayWrapper;
  }
}
// Define constants (12 in total)
Object.defineProperty(ActionRequestWrapper, "ACTION_DISARM", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_ARM", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_TOGGLE_ARMING", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_UNKILL", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_KILL", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_SWITCH_MODE", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_VTOL_TRANSITION_TO_MULTICOPTER", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "ACTION_VTOL_TRANSITION_TO_FIXEDWING", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "SOURCE_RC_STICK_GESTURE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "SOURCE_RC_SWITCH", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "SOURCE_RC_BUTTON", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ActionRequestWrapper, "SOURCE_RC_MODE_SLOT", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = ActionRequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "ACTION_DISARM",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "ACTION_ARM",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "ACTION_TOGGLE_ARMING",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "ACTION_UNKILL",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "ACTION_KILL",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "ACTION_SWITCH_MODE",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "ACTION_VTOL_TRANSITION_TO_MULTICOPTER",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "ACTION_VTOL_TRANSITION_TO_FIXEDWING",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "SOURCE_RC_STICK_GESTURE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SOURCE_RC_SWITCH",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SOURCE_RC_BUTTON",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "SOURCE_RC_MODE_SLOT",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "action",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "source",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "ActionRequest",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ActionRequest"
}
*/
