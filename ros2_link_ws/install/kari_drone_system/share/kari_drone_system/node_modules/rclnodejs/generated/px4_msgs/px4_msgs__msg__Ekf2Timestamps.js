// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Ekf2TimestampsRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  airspeed_timestamp_rel: primitiveTypes.int16,
  distance_sensor_timestamp_rel: primitiveTypes.int16,
  optical_flow_timestamp_rel: primitiveTypes.int16,
  vehicle_air_data_timestamp_rel: primitiveTypes.int16,
  vehicle_magnetometer_timestamp_rel: primitiveTypes.int16,
  visual_odometry_timestamp_rel: primitiveTypes.int16,
});
const Ekf2TimestampsRefArray = ArrayType(Ekf2TimestampsRefStruct);
const Ekf2TimestampsRefStructArray = StructType({
  data: Ekf2TimestampsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class Ekf2TimestampsWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new Ekf2TimestampsRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._airspeed_timestamp_relIntialized = true;
      this._distance_sensor_timestamp_relIntialized = true;
      this._optical_flow_timestamp_relIntialized = true;
      this._vehicle_air_data_timestamp_relIntialized = true;
      this._vehicle_magnetometer_timestamp_relIntialized = true;
      this._visual_odometry_timestamp_relIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new Ekf2TimestampsRefStruct();
    this._timestampIntialized = false;
    this._airspeed_timestamp_relIntialized = false;
    this._distance_sensor_timestamp_relIntialized = false;
    this._optical_flow_timestamp_relIntialized = false;
    this._vehicle_air_data_timestamp_relIntialized = false;
    this._vehicle_magnetometer_timestamp_relIntialized = false;
    this._visual_odometry_timestamp_relIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new Ekf2TimestampsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new Ekf2TimestampsArrayWrapper;
  }
  static get ArrayType() {
    return Ekf2TimestampsArrayWrapper;
  }
  static get refObjectArrayType() {
    return Ekf2TimestampsRefStructArray
  }
  static get refObjectType() {
    return Ekf2TimestampsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in Ekf2Timestamps');
      }
      if (checkConsistency && !this._airspeed_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: airspeed_timestamp_rel in Ekf2Timestamps');
      }
      if (checkConsistency && !this._distance_sensor_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: distance_sensor_timestamp_rel in Ekf2Timestamps');
      }
      if (checkConsistency && !this._optical_flow_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: optical_flow_timestamp_rel in Ekf2Timestamps');
      }
      if (checkConsistency && !this._vehicle_air_data_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: vehicle_air_data_timestamp_rel in Ekf2Timestamps');
      }
      if (checkConsistency && !this._vehicle_magnetometer_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: vehicle_magnetometer_timestamp_rel in Ekf2Timestamps');
      }
      if (checkConsistency && !this._visual_odometry_timestamp_relIntialized) {
        throw new TypeError('Invalid argument: visual_odometry_timestamp_rel in Ekf2Timestamps');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._airspeed_timestamp_relIntialized = true;
    this._refObject.airspeed_timestamp_rel = refObject.airspeed_timestamp_rel;
    this._distance_sensor_timestamp_relIntialized = true;
    this._refObject.distance_sensor_timestamp_rel = refObject.distance_sensor_timestamp_rel;
    this._optical_flow_timestamp_relIntialized = true;
    this._refObject.optical_flow_timestamp_rel = refObject.optical_flow_timestamp_rel;
    this._vehicle_air_data_timestamp_relIntialized = true;
    this._refObject.vehicle_air_data_timestamp_rel = refObject.vehicle_air_data_timestamp_rel;
    this._vehicle_magnetometer_timestamp_relIntialized = true;
    this._refObject.vehicle_magnetometer_timestamp_rel = refObject.vehicle_magnetometer_timestamp_rel;
    this._visual_odometry_timestamp_relIntialized = true;
    this._refObject.visual_odometry_timestamp_rel = refObject.visual_odometry_timestamp_rel;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    Ekf2TimestampsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'Ekf2Timestamps'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get airspeed_timestamp_rel() {
    if (!this._airspeed_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.airspeed_timestamp_rel;
  }
  set airspeed_timestamp_rel(value) {
    this._airspeed_timestamp_relIntialized = true;
    this._refObject.airspeed_timestamp_rel = value;
  }
  get distance_sensor_timestamp_rel() {
    if (!this._distance_sensor_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.distance_sensor_timestamp_rel;
  }
  set distance_sensor_timestamp_rel(value) {
    this._distance_sensor_timestamp_relIntialized = true;
    this._refObject.distance_sensor_timestamp_rel = value;
  }
  get optical_flow_timestamp_rel() {
    if (!this._optical_flow_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.optical_flow_timestamp_rel;
  }
  set optical_flow_timestamp_rel(value) {
    this._optical_flow_timestamp_relIntialized = true;
    this._refObject.optical_flow_timestamp_rel = value;
  }
  get vehicle_air_data_timestamp_rel() {
    if (!this._vehicle_air_data_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.vehicle_air_data_timestamp_rel;
  }
  set vehicle_air_data_timestamp_rel(value) {
    this._vehicle_air_data_timestamp_relIntialized = true;
    this._refObject.vehicle_air_data_timestamp_rel = value;
  }
  get vehicle_magnetometer_timestamp_rel() {
    if (!this._vehicle_magnetometer_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.vehicle_magnetometer_timestamp_rel;
  }
  set vehicle_magnetometer_timestamp_rel(value) {
    this._vehicle_magnetometer_timestamp_relIntialized = true;
    this._refObject.vehicle_magnetometer_timestamp_rel = value;
  }
  get visual_odometry_timestamp_rel() {
    if (!this._visual_odometry_timestamp_relIntialized) {
      return undefined;
    }
    return this._refObject.visual_odometry_timestamp_rel;
  }
  set visual_odometry_timestamp_rel(value) {
    this._visual_odometry_timestamp_relIntialized = true;
    this._refObject.visual_odometry_timestamp_rel = value;
  }
  copyRefObject(refObject) {
    this._refObject = new Ekf2TimestampsRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._airspeed_timestamp_relIntialized = true;
    this._distance_sensor_timestamp_relIntialized = true;
    this._optical_flow_timestamp_relIntialized = true;
    this._vehicle_air_data_timestamp_relIntialized = true;
    this._vehicle_magnetometer_timestamp_relIntialized = true;
    this._visual_odometry_timestamp_relIntialized = true;
  }
  copy(other) {
    this._refObject = new Ekf2TimestampsRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._airspeed_timestamp_relIntialized = true;
    this._distance_sensor_timestamp_relIntialized = true;
    this._optical_flow_timestamp_relIntialized = true;
    this._vehicle_air_data_timestamp_relIntialized = true;
    this._vehicle_magnetometer_timestamp_relIntialized = true;
    this._visual_odometry_timestamp_relIntialized = true;
  }
  static get classType() {
    return Ekf2TimestampsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int16","name":"RELATIVE_TIMESTAMP_INVALID","value":32767}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"airspeed_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"distance_sensor_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"optical_flow_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vehicle_air_data_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vehicle_magnetometer_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"visual_odometry_timestamp_rel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"Ekf2Timestamps","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Ekf2Timestamps"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","airspeed_timestamp_rel","distance_sensor_timestamp_rel","optical_flow_timestamp_rel","vehicle_air_data_timestamp_rel","vehicle_magnetometer_timestamp_rel","visual_odometry_timestamp_rel"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class Ekf2TimestampsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof Ekf2TimestampsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new Ekf2TimestampsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Ekf2TimestampsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to Ekf2TimestampsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new Ekf2TimestampsRefArray(size);
    this._refObject = new Ekf2TimestampsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new Ekf2TimestampsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof Ekf2TimestampsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "Ekf2TimestampsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      Ekf2TimestampsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return Ekf2TimestampsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return Ekf2TimestampsArrayWrapper;
  }
}
// Define constants (1 in total)
Object.defineProperty(Ekf2TimestampsWrapper, "RELATIVE_TIMESTAMP_INVALID", {value: 32767, writable: false, enumerable: true, configurable: true});
module.exports = Ekf2TimestampsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int16",
      "name": "RELATIVE_TIMESTAMP_INVALID",
      "value": 32767
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "airspeed_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "distance_sensor_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "optical_flow_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vehicle_air_data_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vehicle_magnetometer_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "visual_odometry_timestamp_rel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "Ekf2Timestamps",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Ekf2Timestamps"
}
*/
