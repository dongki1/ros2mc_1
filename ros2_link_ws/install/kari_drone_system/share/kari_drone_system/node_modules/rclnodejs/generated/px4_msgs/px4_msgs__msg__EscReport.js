// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const EscReportRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  esc_errorcount: primitiveTypes.uint32,
  esc_rpm: primitiveTypes.int32,
  esc_voltage: primitiveTypes.float32,
  esc_current: primitiveTypes.float32,
  esc_temperature: primitiveTypes.float32,
  esc_address: primitiveTypes.uint8,
  esc_cmdcount: primitiveTypes.uint8,
  esc_state: primitiveTypes.uint8,
  actuator_function: primitiveTypes.uint8,
  failures: primitiveTypes.uint16,
  esc_power: primitiveTypes.int8,
});
const EscReportRefArray = ArrayType(EscReportRefStruct);
const EscReportRefStructArray = StructType({
  data: EscReportRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class EscReportWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new EscReportRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._esc_errorcountIntialized = true;
      this._esc_rpmIntialized = true;
      this._esc_voltageIntialized = true;
      this._esc_currentIntialized = true;
      this._esc_temperatureIntialized = true;
      this._esc_addressIntialized = true;
      this._esc_cmdcountIntialized = true;
      this._esc_stateIntialized = true;
      this._actuator_functionIntialized = true;
      this._failuresIntialized = true;
      this._esc_powerIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new EscReportRefStruct();
    this._timestampIntialized = false;
    this._esc_errorcountIntialized = false;
    this._esc_rpmIntialized = false;
    this._esc_voltageIntialized = false;
    this._esc_currentIntialized = false;
    this._esc_temperatureIntialized = false;
    this._esc_addressIntialized = false;
    this._esc_cmdcountIntialized = false;
    this._esc_stateIntialized = false;
    this._actuator_functionIntialized = false;
    this._failuresIntialized = false;
    this._esc_powerIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new EscReportWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new EscReportArrayWrapper;
  }
  static get ArrayType() {
    return EscReportArrayWrapper;
  }
  static get refObjectArrayType() {
    return EscReportRefStructArray
  }
  static get refObjectType() {
    return EscReportRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in EscReport');
      }
      if (checkConsistency && !this._esc_errorcountIntialized) {
        throw new TypeError('Invalid argument: esc_errorcount in EscReport');
      }
      if (checkConsistency && !this._esc_rpmIntialized) {
        throw new TypeError('Invalid argument: esc_rpm in EscReport');
      }
      if (checkConsistency && !this._esc_voltageIntialized) {
        throw new TypeError('Invalid argument: esc_voltage in EscReport');
      }
      if (checkConsistency && !this._esc_currentIntialized) {
        throw new TypeError('Invalid argument: esc_current in EscReport');
      }
      if (checkConsistency && !this._esc_temperatureIntialized) {
        throw new TypeError('Invalid argument: esc_temperature in EscReport');
      }
      if (checkConsistency && !this._esc_addressIntialized) {
        throw new TypeError('Invalid argument: esc_address in EscReport');
      }
      if (checkConsistency && !this._esc_cmdcountIntialized) {
        throw new TypeError('Invalid argument: esc_cmdcount in EscReport');
      }
      if (checkConsistency && !this._esc_stateIntialized) {
        throw new TypeError('Invalid argument: esc_state in EscReport');
      }
      if (checkConsistency && !this._actuator_functionIntialized) {
        throw new TypeError('Invalid argument: actuator_function in EscReport');
      }
      if (checkConsistency && !this._failuresIntialized) {
        throw new TypeError('Invalid argument: failures in EscReport');
      }
      if (checkConsistency && !this._esc_powerIntialized) {
        throw new TypeError('Invalid argument: esc_power in EscReport');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._esc_errorcountIntialized = true;
    this._refObject.esc_errorcount = refObject.esc_errorcount;
    this._esc_rpmIntialized = true;
    this._refObject.esc_rpm = refObject.esc_rpm;
    this._esc_voltageIntialized = true;
    this._refObject.esc_voltage = refObject.esc_voltage;
    this._esc_currentIntialized = true;
    this._refObject.esc_current = refObject.esc_current;
    this._esc_temperatureIntialized = true;
    this._refObject.esc_temperature = refObject.esc_temperature;
    this._esc_addressIntialized = true;
    this._refObject.esc_address = refObject.esc_address;
    this._esc_cmdcountIntialized = true;
    this._refObject.esc_cmdcount = refObject.esc_cmdcount;
    this._esc_stateIntialized = true;
    this._refObject.esc_state = refObject.esc_state;
    this._actuator_functionIntialized = true;
    this._refObject.actuator_function = refObject.actuator_function;
    this._failuresIntialized = true;
    this._refObject.failures = refObject.failures;
    this._esc_powerIntialized = true;
    this._refObject.esc_power = refObject.esc_power;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    EscReportWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'EscReport'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get esc_errorcount() {
    if (!this._esc_errorcountIntialized) {
      return undefined;
    }
    return this._refObject.esc_errorcount;
  }
  set esc_errorcount(value) {
    this._esc_errorcountIntialized = true;
    this._refObject.esc_errorcount = value;
  }
  get esc_rpm() {
    if (!this._esc_rpmIntialized) {
      return undefined;
    }
    return this._refObject.esc_rpm;
  }
  set esc_rpm(value) {
    this._esc_rpmIntialized = true;
    this._refObject.esc_rpm = value;
  }
  get esc_voltage() {
    if (!this._esc_voltageIntialized) {
      return undefined;
    }
    return this._refObject.esc_voltage;
  }
  set esc_voltage(value) {
    this._esc_voltageIntialized = true;
    this._refObject.esc_voltage = value;
  }
  get esc_current() {
    if (!this._esc_currentIntialized) {
      return undefined;
    }
    return this._refObject.esc_current;
  }
  set esc_current(value) {
    this._esc_currentIntialized = true;
    this._refObject.esc_current = value;
  }
  get esc_temperature() {
    if (!this._esc_temperatureIntialized) {
      return undefined;
    }
    return this._refObject.esc_temperature;
  }
  set esc_temperature(value) {
    this._esc_temperatureIntialized = true;
    this._refObject.esc_temperature = value;
  }
  get esc_address() {
    if (!this._esc_addressIntialized) {
      return undefined;
    }
    return this._refObject.esc_address;
  }
  set esc_address(value) {
    this._esc_addressIntialized = true;
    this._refObject.esc_address = value;
  }
  get esc_cmdcount() {
    if (!this._esc_cmdcountIntialized) {
      return undefined;
    }
    return this._refObject.esc_cmdcount;
  }
  set esc_cmdcount(value) {
    this._esc_cmdcountIntialized = true;
    this._refObject.esc_cmdcount = value;
  }
  get esc_state() {
    if (!this._esc_stateIntialized) {
      return undefined;
    }
    return this._refObject.esc_state;
  }
  set esc_state(value) {
    this._esc_stateIntialized = true;
    this._refObject.esc_state = value;
  }
  get actuator_function() {
    if (!this._actuator_functionIntialized) {
      return undefined;
    }
    return this._refObject.actuator_function;
  }
  set actuator_function(value) {
    this._actuator_functionIntialized = true;
    this._refObject.actuator_function = value;
  }
  get failures() {
    if (!this._failuresIntialized) {
      return undefined;
    }
    return this._refObject.failures;
  }
  set failures(value) {
    this._failuresIntialized = true;
    this._refObject.failures = value;
  }
  get esc_power() {
    if (!this._esc_powerIntialized) {
      return undefined;
    }
    return this._refObject.esc_power;
  }
  set esc_power(value) {
    this._esc_powerIntialized = true;
    this._refObject.esc_power = value;
  }
  copyRefObject(refObject) {
    this._refObject = new EscReportRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._esc_errorcountIntialized = true;
    this._esc_rpmIntialized = true;
    this._esc_voltageIntialized = true;
    this._esc_currentIntialized = true;
    this._esc_temperatureIntialized = true;
    this._esc_addressIntialized = true;
    this._esc_cmdcountIntialized = true;
    this._esc_stateIntialized = true;
    this._actuator_functionIntialized = true;
    this._failuresIntialized = true;
    this._esc_powerIntialized = true;
  }
  copy(other) {
    this._refObject = new EscReportRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._esc_errorcountIntialized = true;
    this._esc_rpmIntialized = true;
    this._esc_voltageIntialized = true;
    this._esc_currentIntialized = true;
    this._esc_temperatureIntialized = true;
    this._esc_addressIntialized = true;
    this._esc_cmdcountIntialized = true;
    this._esc_stateIntialized = true;
    this._actuator_functionIntialized = true;
    this._failuresIntialized = true;
    this._esc_powerIntialized = true;
  }
  static get classType() {
    return EscReportWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"FAILURE_OVER_CURRENT","value":0},{"type":"uint8","name":"FAILURE_OVER_VOLTAGE","value":1},{"type":"uint8","name":"FAILURE_MOTOR_OVER_TEMPERATURE","value":2},{"type":"uint8","name":"FAILURE_OVER_RPM","value":3},{"type":"uint8","name":"FAILURE_INCONSISTENT_CMD","value":4},{"type":"uint8","name":"FAILURE_MOTOR_STUCK","value":5},{"type":"uint8","name":"FAILURE_GENERIC","value":6},{"type":"uint8","name":"FAILURE_MOTOR_WARN_TEMPERATURE","value":7},{"type":"uint8","name":"FAILURE_WARN_ESC_TEMPERATURE","value":8},{"type":"uint8","name":"FAILURE_OVER_ESC_TEMPERATURE","value":9},{"type":"uint8","name":"ESC_FAILURE_COUNT","value":10}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_errorcount","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_rpm","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_voltage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_temperature","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_address","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_cmdcount","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"actuator_function","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"failures","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"esc_power","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"EscReport","stringUpperBound":null,"isPrimitiveType":false},"msgName":"EscReport"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","esc_errorcount","esc_rpm","esc_voltage","esc_current","esc_temperature","esc_address","esc_cmdcount","esc_state","actuator_function","failures","esc_power"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class EscReportArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof EscReportWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new EscReportWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EscReportArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EscReportArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new EscReportRefArray(size);
    this._refObject = new EscReportRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new EscReportWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof EscReportArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "EscReportArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      EscReportWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return EscReportWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return EscReportArrayWrapper;
  }
}
// Define constants (11 in total)
Object.defineProperty(EscReportWrapper, "FAILURE_OVER_CURRENT", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_OVER_VOLTAGE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_MOTOR_OVER_TEMPERATURE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_OVER_RPM", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_INCONSISTENT_CMD", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_MOTOR_STUCK", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_GENERIC", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_MOTOR_WARN_TEMPERATURE", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_WARN_ESC_TEMPERATURE", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "FAILURE_OVER_ESC_TEMPERATURE", {value: 9, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EscReportWrapper, "ESC_FAILURE_COUNT", {value: 10, writable: false, enumerable: true, configurable: true});
module.exports = EscReportWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "FAILURE_OVER_CURRENT",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "FAILURE_OVER_VOLTAGE",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "FAILURE_MOTOR_OVER_TEMPERATURE",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "FAILURE_OVER_RPM",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "FAILURE_INCONSISTENT_CMD",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "FAILURE_MOTOR_STUCK",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "FAILURE_GENERIC",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "FAILURE_MOTOR_WARN_TEMPERATURE",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "FAILURE_WARN_ESC_TEMPERATURE",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "FAILURE_OVER_ESC_TEMPERATURE",
      "value": 9
    },
    {
      "type": "uint8",
      "name": "ESC_FAILURE_COUNT",
      "value": 10
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_errorcount",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_rpm",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_voltage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_temperature",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_address",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_cmdcount",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "actuator_function",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "failures",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "esc_power",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "EscReport",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "EscReport"
}
*/
