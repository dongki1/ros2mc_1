// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const NpfgStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  wind_est_valid: primitiveTypes.uint8,
  lat_accel: primitiveTypes.float32,
  lat_accel_ff: primitiveTypes.float32,
  bearing_feas: primitiveTypes.float32,
  bearing_feas_on_track: primitiveTypes.float32,
  signed_track_error: primitiveTypes.float32,
  track_error_bound: primitiveTypes.float32,
  airspeed_ref: primitiveTypes.float32,
  bearing: primitiveTypes.float32,
  heading_ref: primitiveTypes.float32,
  min_ground_speed_ref: primitiveTypes.float32,
  adapted_period: primitiveTypes.float32,
  p_gain: primitiveTypes.float32,
  time_const: primitiveTypes.float32,
});
const NpfgStatusRefArray = ArrayType(NpfgStatusRefStruct);
const NpfgStatusRefStructArray = StructType({
  data: NpfgStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class NpfgStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new NpfgStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._wind_est_validIntialized = true;
      this._lat_accelIntialized = true;
      this._lat_accel_ffIntialized = true;
      this._bearing_feasIntialized = true;
      this._bearing_feas_on_trackIntialized = true;
      this._signed_track_errorIntialized = true;
      this._track_error_boundIntialized = true;
      this._airspeed_refIntialized = true;
      this._bearingIntialized = true;
      this._heading_refIntialized = true;
      this._min_ground_speed_refIntialized = true;
      this._adapted_periodIntialized = true;
      this._p_gainIntialized = true;
      this._time_constIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new NpfgStatusRefStruct();
    this._timestampIntialized = false;
    this._wind_est_validIntialized = false;
    this._lat_accelIntialized = false;
    this._lat_accel_ffIntialized = false;
    this._bearing_feasIntialized = false;
    this._bearing_feas_on_trackIntialized = false;
    this._signed_track_errorIntialized = false;
    this._track_error_boundIntialized = false;
    this._airspeed_refIntialized = false;
    this._bearingIntialized = false;
    this._heading_refIntialized = false;
    this._min_ground_speed_refIntialized = false;
    this._adapted_periodIntialized = false;
    this._p_gainIntialized = false;
    this._time_constIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new NpfgStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new NpfgStatusArrayWrapper;
  }
  static get ArrayType() {
    return NpfgStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return NpfgStatusRefStructArray
  }
  static get refObjectType() {
    return NpfgStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in NpfgStatus');
      }
      if (checkConsistency && !this._wind_est_validIntialized) {
        throw new TypeError('Invalid argument: wind_est_valid in NpfgStatus');
      }
      if (checkConsistency && !this._lat_accelIntialized) {
        throw new TypeError('Invalid argument: lat_accel in NpfgStatus');
      }
      if (checkConsistency && !this._lat_accel_ffIntialized) {
        throw new TypeError('Invalid argument: lat_accel_ff in NpfgStatus');
      }
      if (checkConsistency && !this._bearing_feasIntialized) {
        throw new TypeError('Invalid argument: bearing_feas in NpfgStatus');
      }
      if (checkConsistency && !this._bearing_feas_on_trackIntialized) {
        throw new TypeError('Invalid argument: bearing_feas_on_track in NpfgStatus');
      }
      if (checkConsistency && !this._signed_track_errorIntialized) {
        throw new TypeError('Invalid argument: signed_track_error in NpfgStatus');
      }
      if (checkConsistency && !this._track_error_boundIntialized) {
        throw new TypeError('Invalid argument: track_error_bound in NpfgStatus');
      }
      if (checkConsistency && !this._airspeed_refIntialized) {
        throw new TypeError('Invalid argument: airspeed_ref in NpfgStatus');
      }
      if (checkConsistency && !this._bearingIntialized) {
        throw new TypeError('Invalid argument: bearing in NpfgStatus');
      }
      if (checkConsistency && !this._heading_refIntialized) {
        throw new TypeError('Invalid argument: heading_ref in NpfgStatus');
      }
      if (checkConsistency && !this._min_ground_speed_refIntialized) {
        throw new TypeError('Invalid argument: min_ground_speed_ref in NpfgStatus');
      }
      if (checkConsistency && !this._adapted_periodIntialized) {
        throw new TypeError('Invalid argument: adapted_period in NpfgStatus');
      }
      if (checkConsistency && !this._p_gainIntialized) {
        throw new TypeError('Invalid argument: p_gain in NpfgStatus');
      }
      if (checkConsistency && !this._time_constIntialized) {
        throw new TypeError('Invalid argument: time_const in NpfgStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._wind_est_validIntialized = true;
    this._refObject.wind_est_valid = refObject.wind_est_valid;
    this._lat_accelIntialized = true;
    this._refObject.lat_accel = refObject.lat_accel;
    this._lat_accel_ffIntialized = true;
    this._refObject.lat_accel_ff = refObject.lat_accel_ff;
    this._bearing_feasIntialized = true;
    this._refObject.bearing_feas = refObject.bearing_feas;
    this._bearing_feas_on_trackIntialized = true;
    this._refObject.bearing_feas_on_track = refObject.bearing_feas_on_track;
    this._signed_track_errorIntialized = true;
    this._refObject.signed_track_error = refObject.signed_track_error;
    this._track_error_boundIntialized = true;
    this._refObject.track_error_bound = refObject.track_error_bound;
    this._airspeed_refIntialized = true;
    this._refObject.airspeed_ref = refObject.airspeed_ref;
    this._bearingIntialized = true;
    this._refObject.bearing = refObject.bearing;
    this._heading_refIntialized = true;
    this._refObject.heading_ref = refObject.heading_ref;
    this._min_ground_speed_refIntialized = true;
    this._refObject.min_ground_speed_ref = refObject.min_ground_speed_ref;
    this._adapted_periodIntialized = true;
    this._refObject.adapted_period = refObject.adapted_period;
    this._p_gainIntialized = true;
    this._refObject.p_gain = refObject.p_gain;
    this._time_constIntialized = true;
    this._refObject.time_const = refObject.time_const;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    NpfgStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'NpfgStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get wind_est_valid() {
    if (!this._wind_est_validIntialized) {
      return undefined;
    }
    return this._refObject.wind_est_valid;
  }
  set wind_est_valid(value) {
    this._wind_est_validIntialized = true;
    this._refObject.wind_est_valid = value;
  }
  get lat_accel() {
    if (!this._lat_accelIntialized) {
      return undefined;
    }
    return this._refObject.lat_accel;
  }
  set lat_accel(value) {
    this._lat_accelIntialized = true;
    this._refObject.lat_accel = value;
  }
  get lat_accel_ff() {
    if (!this._lat_accel_ffIntialized) {
      return undefined;
    }
    return this._refObject.lat_accel_ff;
  }
  set lat_accel_ff(value) {
    this._lat_accel_ffIntialized = true;
    this._refObject.lat_accel_ff = value;
  }
  get bearing_feas() {
    if (!this._bearing_feasIntialized) {
      return undefined;
    }
    return this._refObject.bearing_feas;
  }
  set bearing_feas(value) {
    this._bearing_feasIntialized = true;
    this._refObject.bearing_feas = value;
  }
  get bearing_feas_on_track() {
    if (!this._bearing_feas_on_trackIntialized) {
      return undefined;
    }
    return this._refObject.bearing_feas_on_track;
  }
  set bearing_feas_on_track(value) {
    this._bearing_feas_on_trackIntialized = true;
    this._refObject.bearing_feas_on_track = value;
  }
  get signed_track_error() {
    if (!this._signed_track_errorIntialized) {
      return undefined;
    }
    return this._refObject.signed_track_error;
  }
  set signed_track_error(value) {
    this._signed_track_errorIntialized = true;
    this._refObject.signed_track_error = value;
  }
  get track_error_bound() {
    if (!this._track_error_boundIntialized) {
      return undefined;
    }
    return this._refObject.track_error_bound;
  }
  set track_error_bound(value) {
    this._track_error_boundIntialized = true;
    this._refObject.track_error_bound = value;
  }
  get airspeed_ref() {
    if (!this._airspeed_refIntialized) {
      return undefined;
    }
    return this._refObject.airspeed_ref;
  }
  set airspeed_ref(value) {
    this._airspeed_refIntialized = true;
    this._refObject.airspeed_ref = value;
  }
  get bearing() {
    if (!this._bearingIntialized) {
      return undefined;
    }
    return this._refObject.bearing;
  }
  set bearing(value) {
    this._bearingIntialized = true;
    this._refObject.bearing = value;
  }
  get heading_ref() {
    if (!this._heading_refIntialized) {
      return undefined;
    }
    return this._refObject.heading_ref;
  }
  set heading_ref(value) {
    this._heading_refIntialized = true;
    this._refObject.heading_ref = value;
  }
  get min_ground_speed_ref() {
    if (!this._min_ground_speed_refIntialized) {
      return undefined;
    }
    return this._refObject.min_ground_speed_ref;
  }
  set min_ground_speed_ref(value) {
    this._min_ground_speed_refIntialized = true;
    this._refObject.min_ground_speed_ref = value;
  }
  get adapted_period() {
    if (!this._adapted_periodIntialized) {
      return undefined;
    }
    return this._refObject.adapted_period;
  }
  set adapted_period(value) {
    this._adapted_periodIntialized = true;
    this._refObject.adapted_period = value;
  }
  get p_gain() {
    if (!this._p_gainIntialized) {
      return undefined;
    }
    return this._refObject.p_gain;
  }
  set p_gain(value) {
    this._p_gainIntialized = true;
    this._refObject.p_gain = value;
  }
  get time_const() {
    if (!this._time_constIntialized) {
      return undefined;
    }
    return this._refObject.time_const;
  }
  set time_const(value) {
    this._time_constIntialized = true;
    this._refObject.time_const = value;
  }
  copyRefObject(refObject) {
    this._refObject = new NpfgStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._wind_est_validIntialized = true;
    this._lat_accelIntialized = true;
    this._lat_accel_ffIntialized = true;
    this._bearing_feasIntialized = true;
    this._bearing_feas_on_trackIntialized = true;
    this._signed_track_errorIntialized = true;
    this._track_error_boundIntialized = true;
    this._airspeed_refIntialized = true;
    this._bearingIntialized = true;
    this._heading_refIntialized = true;
    this._min_ground_speed_refIntialized = true;
    this._adapted_periodIntialized = true;
    this._p_gainIntialized = true;
    this._time_constIntialized = true;
  }
  copy(other) {
    this._refObject = new NpfgStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._wind_est_validIntialized = true;
    this._lat_accelIntialized = true;
    this._lat_accel_ffIntialized = true;
    this._bearing_feasIntialized = true;
    this._bearing_feas_on_trackIntialized = true;
    this._signed_track_errorIntialized = true;
    this._track_error_boundIntialized = true;
    this._airspeed_refIntialized = true;
    this._bearingIntialized = true;
    this._heading_refIntialized = true;
    this._min_ground_speed_refIntialized = true;
    this._adapted_periodIntialized = true;
    this._p_gainIntialized = true;
    this._time_constIntialized = true;
  }
  static get classType() {
    return NpfgStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"wind_est_valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat_accel","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat_accel_ff","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bearing_feas","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bearing_feas_on_track","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"signed_track_error","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"track_error_bound","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"airspeed_ref","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bearing","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heading_ref","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"min_ground_speed_ref","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"adapted_period","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"p_gain","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"time_const","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"NpfgStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"NpfgStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","wind_est_valid","lat_accel","lat_accel_ff","bearing_feas","bearing_feas_on_track","signed_track_error","track_error_bound","airspeed_ref","bearing","heading_ref","min_ground_speed_ref","adapted_period","p_gain","time_const"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class NpfgStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof NpfgStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new NpfgStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NpfgStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NpfgStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new NpfgStatusRefArray(size);
    this._refObject = new NpfgStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new NpfgStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof NpfgStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "NpfgStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      NpfgStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return NpfgStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return NpfgStatusArrayWrapper;
  }
}
module.exports = NpfgStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "wind_est_valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat_accel",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat_accel_ff",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bearing_feas",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bearing_feas_on_track",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "signed_track_error",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "track_error_bound",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "airspeed_ref",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bearing",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heading_ref",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "min_ground_speed_ref",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "adapted_period",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "p_gain",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "time_const",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "NpfgStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "NpfgStatus"
}
*/
