// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const RadioStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  rssi: primitiveTypes.uint8,
  remote_rssi: primitiveTypes.uint8,
  txbuf: primitiveTypes.uint8,
  noise: primitiveTypes.uint8,
  remote_noise: primitiveTypes.uint8,
  rxerrors: primitiveTypes.uint16,
  fix: primitiveTypes.uint16,
});
const RadioStatusRefArray = ArrayType(RadioStatusRefStruct);
const RadioStatusRefStructArray = StructType({
  data: RadioStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RadioStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RadioStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._rssiIntialized = true;
      this._remote_rssiIntialized = true;
      this._txbufIntialized = true;
      this._noiseIntialized = true;
      this._remote_noiseIntialized = true;
      this._rxerrorsIntialized = true;
      this._fixIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RadioStatusRefStruct();
    this._timestampIntialized = false;
    this._rssiIntialized = false;
    this._remote_rssiIntialized = false;
    this._txbufIntialized = false;
    this._noiseIntialized = false;
    this._remote_noiseIntialized = false;
    this._rxerrorsIntialized = false;
    this._fixIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new RadioStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RadioStatusArrayWrapper;
  }
  static get ArrayType() {
    return RadioStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return RadioStatusRefStructArray
  }
  static get refObjectType() {
    return RadioStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in RadioStatus');
      }
      if (checkConsistency && !this._rssiIntialized) {
        throw new TypeError('Invalid argument: rssi in RadioStatus');
      }
      if (checkConsistency && !this._remote_rssiIntialized) {
        throw new TypeError('Invalid argument: remote_rssi in RadioStatus');
      }
      if (checkConsistency && !this._txbufIntialized) {
        throw new TypeError('Invalid argument: txbuf in RadioStatus');
      }
      if (checkConsistency && !this._noiseIntialized) {
        throw new TypeError('Invalid argument: noise in RadioStatus');
      }
      if (checkConsistency && !this._remote_noiseIntialized) {
        throw new TypeError('Invalid argument: remote_noise in RadioStatus');
      }
      if (checkConsistency && !this._rxerrorsIntialized) {
        throw new TypeError('Invalid argument: rxerrors in RadioStatus');
      }
      if (checkConsistency && !this._fixIntialized) {
        throw new TypeError('Invalid argument: fix in RadioStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._rssiIntialized = true;
    this._refObject.rssi = refObject.rssi;
    this._remote_rssiIntialized = true;
    this._refObject.remote_rssi = refObject.remote_rssi;
    this._txbufIntialized = true;
    this._refObject.txbuf = refObject.txbuf;
    this._noiseIntialized = true;
    this._refObject.noise = refObject.noise;
    this._remote_noiseIntialized = true;
    this._refObject.remote_noise = refObject.remote_noise;
    this._rxerrorsIntialized = true;
    this._refObject.rxerrors = refObject.rxerrors;
    this._fixIntialized = true;
    this._refObject.fix = refObject.fix;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    RadioStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'RadioStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get rssi() {
    if (!this._rssiIntialized) {
      return undefined;
    }
    return this._refObject.rssi;
  }
  set rssi(value) {
    this._rssiIntialized = true;
    this._refObject.rssi = value;
  }
  get remote_rssi() {
    if (!this._remote_rssiIntialized) {
      return undefined;
    }
    return this._refObject.remote_rssi;
  }
  set remote_rssi(value) {
    this._remote_rssiIntialized = true;
    this._refObject.remote_rssi = value;
  }
  get txbuf() {
    if (!this._txbufIntialized) {
      return undefined;
    }
    return this._refObject.txbuf;
  }
  set txbuf(value) {
    this._txbufIntialized = true;
    this._refObject.txbuf = value;
  }
  get noise() {
    if (!this._noiseIntialized) {
      return undefined;
    }
    return this._refObject.noise;
  }
  set noise(value) {
    this._noiseIntialized = true;
    this._refObject.noise = value;
  }
  get remote_noise() {
    if (!this._remote_noiseIntialized) {
      return undefined;
    }
    return this._refObject.remote_noise;
  }
  set remote_noise(value) {
    this._remote_noiseIntialized = true;
    this._refObject.remote_noise = value;
  }
  get rxerrors() {
    if (!this._rxerrorsIntialized) {
      return undefined;
    }
    return this._refObject.rxerrors;
  }
  set rxerrors(value) {
    this._rxerrorsIntialized = true;
    this._refObject.rxerrors = value;
  }
  get fix() {
    if (!this._fixIntialized) {
      return undefined;
    }
    return this._refObject.fix;
  }
  set fix(value) {
    this._fixIntialized = true;
    this._refObject.fix = value;
  }
  copyRefObject(refObject) {
    this._refObject = new RadioStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._rssiIntialized = true;
    this._remote_rssiIntialized = true;
    this._txbufIntialized = true;
    this._noiseIntialized = true;
    this._remote_noiseIntialized = true;
    this._rxerrorsIntialized = true;
    this._fixIntialized = true;
  }
  copy(other) {
    this._refObject = new RadioStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._rssiIntialized = true;
    this._remote_rssiIntialized = true;
    this._txbufIntialized = true;
    this._noiseIntialized = true;
    this._remote_noiseIntialized = true;
    this._rxerrorsIntialized = true;
    this._fixIntialized = true;
  }
  static get classType() {
    return RadioStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rssi","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"remote_rssi","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"txbuf","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"noise","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"remote_noise","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rxerrors","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fix","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"RadioStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RadioStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","rssi","remote_rssi","txbuf","noise","remote_noise","rxerrors","fix"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RadioStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RadioStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RadioStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RadioStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RadioStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RadioStatusRefArray(size);
    this._refObject = new RadioStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RadioStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RadioStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RadioStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RadioStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RadioStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RadioStatusArrayWrapper;
  }
}
module.exports = RadioStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rssi",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "remote_rssi",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "txbuf",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "noise",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "remote_noise",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rxerrors",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fix",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "RadioStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RadioStatus"
}
*/
