/* eslint-disable camelcase */
/* eslint-disable max-len */
// DO NOT EDIT
// This file is generated by the rostsd_gen script

declare module 'rclnodejs' {
  namespace action_msgs {
    namespace msg {
      export interface GoalInfo {
        goal_id: unique_identifier_msgs.msg.UUID;
        stamp: builtin_interfaces.msg.Time;
      }
      export interface GoalInfoConstructor {
        new(other?: GoalInfo): GoalInfo;
      }
      export interface GoalStatus {
        goal_info: action_msgs.msg.GoalInfo;
        status: number;
      }
      export interface GoalStatusConstructor {
        readonly STATUS_UNKNOWN: number;
        readonly STATUS_ACCEPTED: number;
        readonly STATUS_EXECUTING: number;
        readonly STATUS_CANCELING: number;
        readonly STATUS_SUCCEEDED: number;
        readonly STATUS_CANCELED: number;
        readonly STATUS_ABORTED: number;
        new(other?: GoalStatus): GoalStatus;
      }
      export interface GoalStatusArray {
        status_list: action_msgs.msg.GoalStatus[];
      }
      export interface GoalStatusArrayConstructor {
        new(other?: GoalStatusArray): GoalStatusArray;
      }
    }
    namespace srv {
      export interface CancelGoalConstructor extends ROSService {
        readonly Request: CancelGoal_RequestConstructor;
        readonly Response: CancelGoal_ResponseConstructor;
      }
      export interface CancelGoal_Request {
        goal_info: action_msgs.msg.GoalInfo;
      }
      export interface CancelGoal_RequestConstructor {
        new(other?: CancelGoal_Request): CancelGoal_Request;
      }
      export interface CancelGoal_Response {
        return_code: number;
        goals_canceling: action_msgs.msg.GoalInfo[];
      }
      export interface CancelGoal_ResponseConstructor {
        readonly ERROR_NONE: number;
        readonly ERROR_REJECTED: number;
        readonly ERROR_UNKNOWN_GOAL_ID: number;
        readonly ERROR_GOAL_TERMINATED: number;
        new(other?: CancelGoal_Response): CancelGoal_Response;
      }
    }
  }

  namespace actionlib_msgs {
    namespace msg {
      export interface GoalID {
        stamp: builtin_interfaces.msg.Time;
        id: string;
      }
      export interface GoalIDConstructor {
        new(other?: GoalID): GoalID;
      }
      export interface GoalStatus {
        goal_id: actionlib_msgs.msg.GoalID;
        status: number;
        text: string;
      }
      export interface GoalStatusConstructor {
        readonly PENDING: number;
        readonly ACTIVE: number;
        readonly PREEMPTED: number;
        readonly SUCCEEDED: number;
        readonly ABORTED: number;
        readonly REJECTED: number;
        readonly PREEMPTING: number;
        readonly RECALLING: number;
        readonly RECALLED: number;
        readonly LOST: number;
        new(other?: GoalStatus): GoalStatus;
      }
      export interface GoalStatusArray {
        header: std_msgs.msg.Header;
        status_list: actionlib_msgs.msg.GoalStatus[];
      }
      export interface GoalStatusArrayConstructor {
        new(other?: GoalStatusArray): GoalStatusArray;
      }
    }
  }

  namespace builtin_interfaces {
    namespace msg {
      export interface Duration {
        sec: number;
        nanosec: number;
      }
      export interface DurationConstructor {
        new(other?: Duration): Duration;
      }
      export interface Time {
        sec: number;
        nanosec: number;
      }
      export interface TimeConstructor {
        new(other?: Time): Time;
      }
    }
  }

  namespace composition_interfaces {
    namespace srv {
      export interface ListNodesConstructor extends ROSService {
        readonly Request: ListNodes_RequestConstructor;
        readonly Response: ListNodes_ResponseConstructor;
      }
      export interface ListNodes_Request {
      }
      export interface ListNodes_RequestConstructor {
        new(other?: ListNodes_Request): ListNodes_Request;
      }
      export interface ListNodes_Response {
        full_node_names: string[];
        unique_ids: number[];
      }
      export interface ListNodes_ResponseConstructor {
        new(other?: ListNodes_Response): ListNodes_Response;
      }
      export interface LoadNodeConstructor extends ROSService {
        readonly Request: LoadNode_RequestConstructor;
        readonly Response: LoadNode_ResponseConstructor;
      }
      export interface LoadNode_Request {
        package_name: string;
        plugin_name: string;
        node_name: string;
        node_namespace: string;
        log_level: number;
        remap_rules: string[];
        parameters: rcl_interfaces.msg.Parameter[];
        extra_arguments: rcl_interfaces.msg.Parameter[];
      }
      export interface LoadNode_RequestConstructor {
        new(other?: LoadNode_Request): LoadNode_Request;
      }
      export interface LoadNode_Response {
        success: boolean;
        error_message: string;
        full_node_name: string;
        unique_id: number;
      }
      export interface LoadNode_ResponseConstructor {
        new(other?: LoadNode_Response): LoadNode_Response;
      }
      export interface UnloadNodeConstructor extends ROSService {
        readonly Request: UnloadNode_RequestConstructor;
        readonly Response: UnloadNode_ResponseConstructor;
      }
      export interface UnloadNode_Request {
        unique_id: number;
      }
      export interface UnloadNode_RequestConstructor {
        new(other?: UnloadNode_Request): UnloadNode_Request;
      }
      export interface UnloadNode_Response {
        success: boolean;
        error_message: string;
      }
      export interface UnloadNode_ResponseConstructor {
        new(other?: UnloadNode_Response): UnloadNode_Response;
      }
    }
  }

  namespace diagnostic_msgs {
    namespace msg {
      export interface DiagnosticArray {
        header: std_msgs.msg.Header;
        status: diagnostic_msgs.msg.DiagnosticStatus[];
      }
      export interface DiagnosticArrayConstructor {
        new(other?: DiagnosticArray): DiagnosticArray;
      }
      export interface DiagnosticStatus {
        level: number;
        name: string;
        message: string;
        hardware_id: string;
        values: diagnostic_msgs.msg.KeyValue[];
      }
      export interface DiagnosticStatusConstructor {
        readonly OK: number;
        readonly WARN: number;
        readonly ERROR: number;
        readonly STALE: number;
        new(other?: DiagnosticStatus): DiagnosticStatus;
      }
      export interface KeyValue {
        key: string;
        value: string;
      }
      export interface KeyValueConstructor {
        new(other?: KeyValue): KeyValue;
      }
    }
    namespace srv {
      export interface AddDiagnosticsConstructor extends ROSService {
        readonly Request: AddDiagnostics_RequestConstructor;
        readonly Response: AddDiagnostics_ResponseConstructor;
      }
      export interface AddDiagnostics_Request {
        load_namespace: string;
      }
      export interface AddDiagnostics_RequestConstructor {
        new(other?: AddDiagnostics_Request): AddDiagnostics_Request;
      }
      export interface AddDiagnostics_Response {
        success: boolean;
        message: string;
      }
      export interface AddDiagnostics_ResponseConstructor {
        new(other?: AddDiagnostics_Response): AddDiagnostics_Response;
      }
      export interface SelfTestConstructor extends ROSService {
        readonly Request: SelfTest_RequestConstructor;
        readonly Response: SelfTest_ResponseConstructor;
      }
      export interface SelfTest_Request {
      }
      export interface SelfTest_RequestConstructor {
        new(other?: SelfTest_Request): SelfTest_Request;
      }
      export interface SelfTest_Response {
        id: string;
        passed: number;
        status: diagnostic_msgs.msg.DiagnosticStatus[];
      }
      export interface SelfTest_ResponseConstructor {
        new(other?: SelfTest_Response): SelfTest_Response;
      }
    }
  }

  namespace geometry_msgs {
    namespace msg {
      export interface Accel {
        linear: geometry_msgs.msg.Vector3;
        angular: geometry_msgs.msg.Vector3;
      }
      export interface AccelConstructor {
        new(other?: Accel): Accel;
      }
      export interface AccelStamped {
        header: std_msgs.msg.Header;
        accel: geometry_msgs.msg.Accel;
      }
      export interface AccelStampedConstructor {
        new(other?: AccelStamped): AccelStamped;
      }
      export interface AccelWithCovariance {
        accel: geometry_msgs.msg.Accel;
        covariance: number[] | Float64Array;
      }
      export interface AccelWithCovarianceConstructor {
        new(other?: AccelWithCovariance): AccelWithCovariance;
      }
      export interface AccelWithCovarianceStamped {
        header: std_msgs.msg.Header;
        accel: geometry_msgs.msg.AccelWithCovariance;
      }
      export interface AccelWithCovarianceStampedConstructor {
        new(other?: AccelWithCovarianceStamped): AccelWithCovarianceStamped;
      }
      export interface Inertia {
        m: number;
        com: geometry_msgs.msg.Vector3;
        ixx: number;
        ixy: number;
        ixz: number;
        iyy: number;
        iyz: number;
        izz: number;
      }
      export interface InertiaConstructor {
        new(other?: Inertia): Inertia;
      }
      export interface InertiaStamped {
        header: std_msgs.msg.Header;
        inertia: geometry_msgs.msg.Inertia;
      }
      export interface InertiaStampedConstructor {
        new(other?: InertiaStamped): InertiaStamped;
      }
      export interface Point {
        x: number;
        y: number;
        z: number;
      }
      export interface PointConstructor {
        new(other?: Point): Point;
      }
      export interface Point32 {
        x: number;
        y: number;
        z: number;
      }
      export interface Point32Constructor {
        new(other?: Point32): Point32;
      }
      export interface PointStamped {
        header: std_msgs.msg.Header;
        point: geometry_msgs.msg.Point;
      }
      export interface PointStampedConstructor {
        new(other?: PointStamped): PointStamped;
      }
      export interface Polygon {
        points: geometry_msgs.msg.Point32[];
      }
      export interface PolygonConstructor {
        new(other?: Polygon): Polygon;
      }
      export interface PolygonStamped {
        header: std_msgs.msg.Header;
        polygon: geometry_msgs.msg.Polygon;
      }
      export interface PolygonStampedConstructor {
        new(other?: PolygonStamped): PolygonStamped;
      }
      export interface Pose {
        position: geometry_msgs.msg.Point;
        orientation: geometry_msgs.msg.Quaternion;
      }
      export interface PoseConstructor {
        new(other?: Pose): Pose;
      }
      export interface Pose2D {
        x: number;
        y: number;
        theta: number;
      }
      export interface Pose2DConstructor {
        new(other?: Pose2D): Pose2D;
      }
      export interface PoseArray {
        header: std_msgs.msg.Header;
        poses: geometry_msgs.msg.Pose[];
      }
      export interface PoseArrayConstructor {
        new(other?: PoseArray): PoseArray;
      }
      export interface PoseStamped {
        header: std_msgs.msg.Header;
        pose: geometry_msgs.msg.Pose;
      }
      export interface PoseStampedConstructor {
        new(other?: PoseStamped): PoseStamped;
      }
      export interface PoseWithCovariance {
        pose: geometry_msgs.msg.Pose;
        covariance: number[] | Float64Array;
      }
      export interface PoseWithCovarianceConstructor {
        new(other?: PoseWithCovariance): PoseWithCovariance;
      }
      export interface PoseWithCovarianceStamped {
        header: std_msgs.msg.Header;
        pose: geometry_msgs.msg.PoseWithCovariance;
      }
      export interface PoseWithCovarianceStampedConstructor {
        new(other?: PoseWithCovarianceStamped): PoseWithCovarianceStamped;
      }
      export interface Quaternion {
        x: number;
        y: number;
        z: number;
        w: number;
      }
      export interface QuaternionConstructor {
        new(other?: Quaternion): Quaternion;
      }
      export interface QuaternionStamped {
        header: std_msgs.msg.Header;
        quaternion: geometry_msgs.msg.Quaternion;
      }
      export interface QuaternionStampedConstructor {
        new(other?: QuaternionStamped): QuaternionStamped;
      }
      export interface Transform {
        translation: geometry_msgs.msg.Vector3;
        rotation: geometry_msgs.msg.Quaternion;
      }
      export interface TransformConstructor {
        new(other?: Transform): Transform;
      }
      export interface TransformStamped {
        header: std_msgs.msg.Header;
        child_frame_id: string;
        transform: geometry_msgs.msg.Transform;
      }
      export interface TransformStampedConstructor {
        new(other?: TransformStamped): TransformStamped;
      }
      export interface Twist {
        linear: geometry_msgs.msg.Vector3;
        angular: geometry_msgs.msg.Vector3;
      }
      export interface TwistConstructor {
        new(other?: Twist): Twist;
      }
      export interface TwistStamped {
        header: std_msgs.msg.Header;
        twist: geometry_msgs.msg.Twist;
      }
      export interface TwistStampedConstructor {
        new(other?: TwistStamped): TwistStamped;
      }
      export interface TwistWithCovariance {
        twist: geometry_msgs.msg.Twist;
        covariance: number[] | Float64Array;
      }
      export interface TwistWithCovarianceConstructor {
        new(other?: TwistWithCovariance): TwistWithCovariance;
      }
      export interface TwistWithCovarianceStamped {
        header: std_msgs.msg.Header;
        twist: geometry_msgs.msg.TwistWithCovariance;
      }
      export interface TwistWithCovarianceStampedConstructor {
        new(other?: TwistWithCovarianceStamped): TwistWithCovarianceStamped;
      }
      export interface Vector3 {
        x: number;
        y: number;
        z: number;
      }
      export interface Vector3Constructor {
        new(other?: Vector3): Vector3;
      }
      export interface Vector3Stamped {
        header: std_msgs.msg.Header;
        vector: geometry_msgs.msg.Vector3;
      }
      export interface Vector3StampedConstructor {
        new(other?: Vector3Stamped): Vector3Stamped;
      }
      export interface VelocityStamped {
        header: std_msgs.msg.Header;
        body_frame_id: string;
        reference_frame_id: string;
        velocity: geometry_msgs.msg.Twist;
      }
      export interface VelocityStampedConstructor {
        new(other?: VelocityStamped): VelocityStamped;
      }
      export interface Wrench {
        force: geometry_msgs.msg.Vector3;
        torque: geometry_msgs.msg.Vector3;
      }
      export interface WrenchConstructor {
        new(other?: Wrench): Wrench;
      }
      export interface WrenchStamped {
        header: std_msgs.msg.Header;
        wrench: geometry_msgs.msg.Wrench;
      }
      export interface WrenchStampedConstructor {
        new(other?: WrenchStamped): WrenchStamped;
      }
    }
  }

  namespace lifecycle_msgs {
    namespace msg {
      export interface State {
        id: number;
        label: string;
      }
      export interface StateConstructor {
        readonly PRIMARY_STATE_UNKNOWN: number;
        readonly PRIMARY_STATE_UNCONFIGURED: number;
        readonly PRIMARY_STATE_INACTIVE: number;
        readonly PRIMARY_STATE_ACTIVE: number;
        readonly PRIMARY_STATE_FINALIZED: number;
        readonly TRANSITION_STATE_CONFIGURING: number;
        readonly TRANSITION_STATE_CLEANINGUP: number;
        readonly TRANSITION_STATE_SHUTTINGDOWN: number;
        readonly TRANSITION_STATE_ACTIVATING: number;
        readonly TRANSITION_STATE_DEACTIVATING: number;
        readonly TRANSITION_STATE_ERRORPROCESSING: number;
        new(other?: State): State;
      }
      export interface Transition {
        id: number;
        label: string;
      }
      export interface TransitionConstructor {
        readonly TRANSITION_CREATE: number;
        readonly TRANSITION_CONFIGURE: number;
        readonly TRANSITION_CLEANUP: number;
        readonly TRANSITION_ACTIVATE: number;
        readonly TRANSITION_DEACTIVATE: number;
        readonly TRANSITION_UNCONFIGURED_SHUTDOWN: number;
        readonly TRANSITION_INACTIVE_SHUTDOWN: number;
        readonly TRANSITION_ACTIVE_SHUTDOWN: number;
        readonly TRANSITION_DESTROY: number;
        readonly TRANSITION_ON_CONFIGURE_SUCCESS: number;
        readonly TRANSITION_ON_CONFIGURE_FAILURE: number;
        readonly TRANSITION_ON_CONFIGURE_ERROR: number;
        readonly TRANSITION_ON_CLEANUP_SUCCESS: number;
        readonly TRANSITION_ON_CLEANUP_FAILURE: number;
        readonly TRANSITION_ON_CLEANUP_ERROR: number;
        readonly TRANSITION_ON_ACTIVATE_SUCCESS: number;
        readonly TRANSITION_ON_ACTIVATE_FAILURE: number;
        readonly TRANSITION_ON_ACTIVATE_ERROR: number;
        readonly TRANSITION_ON_DEACTIVATE_SUCCESS: number;
        readonly TRANSITION_ON_DEACTIVATE_FAILURE: number;
        readonly TRANSITION_ON_DEACTIVATE_ERROR: number;
        readonly TRANSITION_ON_SHUTDOWN_SUCCESS: number;
        readonly TRANSITION_ON_SHUTDOWN_FAILURE: number;
        readonly TRANSITION_ON_SHUTDOWN_ERROR: number;
        readonly TRANSITION_ON_ERROR_SUCCESS: number;
        readonly TRANSITION_ON_ERROR_FAILURE: number;
        readonly TRANSITION_ON_ERROR_ERROR: number;
        readonly TRANSITION_CALLBACK_SUCCESS: number;
        readonly TRANSITION_CALLBACK_FAILURE: number;
        readonly TRANSITION_CALLBACK_ERROR: number;
        new(other?: Transition): Transition;
      }
      export interface TransitionDescription {
        transition: lifecycle_msgs.msg.Transition;
        start_state: lifecycle_msgs.msg.State;
        goal_state: lifecycle_msgs.msg.State;
      }
      export interface TransitionDescriptionConstructor {
        new(other?: TransitionDescription): TransitionDescription;
      }
      export interface TransitionEvent {
        timestamp: number;
        transition: lifecycle_msgs.msg.Transition;
        start_state: lifecycle_msgs.msg.State;
        goal_state: lifecycle_msgs.msg.State;
      }
      export interface TransitionEventConstructor {
        new(other?: TransitionEvent): TransitionEvent;
      }
    }
    namespace srv {
      export interface ChangeStateConstructor extends ROSService {
        readonly Request: ChangeState_RequestConstructor;
        readonly Response: ChangeState_ResponseConstructor;
      }
      export interface ChangeState_Request {
        transition: lifecycle_msgs.msg.Transition;
      }
      export interface ChangeState_RequestConstructor {
        new(other?: ChangeState_Request): ChangeState_Request;
      }
      export interface ChangeState_Response {
        success: boolean;
      }
      export interface ChangeState_ResponseConstructor {
        new(other?: ChangeState_Response): ChangeState_Response;
      }
      export interface GetAvailableStatesConstructor extends ROSService {
        readonly Request: GetAvailableStates_RequestConstructor;
        readonly Response: GetAvailableStates_ResponseConstructor;
      }
      export interface GetAvailableStates_Request {
      }
      export interface GetAvailableStates_RequestConstructor {
        new(other?: GetAvailableStates_Request): GetAvailableStates_Request;
      }
      export interface GetAvailableStates_Response {
        available_states: lifecycle_msgs.msg.State[];
      }
      export interface GetAvailableStates_ResponseConstructor {
        new(other?: GetAvailableStates_Response): GetAvailableStates_Response;
      }
      export interface GetAvailableTransitionsConstructor extends ROSService {
        readonly Request: GetAvailableTransitions_RequestConstructor;
        readonly Response: GetAvailableTransitions_ResponseConstructor;
      }
      export interface GetAvailableTransitions_Request {
      }
      export interface GetAvailableTransitions_RequestConstructor {
        new(other?: GetAvailableTransitions_Request): GetAvailableTransitions_Request;
      }
      export interface GetAvailableTransitions_Response {
        available_transitions: lifecycle_msgs.msg.TransitionDescription[];
      }
      export interface GetAvailableTransitions_ResponseConstructor {
        new(other?: GetAvailableTransitions_Response): GetAvailableTransitions_Response;
      }
      export interface GetStateConstructor extends ROSService {
        readonly Request: GetState_RequestConstructor;
        readonly Response: GetState_ResponseConstructor;
      }
      export interface GetState_Request {
      }
      export interface GetState_RequestConstructor {
        new(other?: GetState_Request): GetState_Request;
      }
      export interface GetState_Response {
        current_state: lifecycle_msgs.msg.State;
      }
      export interface GetState_ResponseConstructor {
        new(other?: GetState_Response): GetState_Response;
      }
    }
  }

  namespace map_msgs {
    namespace msg {
      export interface OccupancyGridUpdate {
        header: std_msgs.msg.Header;
        x: number;
        y: number;
        width: number;
        height: number;
        data: number[] | Int8Array;
      }
      export interface OccupancyGridUpdateConstructor {
        new(other?: OccupancyGridUpdate): OccupancyGridUpdate;
      }
      export interface PointCloud2Update {
        header: std_msgs.msg.Header;
        type: number;
        points: sensor_msgs.msg.PointCloud2;
      }
      export interface PointCloud2UpdateConstructor {
        readonly ADD: number;
        readonly DELETE: number;
        new(other?: PointCloud2Update): PointCloud2Update;
      }
      export interface ProjectedMap {
        map: nav_msgs.msg.OccupancyGrid;
        min_z: number;
        max_z: number;
      }
      export interface ProjectedMapConstructor {
        new(other?: ProjectedMap): ProjectedMap;
      }
      export interface ProjectedMapInfo {
        frame_id: string;
        x: number;
        y: number;
        width: number;
        height: number;
        min_z: number;
        max_z: number;
      }
      export interface ProjectedMapInfoConstructor {
        new(other?: ProjectedMapInfo): ProjectedMapInfo;
      }
    }
    namespace srv {
      export interface GetMapROIConstructor extends ROSService {
        readonly Request: GetMapROI_RequestConstructor;
        readonly Response: GetMapROI_ResponseConstructor;
      }
      export interface GetMapROI_Request {
        x: number;
        y: number;
        l_x: number;
        l_y: number;
      }
      export interface GetMapROI_RequestConstructor {
        new(other?: GetMapROI_Request): GetMapROI_Request;
      }
      export interface GetMapROI_Response {
        sub_map: nav_msgs.msg.OccupancyGrid;
      }
      export interface GetMapROI_ResponseConstructor {
        new(other?: GetMapROI_Response): GetMapROI_Response;
      }
      export interface GetPointMapConstructor extends ROSService {
        readonly Request: GetPointMap_RequestConstructor;
        readonly Response: GetPointMap_ResponseConstructor;
      }
      export interface GetPointMapROIConstructor extends ROSService {
        readonly Request: GetPointMapROI_RequestConstructor;
        readonly Response: GetPointMapROI_ResponseConstructor;
      }
      export interface GetPointMapROI_Request {
        x: number;
        y: number;
        z: number;
        r: number;
        l_x: number;
        l_y: number;
        l_z: number;
      }
      export interface GetPointMapROI_RequestConstructor {
        new(other?: GetPointMapROI_Request): GetPointMapROI_Request;
      }
      export interface GetPointMapROI_Response {
        sub_map: sensor_msgs.msg.PointCloud2;
      }
      export interface GetPointMapROI_ResponseConstructor {
        new(other?: GetPointMapROI_Response): GetPointMapROI_Response;
      }
      export interface GetPointMap_Request {
      }
      export interface GetPointMap_RequestConstructor {
        new(other?: GetPointMap_Request): GetPointMap_Request;
      }
      export interface GetPointMap_Response {
        map: sensor_msgs.msg.PointCloud2;
      }
      export interface GetPointMap_ResponseConstructor {
        new(other?: GetPointMap_Response): GetPointMap_Response;
      }
      export interface ProjectedMapsInfoConstructor extends ROSService {
        readonly Request: ProjectedMapsInfo_RequestConstructor;
        readonly Response: ProjectedMapsInfo_ResponseConstructor;
      }
      export interface ProjectedMapsInfo_Request {
        projected_maps_info: map_msgs.msg.ProjectedMapInfo[];
      }
      export interface ProjectedMapsInfo_RequestConstructor {
        new(other?: ProjectedMapsInfo_Request): ProjectedMapsInfo_Request;
      }
      export interface ProjectedMapsInfo_Response {
      }
      export interface ProjectedMapsInfo_ResponseConstructor {
        new(other?: ProjectedMapsInfo_Response): ProjectedMapsInfo_Response;
      }
      export interface SaveMapConstructor extends ROSService {
        readonly Request: SaveMap_RequestConstructor;
        readonly Response: SaveMap_ResponseConstructor;
      }
      export interface SaveMap_Request {
        filename: std_msgs.msg.String;
      }
      export interface SaveMap_RequestConstructor {
        new(other?: SaveMap_Request): SaveMap_Request;
      }
      export interface SaveMap_Response {
      }
      export interface SaveMap_ResponseConstructor {
        new(other?: SaveMap_Response): SaveMap_Response;
      }
      export interface SetMapProjectionsConstructor extends ROSService {
        readonly Request: SetMapProjections_RequestConstructor;
        readonly Response: SetMapProjections_ResponseConstructor;
      }
      export interface SetMapProjections_Request {
      }
      export interface SetMapProjections_RequestConstructor {
        new(other?: SetMapProjections_Request): SetMapProjections_Request;
      }
      export interface SetMapProjections_Response {
        projected_maps_info: map_msgs.msg.ProjectedMapInfo[];
      }
      export interface SetMapProjections_ResponseConstructor {
        new(other?: SetMapProjections_Response): SetMapProjections_Response;
      }
    }
  }

  namespace nav_msgs {
    namespace msg {
      export interface GridCells {
        header: std_msgs.msg.Header;
        cell_width: number;
        cell_height: number;
        cells: geometry_msgs.msg.Point[];
      }
      export interface GridCellsConstructor {
        new(other?: GridCells): GridCells;
      }
      export interface MapMetaData {
        map_load_time: builtin_interfaces.msg.Time;
        resolution: number;
        width: number;
        height: number;
        origin: geometry_msgs.msg.Pose;
      }
      export interface MapMetaDataConstructor {
        new(other?: MapMetaData): MapMetaData;
      }
      export interface OccupancyGrid {
        header: std_msgs.msg.Header;
        info: nav_msgs.msg.MapMetaData;
        data: number[] | Int8Array;
      }
      export interface OccupancyGridConstructor {
        new(other?: OccupancyGrid): OccupancyGrid;
      }
      export interface Odometry {
        header: std_msgs.msg.Header;
        child_frame_id: string;
        pose: geometry_msgs.msg.PoseWithCovariance;
        twist: geometry_msgs.msg.TwistWithCovariance;
      }
      export interface OdometryConstructor {
        new(other?: Odometry): Odometry;
      }
      export interface Path {
        header: std_msgs.msg.Header;
        poses: geometry_msgs.msg.PoseStamped[];
      }
      export interface PathConstructor {
        new(other?: Path): Path;
      }
    }
    namespace srv {
      export interface GetMapConstructor extends ROSService {
        readonly Request: GetMap_RequestConstructor;
        readonly Response: GetMap_ResponseConstructor;
      }
      export interface GetMap_Request {
      }
      export interface GetMap_RequestConstructor {
        new(other?: GetMap_Request): GetMap_Request;
      }
      export interface GetMap_Response {
        map: nav_msgs.msg.OccupancyGrid;
      }
      export interface GetMap_ResponseConstructor {
        new(other?: GetMap_Response): GetMap_Response;
      }
      export interface GetPlanConstructor extends ROSService {
        readonly Request: GetPlan_RequestConstructor;
        readonly Response: GetPlan_ResponseConstructor;
      }
      export interface GetPlan_Request {
        start: geometry_msgs.msg.PoseStamped;
        goal: geometry_msgs.msg.PoseStamped;
        tolerance: number;
      }
      export interface GetPlan_RequestConstructor {
        new(other?: GetPlan_Request): GetPlan_Request;
      }
      export interface GetPlan_Response {
        plan: nav_msgs.msg.Path;
      }
      export interface GetPlan_ResponseConstructor {
        new(other?: GetPlan_Response): GetPlan_Response;
      }
      export interface LoadMapConstructor extends ROSService {
        readonly Request: LoadMap_RequestConstructor;
        readonly Response: LoadMap_ResponseConstructor;
      }
      export interface LoadMap_Request {
        map_url: string;
      }
      export interface LoadMap_RequestConstructor {
        new(other?: LoadMap_Request): LoadMap_Request;
      }
      export interface LoadMap_Response {
        map: nav_msgs.msg.OccupancyGrid;
        result: number;
      }
      export interface LoadMap_ResponseConstructor {
        readonly RESULT_SUCCESS: number;
        readonly RESULT_MAP_DOES_NOT_EXIST: number;
        readonly RESULT_INVALID_MAP_DATA: number;
        readonly RESULT_INVALID_MAP_METADATA: number;
        readonly RESULT_UNDEFINED_FAILURE: number;
        new(other?: LoadMap_Response): LoadMap_Response;
      }
      export interface SetMapConstructor extends ROSService {
        readonly Request: SetMap_RequestConstructor;
        readonly Response: SetMap_ResponseConstructor;
      }
      export interface SetMap_Request {
        map: nav_msgs.msg.OccupancyGrid;
        initial_pose: geometry_msgs.msg.PoseWithCovarianceStamped;
      }
      export interface SetMap_RequestConstructor {
        new(other?: SetMap_Request): SetMap_Request;
      }
      export interface SetMap_Response {
        success: boolean;
      }
      export interface SetMap_ResponseConstructor {
        new(other?: SetMap_Response): SetMap_Response;
      }
    }
  }

  namespace px4_msgs {
    namespace msg {
      export interface ActionRequest {
        timestamp: number;
        action: number;
        source: number;
        mode: number;
      }
      export interface ActionRequestConstructor {
        readonly ACTION_DISARM: number;
        readonly ACTION_ARM: number;
        readonly ACTION_TOGGLE_ARMING: number;
        readonly ACTION_UNKILL: number;
        readonly ACTION_KILL: number;
        readonly ACTION_SWITCH_MODE: number;
        readonly ACTION_VTOL_TRANSITION_TO_MULTICOPTER: number;
        readonly ACTION_VTOL_TRANSITION_TO_FIXEDWING: number;
        readonly SOURCE_RC_STICK_GESTURE: number;
        readonly SOURCE_RC_SWITCH: number;
        readonly SOURCE_RC_BUTTON: number;
        readonly SOURCE_RC_MODE_SLOT: number;
        new(other?: ActionRequest): ActionRequest;
      }
      export interface ActuatorArmed {
        timestamp: number;
        armed: boolean;
        prearmed: boolean;
        ready_to_arm: boolean;
        lockdown: boolean;
        manual_lockdown: boolean;
        force_failsafe: boolean;
        in_esc_calibration_mode: boolean;
      }
      export interface ActuatorArmedConstructor {
        new(other?: ActuatorArmed): ActuatorArmed;
      }
      export interface ActuatorControlsStatus {
        timestamp: number;
        control_power: number[] | Float32Array;
      }
      export interface ActuatorControlsStatusConstructor {
        new(other?: ActuatorControlsStatus): ActuatorControlsStatus;
      }
      export interface ActuatorMotors {
        timestamp: number;
        timestamp_sample: number;
        reversible_flags: number;
        control: number[] | Float32Array;
      }
      export interface ActuatorMotorsConstructor {
        readonly ACTUATOR_FUNCTION_MOTOR1: number;
        readonly NUM_CONTROLS: number;
        new(other?: ActuatorMotors): ActuatorMotors;
      }
      export interface ActuatorOutputs {
        timestamp: number;
        noutputs: number;
        output: number[] | Float32Array;
      }
      export interface ActuatorOutputsConstructor {
        readonly NUM_ACTUATOR_OUTPUTS: number;
        readonly NUM_ACTUATOR_OUTPUT_GROUPS: number;
        new(other?: ActuatorOutputs): ActuatorOutputs;
      }
      export interface ActuatorServos {
        timestamp: number;
        timestamp_sample: number;
        control: number[] | Float32Array;
      }
      export interface ActuatorServosConstructor {
        readonly NUM_CONTROLS: number;
        new(other?: ActuatorServos): ActuatorServos;
      }
      export interface ActuatorServosTrim {
        timestamp: number;
        trim: number[] | Float32Array;
      }
      export interface ActuatorServosTrimConstructor {
        readonly NUM_CONTROLS: number;
        new(other?: ActuatorServosTrim): ActuatorServosTrim;
      }
      export interface ActuatorTest {
        timestamp: number;
        action: number;
        function: number;
        value: number;
        timeout_ms: number;
      }
      export interface ActuatorTestConstructor {
        readonly ACTION_RELEASE_CONTROL: number;
        readonly ACTION_DO_CONTROL: number;
        readonly FUNCTION_MOTOR1: number;
        readonly MAX_NUM_MOTORS: number;
        readonly FUNCTION_SERVO1: number;
        readonly MAX_NUM_SERVOS: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: ActuatorTest): ActuatorTest;
      }
      export interface AdcReport {
        timestamp: number;
        device_id: number;
        channel_id: number[] | Int16Array;
        raw_data: number[] | Int32Array;
        resolution: number;
        v_ref: number;
      }
      export interface AdcReportConstructor {
        new(other?: AdcReport): AdcReport;
      }
      export interface Airspeed {
        timestamp: number;
        timestamp_sample: number;
        indicated_airspeed_m_s: number;
        true_airspeed_m_s: number;
        air_temperature_celsius: number;
        confidence: number;
      }
      export interface AirspeedConstructor {
        new(other?: Airspeed): Airspeed;
      }
      export interface AirspeedValidated {
        timestamp: number;
        indicated_airspeed_m_s: number;
        calibrated_airspeed_m_s: number;
        true_airspeed_m_s: number;
        calibrated_ground_minus_wind_m_s: number;
        true_ground_minus_wind_m_s: number;
        airspeed_sensor_measurement_valid: boolean;
        selected_airspeed_index: number;
      }
      export interface AirspeedValidatedConstructor {
        new(other?: AirspeedValidated): AirspeedValidated;
      }
      export interface AirspeedWind {
        timestamp: number;
        timestamp_sample: number;
        windspeed_north: number;
        windspeed_east: number;
        variance_north: number;
        variance_east: number;
        tas_innov: number;
        tas_innov_var: number;
        tas_scale_raw: number;
        tas_scale_raw_var: number;
        tas_scale_validated: number;
        beta_innov: number;
        beta_innov_var: number;
        source: number;
      }
      export interface AirspeedWindConstructor {
        readonly SOURCE_AS_BETA_ONLY: number;
        readonly SOURCE_AS_SENSOR_1: number;
        readonly SOURCE_AS_SENSOR_2: number;
        readonly SOURCE_AS_SENSOR_3: number;
        new(other?: AirspeedWind): AirspeedWind;
      }
      export interface AutotuneAttitudeControlStatus {
        timestamp: number;
        coeff: number[] | Float32Array;
        coeff_var: number[] | Float32Array;
        fitness: number;
        innov: number;
        dt_model: number;
        kc: number;
        ki: number;
        kd: number;
        kff: number;
        att_p: number;
        rate_sp: number[] | Float32Array;
        u_filt: number;
        y_filt: number;
        state: number;
      }
      export interface AutotuneAttitudeControlStatusConstructor {
        readonly STATE_IDLE: number;
        readonly STATE_INIT: number;
        readonly STATE_ROLL: number;
        readonly STATE_ROLL_PAUSE: number;
        readonly STATE_PITCH: number;
        readonly STATE_PITCH_PAUSE: number;
        readonly STATE_YAW: number;
        readonly STATE_YAW_PAUSE: number;
        readonly STATE_VERIFICATION: number;
        readonly STATE_APPLY: number;
        readonly STATE_TEST: number;
        readonly STATE_COMPLETE: number;
        readonly STATE_FAIL: number;
        readonly STATE_WAIT_FOR_DISARM: number;
        new(other?: AutotuneAttitudeControlStatus): AutotuneAttitudeControlStatus;
      }
      export interface BatteryStatus {
        timestamp: number;
        connected: boolean;
        voltage_v: number;
        voltage_filtered_v: number;
        current_a: number;
        current_filtered_a: number;
        current_average_a: number;
        discharged_mah: number;
        remaining: number;
        scale: number;
        time_remaining_s: number;
        temperature: number;
        cell_count: number;
        source: number;
        priority: number;
        capacity: number;
        cycle_count: number;
        average_time_to_empty: number;
        serial_number: number;
        manufacture_date: number;
        state_of_health: number;
        max_error: number;
        id: number;
        interface_error: number;
        voltage_cell_v: number[] | Float32Array;
        max_cell_voltage_delta: number;
        is_powering_off: boolean;
        is_required: boolean;
        faults: number;
        custom_faults: number;
        warning: number;
        mode: number;
        average_power: number;
        available_energy: number;
        full_charge_capacity_wh: number;
        remaining_capacity_wh: number;
        design_capacity: number;
        average_time_to_full: number;
        over_discharge_count: number;
        nominal_voltage: number;
      }
      export interface BatteryStatusConstructor {
        readonly BATTERY_SOURCE_POWER_MODULE: number;
        readonly BATTERY_SOURCE_EXTERNAL: number;
        readonly BATTERY_SOURCE_ESCS: number;
        readonly BATTERY_WARNING_NONE: number;
        readonly BATTERY_WARNING_LOW: number;
        readonly BATTERY_WARNING_CRITICAL: number;
        readonly BATTERY_WARNING_EMERGENCY: number;
        readonly BATTERY_WARNING_FAILED: number;
        readonly BATTERY_STATE_UNHEALTHY: number;
        readonly BATTERY_STATE_CHARGING: number;
        readonly BATTERY_FAULT_DEEP_DISCHARGE: number;
        readonly BATTERY_FAULT_SPIKES: number;
        readonly BATTERY_FAULT_CELL_FAIL: number;
        readonly BATTERY_FAULT_OVER_CURRENT: number;
        readonly BATTERY_FAULT_OVER_TEMPERATURE: number;
        readonly BATTERY_FAULT_UNDER_TEMPERATURE: number;
        readonly BATTERY_FAULT_INCOMPATIBLE_VOLTAGE: number;
        readonly BATTERY_FAULT_INCOMPATIBLE_FIRMWARE: number;
        readonly BATTERY_FAULT_INCOMPATIBLE_MODEL: number;
        readonly BATTERY_FAULT_HARDWARE_FAILURE: number;
        readonly BATTERY_WARNING_OVER_TEMPERATURE: number;
        readonly BATTERY_FAULT_COUNT: number;
        readonly BATTERY_MODE_UNKNOWN: number;
        readonly BATTERY_MODE_AUTO_DISCHARGING: number;
        readonly BATTERY_MODE_HOT_SWAP: number;
        readonly BATTERY_MODE_COUNT: number;
        readonly MAX_INSTANCES: number;
        new(other?: BatteryStatus): BatteryStatus;
      }
      export interface ButtonEvent {
        timestamp: number;
        triggered: boolean;
      }
      export interface ButtonEventConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: ButtonEvent): ButtonEvent;
      }
      export interface CameraCapture {
        timestamp: number;
        timestamp_utc: number;
        seq: number;
        lat: number;
        lon: number;
        alt: number;
        ground_distance: number;
        q: number[] | Float32Array;
        result: number;
      }
      export interface CameraCaptureConstructor {
        new(other?: CameraCapture): CameraCapture;
      }
      export interface CameraStatus {
        timestamp: number;
        active_sys_id: number;
        active_comp_id: number;
      }
      export interface CameraStatusConstructor {
        new(other?: CameraStatus): CameraStatus;
      }
      export interface CameraTrigger {
        timestamp: number;
        timestamp_utc: number;
        seq: number;
        feedback: boolean;
      }
      export interface CameraTriggerConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: CameraTrigger): CameraTrigger;
      }
      export interface CellularStatus {
        timestamp: number;
        status: number;
        failure_reason: number;
        type: number;
        quality: number;
        mcc: number;
        mnc: number;
        lac: number;
      }
      export interface CellularStatusConstructor {
        readonly CELLULAR_STATUS_FLAG_UNKNOWN: number;
        readonly CELLULAR_STATUS_FLAG_FAILED: number;
        readonly CELLULAR_STATUS_FLAG_INITIALIZING: number;
        readonly CELLULAR_STATUS_FLAG_LOCKED: number;
        readonly CELLULAR_STATUS_FLAG_DISABLED: number;
        readonly CELLULAR_STATUS_FLAG_DISABLING: number;
        readonly CELLULAR_STATUS_FLAG_ENABLING: number;
        readonly CELLULAR_STATUS_FLAG_ENABLED: number;
        readonly CELLULAR_STATUS_FLAG_SEARCHING: number;
        readonly CELLULAR_STATUS_FLAG_REGISTERED: number;
        readonly CELLULAR_STATUS_FLAG_DISCONNECTING: number;
        readonly CELLULAR_STATUS_FLAG_CONNECTING: number;
        readonly CELLULAR_STATUS_FLAG_CONNECTED: number;
        readonly CELLULAR_NETWORK_FAILED_REASON_NONE: number;
        readonly CELLULAR_NETWORK_FAILED_REASON_UNKNOWN: number;
        readonly CELLULAR_NETWORK_FAILED_REASON_SIM_MISSING: number;
        readonly CELLULAR_NETWORK_FAILED_REASON_SIM_ERROR: number;
        new(other?: CellularStatus): CellularStatus;
      }
      export interface CollisionConstraints {
        timestamp: number;
        original_setpoint: number[] | Float32Array;
        adapted_setpoint: number[] | Float32Array;
      }
      export interface CollisionConstraintsConstructor {
        new(other?: CollisionConstraints): CollisionConstraints;
      }
      export interface CollisionReport {
        timestamp: number;
        src: number;
        id: number;
        action: number;
        threat_level: number;
        time_to_minimum_delta: number;
        altitude_minimum_delta: number;
        horizontal_minimum_delta: number;
      }
      export interface CollisionReportConstructor {
        new(other?: CollisionReport): CollisionReport;
      }
      export interface ControlAllocatorStatus {
        timestamp: number;
        torque_setpoint_achieved: boolean;
        unallocated_torque: number[] | Float32Array;
        thrust_setpoint_achieved: boolean;
        unallocated_thrust: number[] | Float32Array;
        actuator_saturation: number[] | Int8Array;
        handled_motor_failure_mask: number;
      }
      export interface ControlAllocatorStatusConstructor {
        readonly ACTUATOR_SATURATION_OK: number;
        readonly ACTUATOR_SATURATION_UPPER_DYN: number;
        readonly ACTUATOR_SATURATION_UPPER: number;
        readonly ACTUATOR_SATURATION_LOWER_DYN: number;
        readonly ACTUATOR_SATURATION_LOWER: number;
        new(other?: ControlAllocatorStatus): ControlAllocatorStatus;
      }
      export interface Cpuload {
        timestamp: number;
        load: number;
        ram_usage: number;
      }
      export interface CpuloadConstructor {
        new(other?: Cpuload): Cpuload;
      }
      export interface DebugArray {
        timestamp: number;
        id: number;
        name: number[] | Int8Array;
        data: number[] | Float32Array;
      }
      export interface DebugArrayConstructor {
        readonly ARRAY_SIZE: number;
        new(other?: DebugArray): DebugArray;
      }
      export interface DebugKeyValue {
        timestamp: number;
        key: number[] | Int8Array;
        value: number;
      }
      export interface DebugKeyValueConstructor {
        new(other?: DebugKeyValue): DebugKeyValue;
      }
      export interface DebugValue {
        timestamp: number;
        ind: number;
        value: number;
      }
      export interface DebugValueConstructor {
        new(other?: DebugValue): DebugValue;
      }
      export interface DebugVect {
        timestamp: number;
        name: number[] | Int8Array;
        x: number;
        y: number;
        z: number;
      }
      export interface DebugVectConstructor {
        new(other?: DebugVect): DebugVect;
      }
      export interface DifferentialPressure {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        differential_pressure_pa: number;
        temperature: number;
        error_count: number;
      }
      export interface DifferentialPressureConstructor {
        new(other?: DifferentialPressure): DifferentialPressure;
      }
      export interface DistanceSensor {
        timestamp: number;
        device_id: number;
        min_distance: number;
        max_distance: number;
        current_distance: number;
        variance: number;
        signal_quality: number;
        type: number;
        h_fov: number;
        v_fov: number;
        q: number[] | Float32Array;
        orientation: number;
      }
      export interface DistanceSensorConstructor {
        readonly MAV_DISTANCE_SENSOR_LASER: number;
        readonly MAV_DISTANCE_SENSOR_ULTRASOUND: number;
        readonly MAV_DISTANCE_SENSOR_INFRARED: number;
        readonly MAV_DISTANCE_SENSOR_RADAR: number;
        readonly ROTATION_YAW_0: number;
        readonly ROTATION_YAW_45: number;
        readonly ROTATION_YAW_90: number;
        readonly ROTATION_YAW_135: number;
        readonly ROTATION_YAW_180: number;
        readonly ROTATION_YAW_225: number;
        readonly ROTATION_YAW_270: number;
        readonly ROTATION_YAW_315: number;
        readonly ROTATION_FORWARD_FACING: number;
        readonly ROTATION_RIGHT_FACING: number;
        readonly ROTATION_BACKWARD_FACING: number;
        readonly ROTATION_LEFT_FACING: number;
        readonly ROTATION_UPWARD_FACING: number;
        readonly ROTATION_DOWNWARD_FACING: number;
        readonly ROTATION_CUSTOM: number;
        new(other?: DistanceSensor): DistanceSensor;
      }
      export interface Ekf2Timestamps {
        timestamp: number;
        airspeed_timestamp_rel: number;
        distance_sensor_timestamp_rel: number;
        optical_flow_timestamp_rel: number;
        vehicle_air_data_timestamp_rel: number;
        vehicle_magnetometer_timestamp_rel: number;
        visual_odometry_timestamp_rel: number;
      }
      export interface Ekf2TimestampsConstructor {
        readonly RELATIVE_TIMESTAMP_INVALID: number;
        new(other?: Ekf2Timestamps): Ekf2Timestamps;
      }
      export interface EscReport {
        timestamp: number;
        esc_errorcount: number;
        esc_rpm: number;
        esc_voltage: number;
        esc_current: number;
        esc_temperature: number;
        esc_address: number;
        esc_cmdcount: number;
        esc_state: number;
        actuator_function: number;
        failures: number;
        esc_power: number;
      }
      export interface EscReportConstructor {
        readonly FAILURE_OVER_CURRENT: number;
        readonly FAILURE_OVER_VOLTAGE: number;
        readonly FAILURE_MOTOR_OVER_TEMPERATURE: number;
        readonly FAILURE_OVER_RPM: number;
        readonly FAILURE_INCONSISTENT_CMD: number;
        readonly FAILURE_MOTOR_STUCK: number;
        readonly FAILURE_GENERIC: number;
        readonly FAILURE_MOTOR_WARN_TEMPERATURE: number;
        readonly FAILURE_WARN_ESC_TEMPERATURE: number;
        readonly FAILURE_OVER_ESC_TEMPERATURE: number;
        readonly ESC_FAILURE_COUNT: number;
        new(other?: EscReport): EscReport;
      }
      export interface EscStatus {
        timestamp: number;
        counter: number;
        esc_count: number;
        esc_connectiontype: number;
        esc_online_flags: number;
        esc_armed_flags: number;
        esc: px4_msgs.msg.EscReport[];
      }
      export interface EscStatusConstructor {
        readonly CONNECTED_ESC_MAX: number;
        readonly ESC_CONNECTION_TYPE_PPM: number;
        readonly ESC_CONNECTION_TYPE_SERIAL: number;
        readonly ESC_CONNECTION_TYPE_ONESHOT: number;
        readonly ESC_CONNECTION_TYPE_I2C: number;
        readonly ESC_CONNECTION_TYPE_CAN: number;
        readonly ESC_CONNECTION_TYPE_DSHOT: number;
        new(other?: EscStatus): EscStatus;
      }
      export interface EstimatorAidSource1d {
        timestamp: number;
        timestamp_sample: number;
        estimator_instance: number;
        device_id: number;
        time_last_fuse: number;
        observation: number;
        observation_variance: number;
        innovation: number;
        innovation_variance: number;
        test_ratio: number;
        fusion_enabled: boolean;
        innovation_rejected: boolean;
        fused: boolean;
      }
      export interface EstimatorAidSource1dConstructor {
        new(other?: EstimatorAidSource1d): EstimatorAidSource1d;
      }
      export interface EstimatorAidSource2d {
        timestamp: number;
        timestamp_sample: number;
        estimator_instance: number;
        device_id: number;
        time_last_fuse: number;
        observation: number[] | Float32Array;
        observation_variance: number[] | Float32Array;
        innovation: number[] | Float32Array;
        innovation_variance: number[] | Float32Array;
        test_ratio: number[] | Float32Array;
        fusion_enabled: boolean;
        innovation_rejected: boolean;
        fused: boolean;
      }
      export interface EstimatorAidSource2dConstructor {
        new(other?: EstimatorAidSource2d): EstimatorAidSource2d;
      }
      export interface EstimatorAidSource3d {
        timestamp: number;
        timestamp_sample: number;
        estimator_instance: number;
        device_id: number;
        time_last_fuse: number;
        observation: number[] | Float32Array;
        observation_variance: number[] | Float32Array;
        innovation: number[] | Float32Array;
        innovation_variance: number[] | Float32Array;
        test_ratio: number[] | Float32Array;
        fusion_enabled: boolean;
        innovation_rejected: boolean;
        fused: boolean;
      }
      export interface EstimatorAidSource3dConstructor {
        new(other?: EstimatorAidSource3d): EstimatorAidSource3d;
      }
      export interface EstimatorBias {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        bias: number;
        bias_var: number;
        innov: number;
        innov_var: number;
        innov_test_ratio: number;
      }
      export interface EstimatorBiasConstructor {
        new(other?: EstimatorBias): EstimatorBias;
      }
      export interface EstimatorBias3d {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        bias: number[] | Float32Array;
        bias_var: number[] | Float32Array;
        innov: number[] | Float32Array;
        innov_var: number[] | Float32Array;
        innov_test_ratio: number[] | Float32Array;
      }
      export interface EstimatorBias3dConstructor {
        new(other?: EstimatorBias3d): EstimatorBias3d;
      }
      export interface EstimatorEventFlags {
        timestamp: number;
        timestamp_sample: number;
        information_event_changes: number;
        gps_checks_passed: boolean;
        reset_vel_to_gps: boolean;
        reset_vel_to_flow: boolean;
        reset_vel_to_vision: boolean;
        reset_vel_to_zero: boolean;
        reset_pos_to_last_known: boolean;
        reset_pos_to_gps: boolean;
        reset_pos_to_vision: boolean;
        starting_gps_fusion: boolean;
        starting_vision_pos_fusion: boolean;
        starting_vision_vel_fusion: boolean;
        starting_vision_yaw_fusion: boolean;
        yaw_aligned_to_imu_gps: boolean;
        reset_hgt_to_baro: boolean;
        reset_hgt_to_gps: boolean;
        reset_hgt_to_rng: boolean;
        reset_hgt_to_ev: boolean;
        warning_event_changes: number;
        gps_quality_poor: boolean;
        gps_fusion_timout: boolean;
        gps_data_stopped: boolean;
        gps_data_stopped_using_alternate: boolean;
        height_sensor_timeout: boolean;
        stopping_navigation: boolean;
        invalid_accel_bias_cov_reset: boolean;
        bad_yaw_using_gps_course: boolean;
        stopping_mag_use: boolean;
        vision_data_stopped: boolean;
        emergency_yaw_reset_mag_stopped: boolean;
        emergency_yaw_reset_gps_yaw_stopped: boolean;
      }
      export interface EstimatorEventFlagsConstructor {
        new(other?: EstimatorEventFlags): EstimatorEventFlags;
      }
      export interface EstimatorGpsStatus {
        timestamp: number;
        timestamp_sample: number;
        checks_passed: boolean;
        check_fail_gps_fix: boolean;
        check_fail_min_sat_count: boolean;
        check_fail_max_pdop: boolean;
        check_fail_max_horz_err: boolean;
        check_fail_max_vert_err: boolean;
        check_fail_max_spd_err: boolean;
        check_fail_max_horz_drift: boolean;
        check_fail_max_vert_drift: boolean;
        check_fail_max_horz_spd_err: boolean;
        check_fail_max_vert_spd_err: boolean;
        position_drift_rate_horizontal_m_s: number;
        position_drift_rate_vertical_m_s: number;
        filtered_horizontal_speed_m_s: number;
      }
      export interface EstimatorGpsStatusConstructor {
        new(other?: EstimatorGpsStatus): EstimatorGpsStatus;
      }
      export interface EstimatorInnovations {
        timestamp: number;
        timestamp_sample: number;
        gps_hvel: number[] | Float32Array;
        gps_vvel: number;
        gps_hpos: number[] | Float32Array;
        gps_vpos: number;
        ev_hvel: number[] | Float32Array;
        ev_vvel: number;
        ev_hpos: number[] | Float32Array;
        ev_vpos: number;
        rng_vpos: number;
        baro_vpos: number;
        aux_hvel: number[] | Float32Array;
        aux_vvel: number;
        flow: number[] | Float32Array;
        terr_flow: number[] | Float32Array;
        heading: number;
        mag_field: number[] | Float32Array;
        gravity: number[] | Float32Array;
        drag: number[] | Float32Array;
        airspeed: number;
        beta: number;
        hagl: number;
        hagl_rate: number;
      }
      export interface EstimatorInnovationsConstructor {
        new(other?: EstimatorInnovations): EstimatorInnovations;
      }
      export interface EstimatorSelectorStatus {
        timestamp: number;
        primary_instance: number;
        instances_available: number;
        instance_changed_count: number;
        last_instance_change: number;
        accel_device_id: number;
        baro_device_id: number;
        gyro_device_id: number;
        mag_device_id: number;
        combined_test_ratio: number[] | Float32Array;
        relative_test_ratio: number[] | Float32Array;
        healthy: boolean[];
        accumulated_gyro_error: number[] | Float32Array;
        accumulated_accel_error: number[] | Float32Array;
        gyro_fault_detected: boolean;
        accel_fault_detected: boolean;
      }
      export interface EstimatorSelectorStatusConstructor {
        new(other?: EstimatorSelectorStatus): EstimatorSelectorStatus;
      }
      export interface EstimatorSensorBias {
        timestamp: number;
        timestamp_sample: number;
        gyro_device_id: number;
        gyro_bias: number[] | Float32Array;
        gyro_bias_limit: number;
        gyro_bias_variance: number[] | Float32Array;
        gyro_bias_valid: boolean;
        gyro_bias_stable: boolean;
        accel_device_id: number;
        accel_bias: number[] | Float32Array;
        accel_bias_limit: number;
        accel_bias_variance: number[] | Float32Array;
        accel_bias_valid: boolean;
        accel_bias_stable: boolean;
        mag_device_id: number;
        mag_bias: number[] | Float32Array;
        mag_bias_limit: number;
        mag_bias_variance: number[] | Float32Array;
        mag_bias_valid: boolean;
        mag_bias_stable: boolean;
      }
      export interface EstimatorSensorBiasConstructor {
        new(other?: EstimatorSensorBias): EstimatorSensorBias;
      }
      export interface EstimatorStates {
        timestamp: number;
        timestamp_sample: number;
        states: number[] | Float32Array;
        n_states: number;
        covariances: number[] | Float32Array;
      }
      export interface EstimatorStatesConstructor {
        new(other?: EstimatorStates): EstimatorStates;
      }
      export interface EstimatorStatus {
        timestamp: number;
        timestamp_sample: number;
        output_tracking_error: number[] | Float32Array;
        gps_check_fail_flags: number;
        control_mode_flags: number;
        filter_fault_flags: number;
        pos_horiz_accuracy: number;
        pos_vert_accuracy: number;
        innovation_check_flags: number;
        mag_test_ratio: number;
        vel_test_ratio: number;
        pos_test_ratio: number;
        hgt_test_ratio: number;
        tas_test_ratio: number;
        hagl_test_ratio: number;
        beta_test_ratio: number;
        solution_status_flags: number;
        reset_count_vel_ne: number;
        reset_count_vel_d: number;
        reset_count_pos_ne: number;
        reset_count_pod_d: number;
        reset_count_quat: number;
        time_slip: number;
        pre_flt_fail_innov_heading: boolean;
        pre_flt_fail_innov_vel_horiz: boolean;
        pre_flt_fail_innov_vel_vert: boolean;
        pre_flt_fail_innov_height: boolean;
        pre_flt_fail_mag_field_disturbed: boolean;
        accel_device_id: number;
        gyro_device_id: number;
        baro_device_id: number;
        mag_device_id: number;
        health_flags: number;
        timeout_flags: number;
      }
      export interface EstimatorStatusConstructor {
        readonly GPS_CHECK_FAIL_GPS_FIX: number;
        readonly GPS_CHECK_FAIL_MIN_SAT_COUNT: number;
        readonly GPS_CHECK_FAIL_MAX_PDOP: number;
        readonly GPS_CHECK_FAIL_MAX_HORZ_ERR: number;
        readonly GPS_CHECK_FAIL_MAX_VERT_ERR: number;
        readonly GPS_CHECK_FAIL_MAX_SPD_ERR: number;
        readonly GPS_CHECK_FAIL_MAX_HORZ_DRIFT: number;
        readonly GPS_CHECK_FAIL_MAX_VERT_DRIFT: number;
        readonly GPS_CHECK_FAIL_MAX_HORZ_SPD_ERR: number;
        readonly GPS_CHECK_FAIL_MAX_VERT_SPD_ERR: number;
        readonly CS_TILT_ALIGN: number;
        readonly CS_YAW_ALIGN: number;
        readonly CS_GPS: number;
        readonly CS_OPT_FLOW: number;
        readonly CS_MAG_HDG: number;
        readonly CS_MAG_3D: number;
        readonly CS_MAG_DEC: number;
        readonly CS_IN_AIR: number;
        readonly CS_WIND: number;
        readonly CS_BARO_HGT: number;
        readonly CS_RNG_HGT: number;
        readonly CS_GPS_HGT: number;
        readonly CS_EV_POS: number;
        readonly CS_EV_YAW: number;
        readonly CS_EV_HGT: number;
        readonly CS_BETA: number;
        readonly CS_MAG_FIELD: number;
        readonly CS_FIXED_WING: number;
        readonly CS_MAG_FAULT: number;
        readonly CS_ASPD: number;
        readonly CS_GND_EFFECT: number;
        readonly CS_RNG_STUCK: number;
        readonly CS_GPS_YAW: number;
        readonly CS_MAG_ALIGNED: number;
        readonly CS_EV_VEL: number;
        readonly CS_SYNTHETIC_MAG_Z: number;
        readonly CS_VEHICLE_AT_REST: number;
        readonly CS_GPS_YAW_FAULT: number;
        readonly CS_RNG_FAULT: number;
        new(other?: EstimatorStatus): EstimatorStatus;
      }
      export interface EstimatorStatusFlags {
        timestamp: number;
        timestamp_sample: number;
        control_status_changes: number;
        cs_tilt_align: boolean;
        cs_yaw_align: boolean;
        cs_gps: boolean;
        cs_opt_flow: boolean;
        cs_mag_hdg: boolean;
        cs_mag_3d: boolean;
        cs_mag_dec: boolean;
        cs_in_air: boolean;
        cs_wind: boolean;
        cs_baro_hgt: boolean;
        cs_rng_hgt: boolean;
        cs_gps_hgt: boolean;
        cs_ev_pos: boolean;
        cs_ev_yaw: boolean;
        cs_ev_hgt: boolean;
        cs_fuse_beta: boolean;
        cs_mag_field_disturbed: boolean;
        cs_fixed_wing: boolean;
        cs_mag_fault: boolean;
        cs_fuse_aspd: boolean;
        cs_gnd_effect: boolean;
        cs_rng_stuck: boolean;
        cs_gps_yaw: boolean;
        cs_mag_aligned_in_flight: boolean;
        cs_ev_vel: boolean;
        cs_synthetic_mag_z: boolean;
        cs_vehicle_at_rest: boolean;
        cs_gps_yaw_fault: boolean;
        cs_rng_fault: boolean;
        cs_inertial_dead_reckoning: boolean;
        cs_wind_dead_reckoning: boolean;
        cs_rng_kin_consistent: boolean;
        cs_fake_pos: boolean;
        cs_fake_hgt: boolean;
        cs_gravity_vector: boolean;
        fault_status_changes: number;
        fs_bad_mag_x: boolean;
        fs_bad_mag_y: boolean;
        fs_bad_mag_z: boolean;
        fs_bad_hdg: boolean;
        fs_bad_mag_decl: boolean;
        fs_bad_airspeed: boolean;
        fs_bad_sideslip: boolean;
        fs_bad_optflow_x: boolean;
        fs_bad_optflow_y: boolean;
        fs_bad_vel_n: boolean;
        fs_bad_vel_e: boolean;
        fs_bad_vel_d: boolean;
        fs_bad_pos_n: boolean;
        fs_bad_pos_e: boolean;
        fs_bad_pos_d: boolean;
        fs_bad_acc_bias: boolean;
        fs_bad_acc_vertical: boolean;
        fs_bad_acc_clipping: boolean;
        innovation_fault_status_changes: number;
        reject_hor_vel: boolean;
        reject_ver_vel: boolean;
        reject_hor_pos: boolean;
        reject_ver_pos: boolean;
        reject_yaw: boolean;
        reject_airspeed: boolean;
        reject_sideslip: boolean;
        reject_hagl: boolean;
        reject_optflow_x: boolean;
        reject_optflow_y: boolean;
      }
      export interface EstimatorStatusFlagsConstructor {
        new(other?: EstimatorStatusFlags): EstimatorStatusFlags;
      }
      export interface Event {
        timestamp: number;
        id: number;
        event_sequence: number;
        arguments: number[] | Uint8Array;
        log_levels: number;
      }
      export interface EventConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: Event): Event;
      }
      export interface FailsafeFlags {
        timestamp: number;
        mode_req_angular_velocity: number;
        mode_req_attitude: number;
        mode_req_local_alt: number;
        mode_req_local_position: number;
        mode_req_local_position_relaxed: number;
        mode_req_global_position: number;
        mode_req_mission: number;
        mode_req_offboard_signal: number;
        mode_req_home_position: number;
        mode_req_wind_and_flight_time_compliance: number;
        mode_req_prevent_arming: number;
        mode_req_manual_control: number;
        mode_req_other: number;
        angular_velocity_invalid: boolean;
        attitude_invalid: boolean;
        local_altitude_invalid: boolean;
        local_position_invalid: boolean;
        local_position_invalid_relaxed: boolean;
        local_velocity_invalid: boolean;
        global_position_invalid: boolean;
        auto_mission_missing: boolean;
        offboard_control_signal_lost: boolean;
        home_position_invalid: boolean;
        manual_control_signal_lost: boolean;
        gcs_connection_lost: boolean;
        battery_warning: number;
        battery_low_remaining_time: boolean;
        battery_unhealthy: boolean;
        primary_geofence_breached: boolean;
        mission_failure: boolean;
        vtol_fixed_wing_system_failure: boolean;
        wind_limit_exceeded: boolean;
        flight_time_limit_exceeded: boolean;
        local_position_accuracy_low: boolean;
        fd_critical_failure: boolean;
        fd_esc_arming_failure: boolean;
        fd_imbalanced_prop: boolean;
        fd_motor_failure: boolean;
      }
      export interface FailsafeFlagsConstructor {
        new(other?: FailsafeFlags): FailsafeFlags;
      }
      export interface FailureDetectorStatus {
        timestamp: number;
        fd_roll: boolean;
        fd_pitch: boolean;
        fd_alt: boolean;
        fd_ext: boolean;
        fd_arm_escs: boolean;
        fd_battery: boolean;
        fd_imbalanced_prop: boolean;
        fd_motor: boolean;
        imbalanced_prop_metric: number;
        motor_failure_mask: number;
      }
      export interface FailureDetectorStatusConstructor {
        new(other?: FailureDetectorStatus): FailureDetectorStatus;
      }
      export interface FollowTarget {
        timestamp: number;
        lat: number;
        lon: number;
        alt: number;
        vy: number;
        vx: number;
        vz: number;
        est_cap: number;
      }
      export interface FollowTargetConstructor {
        new(other?: FollowTarget): FollowTarget;
      }
      export interface FollowTargetEstimator {
        timestamp: number;
        last_filter_reset_timestamp: number;
        valid: boolean;
        stale: boolean;
        lat_est: number;
        lon_est: number;
        alt_est: number;
        pos_est: number[] | Float32Array;
        vel_est: number[] | Float32Array;
        acc_est: number[] | Float32Array;
        prediction_count: number;
        fusion_count: number;
      }
      export interface FollowTargetEstimatorConstructor {
        new(other?: FollowTargetEstimator): FollowTargetEstimator;
      }
      export interface FollowTargetStatus {
        timestamp: number;
        tracked_target_course: number;
        follow_angle: number;
        orbit_angle_setpoint: number;
        angular_rate_setpoint: number;
        desired_position_raw: number[] | Float32Array;
        in_emergency_ascent: boolean;
        gimbal_pitch: number;
      }
      export interface FollowTargetStatusConstructor {
        new(other?: FollowTargetStatus): FollowTargetStatus;
      }
      export interface GeneratorStatus {
        timestamp: number;
        status: number;
        battery_current: number;
        load_current: number;
        power_generated: number;
        bus_voltage: number;
        bat_current_setpoint: number;
        runtime: number;
        time_until_maintenance: number;
        generator_speed: number;
        rectifier_temperature: number;
        generator_temperature: number;
      }
      export interface GeneratorStatusConstructor {
        readonly STATUS_FLAG_OFF: number;
        readonly STATUS_FLAG_READY: number;
        readonly STATUS_FLAG_GENERATING: number;
        readonly STATUS_FLAG_CHARGING: number;
        readonly STATUS_FLAG_REDUCED_POWER: number;
        readonly STATUS_FLAG_MAXPOWER: number;
        readonly STATUS_FLAG_OVERTEMP_WARNING: number;
        readonly STATUS_FLAG_OVERTEMP_FAULT: number;
        readonly STATUS_FLAG_ELECTRONICS_OVERTEMP_WARNING: number;
        readonly STATUS_FLAG_ELECTRONICS_OVERTEMP_FAULT: number;
        readonly STATUS_FLAG_ELECTRONICS_FAULT: number;
        readonly STATUS_FLAG_POWERSOURCE_FAULT: number;
        readonly STATUS_FLAG_COMMUNICATION_WARNING: number;
        readonly STATUS_FLAG_COOLING_WARNING: number;
        readonly STATUS_FLAG_POWER_RAIL_FAULT: number;
        readonly STATUS_FLAG_OVERCURRENT_FAULT: number;
        readonly STATUS_FLAG_BATTERY_OVERCHARGE_CURRENT_FAULT: number;
        readonly STATUS_FLAG_OVERVOLTAGE_FAULT: number;
        readonly STATUS_FLAG_BATTERY_UNDERVOLT_FAULT: number;
        readonly STATUS_FLAG_START_INHIBITED: number;
        readonly STATUS_FLAG_MAINTENANCE_REQUIRED: number;
        readonly STATUS_FLAG_WARMING_UP: number;
        readonly STATUS_FLAG_IDLE: number;
        new(other?: GeneratorStatus): GeneratorStatus;
      }
      export interface GeofenceResult {
        timestamp: number;
        geofence_violation_reason: number;
        primary_geofence_breached: boolean;
        primary_geofence_action: number;
        home_required: boolean;
      }
      export interface GeofenceResultConstructor {
        readonly GF_ACTION_NONE: number;
        readonly GF_ACTION_WARN: number;
        readonly GF_ACTION_LOITER: number;
        readonly GF_ACTION_RTL: number;
        readonly GF_ACTION_TERMINATE: number;
        readonly GF_ACTION_LAND: number;
        new(other?: GeofenceResult): GeofenceResult;
      }
      export interface GimbalControls {
        timestamp: number;
        timestamp_sample: number;
        control: number[] | Float32Array;
      }
      export interface GimbalControlsConstructor {
        readonly INDEX_ROLL: number;
        readonly INDEX_PITCH: number;
        readonly INDEX_YAW: number;
        new(other?: GimbalControls): GimbalControls;
      }
      export interface GimbalDeviceAttitudeStatus {
        timestamp: number;
        target_system: number;
        target_component: number;
        device_flags: number;
        q: number[] | Float32Array;
        angular_velocity_x: number;
        angular_velocity_y: number;
        angular_velocity_z: number;
        failure_flags: number;
        received_from_mavlink: boolean;
      }
      export interface GimbalDeviceAttitudeStatusConstructor {
        readonly DEVICE_FLAGS_RETRACT: number;
        readonly DEVICE_FLAGS_NEUTRAL: number;
        readonly DEVICE_FLAGS_ROLL_LOCK: number;
        readonly DEVICE_FLAGS_PITCH_LOCK: number;
        readonly DEVICE_FLAGS_YAW_LOCK: number;
        new(other?: GimbalDeviceAttitudeStatus): GimbalDeviceAttitudeStatus;
      }
      export interface GimbalDeviceInformation {
        timestamp: number;
        vendor_name: number[] | Uint8Array;
        model_name: number[] | Uint8Array;
        custom_name: number[] | Uint8Array;
        firmware_version: number;
        hardware_version: number;
        uid: number;
        cap_flags: number;
        custom_cap_flags: number;
        roll_min: number;
        roll_max: number;
        pitch_min: number;
        pitch_max: number;
        yaw_min: number;
        yaw_max: number;
        gimbal_device_compid: number;
      }
      export interface GimbalDeviceInformationConstructor {
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_RETRACT: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_NEUTRAL: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_AXIS: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_FOLLOW: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_ROLL_LOCK: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_AXIS: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_FOLLOW: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_PITCH_LOCK: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_AXIS: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_FOLLOW: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_HAS_YAW_LOCK: number;
        readonly GIMBAL_DEVICE_CAP_FLAGS_SUPPORTS_INFINITE_YAW: number;
        new(other?: GimbalDeviceInformation): GimbalDeviceInformation;
      }
      export interface GimbalDeviceSetAttitude {
        timestamp: number;
        target_system: number;
        target_component: number;
        flags: number;
        q: number[] | Float32Array;
        angular_velocity_x: number;
        angular_velocity_y: number;
        angular_velocity_z: number;
      }
      export interface GimbalDeviceSetAttitudeConstructor {
        readonly GIMBAL_DEVICE_FLAGS_RETRACT: number;
        readonly GIMBAL_DEVICE_FLAGS_NEUTRAL: number;
        readonly GIMBAL_DEVICE_FLAGS_ROLL_LOCK: number;
        readonly GIMBAL_DEVICE_FLAGS_PITCH_LOCK: number;
        readonly GIMBAL_DEVICE_FLAGS_YAW_LOCK: number;
        new(other?: GimbalDeviceSetAttitude): GimbalDeviceSetAttitude;
      }
      export interface GimbalManagerInformation {
        timestamp: number;
        cap_flags: number;
        gimbal_device_id: number;
        roll_min: number;
        roll_max: number;
        pitch_min: number;
        pitch_max: number;
        yaw_min: number;
        yaw_max: number;
      }
      export interface GimbalManagerInformationConstructor {
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL: number;
        readonly GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL: number;
        new(other?: GimbalManagerInformation): GimbalManagerInformation;
      }
      export interface GimbalManagerSetAttitude {
        timestamp: number;
        origin_sysid: number;
        origin_compid: number;
        target_system: number;
        target_component: number;
        flags: number;
        gimbal_device_id: number;
        q: number[] | Float32Array;
        angular_velocity_x: number;
        angular_velocity_y: number;
        angular_velocity_z: number;
      }
      export interface GimbalManagerSetAttitudeConstructor {
        readonly GIMBAL_MANAGER_FLAGS_RETRACT: number;
        readonly GIMBAL_MANAGER_FLAGS_NEUTRAL: number;
        readonly GIMBAL_MANAGER_FLAGS_ROLL_LOCK: number;
        readonly GIMBAL_MANAGER_FLAGS_PITCH_LOCK: number;
        readonly GIMBAL_MANAGER_FLAGS_YAW_LOCK: number;
        new(other?: GimbalManagerSetAttitude): GimbalManagerSetAttitude;
      }
      export interface GimbalManagerSetManualControl {
        timestamp: number;
        origin_sysid: number;
        origin_compid: number;
        target_system: number;
        target_component: number;
        flags: number;
        gimbal_device_id: number;
        pitch: number;
        yaw: number;
        pitch_rate: number;
        yaw_rate: number;
      }
      export interface GimbalManagerSetManualControlConstructor {
        readonly GIMBAL_MANAGER_FLAGS_RETRACT: number;
        readonly GIMBAL_MANAGER_FLAGS_NEUTRAL: number;
        readonly GIMBAL_MANAGER_FLAGS_ROLL_LOCK: number;
        readonly GIMBAL_MANAGER_FLAGS_PITCH_LOCK: number;
        readonly GIMBAL_MANAGER_FLAGS_YAW_LOCK: number;
        new(other?: GimbalManagerSetManualControl): GimbalManagerSetManualControl;
      }
      export interface GimbalManagerStatus {
        timestamp: number;
        flags: number;
        gimbal_device_id: number;
        primary_control_sysid: number;
        primary_control_compid: number;
        secondary_control_sysid: number;
        secondary_control_compid: number;
      }
      export interface GimbalManagerStatusConstructor {
        new(other?: GimbalManagerStatus): GimbalManagerStatus;
      }
      export interface GpsDump {
        timestamp: number;
        instance: number;
        len: number;
        data: number[] | Uint8Array;
      }
      export interface GpsDumpConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: GpsDump): GpsDump;
      }
      export interface GpsInjectData {
        timestamp: number;
        device_id: number;
        len: number;
        flags: number;
        data: number[] | Uint8Array;
      }
      export interface GpsInjectDataConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        readonly MAX_INSTANCES: number;
        new(other?: GpsInjectData): GpsInjectData;
      }
      export interface Gripper {
        timestamp: number;
        command: number;
      }
      export interface GripperConstructor {
        readonly COMMAND_GRAB: number;
        readonly COMMAND_RELEASE: number;
        new(other?: Gripper): Gripper;
      }
      export interface HealthReport {
        timestamp: number;
        can_arm_mode_flags: number;
        can_run_mode_flags: number;
        health_is_present_flags: number;
        health_warning_flags: number;
        health_error_flags: number;
        arming_check_warning_flags: number;
        arming_check_error_flags: number;
      }
      export interface HealthReportConstructor {
        new(other?: HealthReport): HealthReport;
      }
      export interface HeaterStatus {
        timestamp: number;
        device_id: number;
        heater_on: boolean;
        temperature_target_met: boolean;
        temperature_sensor: number;
        temperature_target: number;
        controller_period_usec: number;
        controller_time_on_usec: number;
        proportional_value: number;
        integrator_value: number;
        feed_forward_value: number;
        mode: number;
      }
      export interface HeaterStatusConstructor {
        readonly MODE_GPIO: number;
        readonly MODE_PX4IO: number;
        new(other?: HeaterStatus): HeaterStatus;
      }
      export interface HomePosition {
        timestamp: number;
        lat: number;
        lon: number;
        alt: number;
        x: number;
        y: number;
        z: number;
        yaw: number;
        valid_alt: boolean;
        valid_hpos: boolean;
        valid_lpos: boolean;
        manual_home: boolean;
      }
      export interface HomePositionConstructor {
        new(other?: HomePosition): HomePosition;
      }
      export interface HoverThrustEstimate {
        timestamp: number;
        timestamp_sample: number;
        hover_thrust: number;
        hover_thrust_var: number;
        accel_innov: number;
        accel_innov_var: number;
        accel_innov_test_ratio: number;
        accel_noise_var: number;
        valid: boolean;
      }
      export interface HoverThrustEstimateConstructor {
        new(other?: HoverThrustEstimate): HoverThrustEstimate;
      }
      export interface InputRc {
        timestamp: number;
        timestamp_last_signal: number;
        channel_count: number;
        rssi: number;
        rc_failsafe: boolean;
        rc_lost: boolean;
        rc_lost_frame_count: number;
        rc_total_frame_count: number;
        rc_ppm_frame_length: number;
        input_source: number;
        values: number[] | Uint16Array;
        link_quality: number;
        rssi_dbm: number;
      }
      export interface InputRcConstructor {
        readonly RC_INPUT_SOURCE_UNKNOWN: number;
        readonly RC_INPUT_SOURCE_PX4FMU_PPM: number;
        readonly RC_INPUT_SOURCE_PX4IO_PPM: number;
        readonly RC_INPUT_SOURCE_PX4IO_SPEKTRUM: number;
        readonly RC_INPUT_SOURCE_PX4IO_SBUS: number;
        readonly RC_INPUT_SOURCE_PX4IO_ST24: number;
        readonly RC_INPUT_SOURCE_MAVLINK: number;
        readonly RC_INPUT_SOURCE_QURT: number;
        readonly RC_INPUT_SOURCE_PX4FMU_SPEKTRUM: number;
        readonly RC_INPUT_SOURCE_PX4FMU_SBUS: number;
        readonly RC_INPUT_SOURCE_PX4FMU_ST24: number;
        readonly RC_INPUT_SOURCE_PX4FMU_SUMD: number;
        readonly RC_INPUT_SOURCE_PX4FMU_DSM: number;
        readonly RC_INPUT_SOURCE_PX4IO_SUMD: number;
        readonly RC_INPUT_SOURCE_PX4FMU_CRSF: number;
        readonly RC_INPUT_SOURCE_PX4FMU_GHST: number;
        readonly RC_INPUT_MAX_CHANNELS: number;
        readonly RSSI_MAX: number;
        new(other?: InputRc): InputRc;
      }
      export interface InternalCombustionEngineStatus {
        timestamp: number;
        state: number;
        flags: number;
        engine_load_percent: number;
        engine_speed_rpm: number;
        spark_dwell_time_ms: number;
        atmospheric_pressure_kpa: number;
        intake_manifold_pressure_kpa: number;
        intake_manifold_temperature: number;
        coolant_temperature: number;
        oil_pressure: number;
        oil_temperature: number;
        fuel_pressure: number;
        fuel_consumption_rate_cm3pm: number;
        estimated_consumed_fuel_volume_cm3: number;
        throttle_position_percent: number;
        ecu_index: number;
        spark_plug_usage: number;
        ignition_timing_deg: number;
        injection_time_ms: number;
        cylinder_head_temperature: number;
        exhaust_gas_temperature: number;
        lambda_coefficient: number;
      }
      export interface InternalCombustionEngineStatusConstructor {
        readonly STATE_STOPPED: number;
        readonly STATE_STARTING: number;
        readonly STATE_RUNNING: number;
        readonly STATE_FAULT: number;
        readonly FLAG_GENERAL_ERROR: number;
        readonly FLAG_CRANKSHAFT_SENSOR_ERROR_SUPPORTED: number;
        readonly FLAG_CRANKSHAFT_SENSOR_ERROR: number;
        readonly FLAG_TEMPERATURE_SUPPORTED: number;
        readonly FLAG_TEMPERATURE_BELOW_NOMINAL: number;
        readonly FLAG_TEMPERATURE_ABOVE_NOMINAL: number;
        readonly FLAG_TEMPERATURE_OVERHEATING: number;
        readonly FLAG_TEMPERATURE_EGT_ABOVE_NOMINAL: number;
        readonly FLAG_FUEL_PRESSURE_SUPPORTED: number;
        readonly FLAG_FUEL_PRESSURE_BELOW_NOMINAL: number;
        readonly FLAG_FUEL_PRESSURE_ABOVE_NOMINAL: number;
        readonly FLAG_DETONATION_SUPPORTED: number;
        readonly FLAG_DETONATION_OBSERVED: number;
        readonly FLAG_MISFIRE_SUPPORTED: number;
        readonly FLAG_MISFIRE_OBSERVED: number;
        readonly FLAG_OIL_PRESSURE_SUPPORTED: number;
        readonly FLAG_OIL_PRESSURE_BELOW_NOMINAL: number;
        readonly FLAG_OIL_PRESSURE_ABOVE_NOMINAL: number;
        readonly FLAG_DEBRIS_SUPPORTED: number;
        readonly FLAG_DEBRIS_DETECTED: number;
        readonly SPARK_PLUG_SINGLE: number;
        readonly SPARK_PLUG_FIRST_ACTIVE: number;
        readonly SPARK_PLUG_SECOND_ACTIVE: number;
        readonly SPARK_PLUG_BOTH_ACTIVE: number;
        new(other?: InternalCombustionEngineStatus): InternalCombustionEngineStatus;
      }
      export interface IridiumsbdStatus {
        timestamp: number;
        last_heartbeat: number;
        tx_buf_write_index: number;
        rx_buf_read_index: number;
        rx_buf_end_index: number;
        failed_sbd_sessions: number;
        successful_sbd_sessions: number;
        num_tx_buf_reset: number;
        signal_quality: number;
        state: number;
        ring_pending: boolean;
        tx_buf_write_pending: boolean;
        tx_session_pending: boolean;
        rx_read_pending: boolean;
        rx_session_pending: boolean;
      }
      export interface IridiumsbdStatusConstructor {
        new(other?: IridiumsbdStatus): IridiumsbdStatus;
      }
      export interface IrlockReport {
        timestamp: number;
        signature: number;
        pos_x: number;
        pos_y: number;
        size_x: number;
        size_y: number;
      }
      export interface IrlockReportConstructor {
        new(other?: IrlockReport): IrlockReport;
      }
      export interface LandingGear {
        timestamp: number;
        landing_gear: number;
      }
      export interface LandingGearConstructor {
        readonly GEAR_UP: number;
        readonly GEAR_DOWN: number;
        readonly GEAR_KEEP: number;
        new(other?: LandingGear): LandingGear;
      }
      export interface LandingGearWheel {
        timestamp: number;
        normalized_wheel_setpoint: number;
      }
      export interface LandingGearWheelConstructor {
        new(other?: LandingGearWheel): LandingGearWheel;
      }
      export interface LandingTargetInnovations {
        timestamp: number;
        innov_x: number;
        innov_y: number;
        innov_cov_x: number;
        innov_cov_y: number;
      }
      export interface LandingTargetInnovationsConstructor {
        new(other?: LandingTargetInnovations): LandingTargetInnovations;
      }
      export interface LandingTargetPose {
        timestamp: number;
        is_static: boolean;
        rel_pos_valid: boolean;
        rel_vel_valid: boolean;
        x_rel: number;
        y_rel: number;
        z_rel: number;
        vx_rel: number;
        vy_rel: number;
        cov_x_rel: number;
        cov_y_rel: number;
        cov_vx_rel: number;
        cov_vy_rel: number;
        abs_pos_valid: boolean;
        x_abs: number;
        y_abs: number;
        z_abs: number;
      }
      export interface LandingTargetPoseConstructor {
        new(other?: LandingTargetPose): LandingTargetPose;
      }
      export interface LaunchDetectionStatus {
        timestamp: number;
        launch_detection_state: number;
      }
      export interface LaunchDetectionStatusConstructor {
        readonly STATE_WAITING_FOR_LAUNCH: number;
        readonly STATE_LAUNCH_DETECTED_DISABLED_MOTOR: number;
        readonly STATE_FLYING: number;
        new(other?: LaunchDetectionStatus): LaunchDetectionStatus;
      }
      export interface LedControl {
        timestamp: number;
        led_mask: number;
        color: number;
        mode: number;
        num_blinks: number;
        priority: number;
      }
      export interface LedControlConstructor {
        readonly COLOR_OFF: number;
        readonly COLOR_RED: number;
        readonly COLOR_GREEN: number;
        readonly COLOR_BLUE: number;
        readonly COLOR_YELLOW: number;
        readonly COLOR_PURPLE: number;
        readonly COLOR_AMBER: number;
        readonly COLOR_CYAN: number;
        readonly COLOR_WHITE: number;
        readonly MODE_OFF: number;
        readonly MODE_ON: number;
        readonly MODE_DISABLED: number;
        readonly MODE_BLINK_SLOW: number;
        readonly MODE_BLINK_NORMAL: number;
        readonly MODE_BLINK_FAST: number;
        readonly MODE_BREATHE: number;
        readonly MODE_FLASH: number;
        readonly MAX_PRIORITY: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: LedControl): LedControl;
      }
      export interface LogMessage {
        timestamp: number;
        severity: number;
        text: number[] | Int8Array;
      }
      export interface LogMessageConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: LogMessage): LogMessage;
      }
      export interface LoggerStatus {
        timestamp: number;
        type: number;
        backend: number;
        total_written_kb: number;
        write_rate_kb_s: number;
        dropouts: number;
        message_gaps: number;
        buffer_used_bytes: number;
        buffer_size_bytes: number;
        num_messages: number;
      }
      export interface LoggerStatusConstructor {
        readonly LOGGER_TYPE_FULL: number;
        readonly LOGGER_TYPE_MISSION: number;
        readonly BACKEND_FILE: number;
        readonly BACKEND_MAVLINK: number;
        readonly BACKEND_ALL: number;
        new(other?: LoggerStatus): LoggerStatus;
      }
      export interface MagWorkerData {
        timestamp: number;
        timestamp_sample: number;
        done_count: number;
        calibration_points_perside: number;
        calibration_interval_perside_us: number;
        calibration_counter_total: number[] | Uint32Array;
        side_data_collected: boolean[];
        x: number[] | Float32Array;
        y: number[] | Float32Array;
        z: number[] | Float32Array;
      }
      export interface MagWorkerDataConstructor {
        readonly MAX_MAGS: number;
        new(other?: MagWorkerData): MagWorkerData;
      }
      export interface MagnetometerBiasEstimate {
        timestamp: number;
        bias_x: number[] | Float32Array;
        bias_y: number[] | Float32Array;
        bias_z: number[] | Float32Array;
        valid: boolean[];
        stable: boolean[];
      }
      export interface MagnetometerBiasEstimateConstructor {
        new(other?: MagnetometerBiasEstimate): MagnetometerBiasEstimate;
      }
      export interface ManualControlSetpoint {
        timestamp: number;
        timestamp_sample: number;
        valid: boolean;
        data_source: number;
        roll: number;
        pitch: number;
        yaw: number;
        throttle: number;
        flaps: number;
        aux1: number;
        aux2: number;
        aux3: number;
        aux4: number;
        aux5: number;
        aux6: number;
        sticks_moving: boolean;
      }
      export interface ManualControlSetpointConstructor {
        readonly SOURCE_UNKNOWN: number;
        readonly SOURCE_RC: number;
        readonly SOURCE_MAVLINK_0: number;
        readonly SOURCE_MAVLINK_1: number;
        readonly SOURCE_MAVLINK_2: number;
        readonly SOURCE_MAVLINK_3: number;
        readonly SOURCE_MAVLINK_4: number;
        readonly SOURCE_MAVLINK_5: number;
        new(other?: ManualControlSetpoint): ManualControlSetpoint;
      }
      export interface ManualControlSwitches {
        timestamp: number;
        timestamp_sample: number;
        mode_slot: number;
        arm_switch: number;
        return_switch: number;
        loiter_switch: number;
        offboard_switch: number;
        kill_switch: number;
        gear_switch: number;
        transition_switch: number;
        photo_switch: number;
        video_switch: number;
        engage_main_motor_switch: number;
        switch_changes: number;
      }
      export interface ManualControlSwitchesConstructor {
        readonly SWITCH_POS_NONE: number;
        readonly SWITCH_POS_ON: number;
        readonly SWITCH_POS_MIDDLE: number;
        readonly SWITCH_POS_OFF: number;
        readonly MODE_SLOT_NONE: number;
        readonly MODE_SLOT_1: number;
        readonly MODE_SLOT_2: number;
        readonly MODE_SLOT_3: number;
        readonly MODE_SLOT_4: number;
        readonly MODE_SLOT_5: number;
        readonly MODE_SLOT_6: number;
        readonly MODE_SLOT_NUM: number;
        new(other?: ManualControlSwitches): ManualControlSwitches;
      }
      export interface MavlinkLog {
        timestamp: number;
        text: number[] | Int8Array;
        severity: number;
      }
      export interface MavlinkLogConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: MavlinkLog): MavlinkLog;
      }
      export interface MavlinkTunnel {
        timestamp: number;
        payload_type: number;
        target_system: number;
        target_component: number;
        payload_length: number;
        payload: number[] | Uint8Array;
      }
      export interface MavlinkTunnelConstructor {
        readonly MAV_TUNNEL_PAYLOAD_TYPE_UNKNOWN: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED0: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED1: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED2: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED3: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED4: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED5: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED6: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED7: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED8: number;
        readonly MAV_TUNNEL_PAYLOAD_TYPE_STORM32_RESERVED9: number;
        new(other?: MavlinkTunnel): MavlinkTunnel;
      }
      export interface Mission {
        timestamp: number;
        dataman_id: number;
        count: number;
        current_seq: number;
      }
      export interface MissionConstructor {
        new(other?: Mission): Mission;
      }
      export interface MissionResult {
        timestamp: number;
        instance_count: number;
        seq_reached: number;
        seq_current: number;
        seq_total: number;
        valid: boolean;
        warning: boolean;
        finished: boolean;
        failure: boolean;
        item_do_jump_changed: boolean;
        item_changed_index: number;
        item_do_jump_remaining: number;
        execution_mode: number;
      }
      export interface MissionResultConstructor {
        readonly MISSION_EXECUTION_MODE_NORMAL: number;
        readonly MISSION_EXECUTION_MODE_REVERSE: number;
        readonly MISSION_EXECUTION_MODE_FAST_FORWARD: number;
        new(other?: MissionResult): MissionResult;
      }
      export interface ModeCompleted {
        timestamp: number;
        result: number;
        nav_state: number;
      }
      export interface ModeCompletedConstructor {
        readonly RESULT_SUCCESS: number;
        readonly RESULT_FAILURE_OTHER: number;
        new(other?: ModeCompleted): ModeCompleted;
      }
      export interface MountOrientation {
        timestamp: number;
        attitude_euler_angle: number[] | Float32Array;
      }
      export interface MountOrientationConstructor {
        new(other?: MountOrientation): MountOrientation;
      }
      export interface NavigatorMissionItem {
        timestamp: number;
        instance_count: number;
        sequence_current: number;
        nav_cmd: number;
        latitude: number;
        longitude: number;
        time_inside: number;
        acceptance_radius: number;
        loiter_radius: number;
        yaw: number;
        altitude: number;
        frame: number;
        origin: number;
        loiter_exit_xtrack: boolean;
        force_heading: boolean;
        altitude_is_relative: boolean;
        autocontinue: boolean;
        vtol_back_transition: boolean;
      }
      export interface NavigatorMissionItemConstructor {
        new(other?: NavigatorMissionItem): NavigatorMissionItem;
      }
      export interface NormalizedUnsignedSetpoint {
        timestamp: number;
        normalized_setpoint: number;
      }
      export interface NormalizedUnsignedSetpointConstructor {
        new(other?: NormalizedUnsignedSetpoint): NormalizedUnsignedSetpoint;
      }
      export interface NpfgStatus {
        timestamp: number;
        wind_est_valid: number;
        lat_accel: number;
        lat_accel_ff: number;
        bearing_feas: number;
        bearing_feas_on_track: number;
        signed_track_error: number;
        track_error_bound: number;
        airspeed_ref: number;
        bearing: number;
        heading_ref: number;
        min_ground_speed_ref: number;
        adapted_period: number;
        p_gain: number;
        time_const: number;
      }
      export interface NpfgStatusConstructor {
        new(other?: NpfgStatus): NpfgStatus;
      }
      export interface ObstacleDistance {
        timestamp: number;
        frame: number;
        sensor_type: number;
        distances: number[] | Uint16Array;
        increment: number;
        min_distance: number;
        max_distance: number;
        angle_offset: number;
      }
      export interface ObstacleDistanceConstructor {
        readonly MAV_FRAME_GLOBAL: number;
        readonly MAV_FRAME_LOCAL_NED: number;
        readonly MAV_FRAME_BODY_FRD: number;
        readonly MAV_DISTANCE_SENSOR_LASER: number;
        readonly MAV_DISTANCE_SENSOR_ULTRASOUND: number;
        readonly MAV_DISTANCE_SENSOR_INFRARED: number;
        readonly MAV_DISTANCE_SENSOR_RADAR: number;
        new(other?: ObstacleDistance): ObstacleDistance;
      }
      export interface OffboardControlMode {
        timestamp: number;
        position: boolean;
        velocity: boolean;
        acceleration: boolean;
        attitude: boolean;
        body_rate: boolean;
        actuator: boolean;
      }
      export interface OffboardControlModeConstructor {
        new(other?: OffboardControlMode): OffboardControlMode;
      }
      export interface OnboardComputerStatus {
        timestamp: number;
        uptime: number;
        type: number;
        cpu_cores: number[] | Uint8Array;
        cpu_combined: number[] | Uint8Array;
        gpu_cores: number[] | Uint8Array;
        gpu_combined: number[] | Uint8Array;
        temperature_board: number;
        temperature_core: number[] | Int8Array;
        fan_speed: number[] | Int16Array;
        ram_usage: number;
        ram_total: number;
        storage_type: number[] | Uint32Array;
        storage_usage: number[] | Uint32Array;
        storage_total: number[] | Uint32Array;
        link_type: number[] | Uint32Array;
        link_tx_rate: number[] | Uint32Array;
        link_rx_rate: number[] | Uint32Array;
        link_tx_max: number[] | Uint32Array;
        link_rx_max: number[] | Uint32Array;
      }
      export interface OnboardComputerStatusConstructor {
        new(other?: OnboardComputerStatus): OnboardComputerStatus;
      }
      export interface OrbTest {
        timestamp: number;
        val: number;
      }
      export interface OrbTestConstructor {
        new(other?: OrbTest): OrbTest;
      }
      export interface OrbTestLarge {
        timestamp: number;
        val: number;
        junk: number[] | Uint8Array;
      }
      export interface OrbTestLargeConstructor {
        new(other?: OrbTestLarge): OrbTestLarge;
      }
      export interface OrbTestMedium {
        timestamp: number;
        val: number;
        junk: number[] | Uint8Array;
      }
      export interface OrbTestMediumConstructor {
        new(other?: OrbTestMedium): OrbTestMedium;
      }
      export interface OrbitStatus {
        timestamp: number;
        radius: number;
        frame: number;
        x: number;
        y: number;
        z: number;
        yaw_behaviour: number;
      }
      export interface OrbitStatusConstructor {
        readonly ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TO_CIRCLE_CENTER: number;
        readonly ORBIT_YAW_BEHAVIOUR_HOLD_INITIAL_HEADING: number;
        readonly ORBIT_YAW_BEHAVIOUR_UNCONTROLLED: number;
        readonly ORBIT_YAW_BEHAVIOUR_HOLD_FRONT_TANGENT_TO_CIRCLE: number;
        readonly ORBIT_YAW_BEHAVIOUR_RC_CONTROLLED: number;
        new(other?: OrbitStatus): OrbitStatus;
      }
      export interface ParameterUpdate {
        timestamp: number;
        instance: number;
        get_count: number;
        set_count: number;
        find_count: number;
        export_count: number;
        active: number;
        changed: number;
        custom_default: number;
      }
      export interface ParameterUpdateConstructor {
        new(other?: ParameterUpdate): ParameterUpdate;
      }
      export interface Ping {
        timestamp: number;
        ping_time: number;
        ping_sequence: number;
        dropped_packets: number;
        rtt_ms: number;
        system_id: number;
        component_id: number;
      }
      export interface PingConstructor {
        new(other?: Ping): Ping;
      }
      export interface PositionControllerLandingStatus {
        timestamp: number;
        lateral_touchdown_offset: number;
        flaring: boolean;
        abort_status: number;
      }
      export interface PositionControllerLandingStatusConstructor {
        readonly NOT_ABORTED: number;
        readonly ABORTED_BY_OPERATOR: number;
        readonly TERRAIN_NOT_FOUND: number;
        readonly TERRAIN_TIMEOUT: number;
        readonly UNKNOWN_ABORT_CRITERION: number;
        new(other?: PositionControllerLandingStatus): PositionControllerLandingStatus;
      }
      export interface PositionControllerStatus {
        timestamp: number;
        nav_roll: number;
        nav_pitch: number;
        nav_bearing: number;
        target_bearing: number;
        xtrack_error: number;
        wp_dist: number;
        acceptance_radius: number;
        yaw_acceptance: number;
        altitude_acceptance: number;
        type: number;
      }
      export interface PositionControllerStatusConstructor {
        new(other?: PositionControllerStatus): PositionControllerStatus;
      }
      export interface PositionSetpoint {
        timestamp: number;
        valid: boolean;
        type: number;
        vx: number;
        vy: number;
        vz: number;
        lat: number;
        lon: number;
        alt: number;
        yaw: number;
        yaw_valid: boolean;
        yawspeed: number;
        yawspeed_valid: boolean;
        loiter_radius: number;
        loiter_direction_counter_clockwise: boolean;
        acceptance_radius: number;
        cruising_speed: number;
        gliding_enabled: boolean;
        cruising_throttle: number;
        disable_weather_vane: boolean;
      }
      export interface PositionSetpointConstructor {
        readonly SETPOINT_TYPE_POSITION: number;
        readonly SETPOINT_TYPE_VELOCITY: number;
        readonly SETPOINT_TYPE_LOITER: number;
        readonly SETPOINT_TYPE_TAKEOFF: number;
        readonly SETPOINT_TYPE_LAND: number;
        readonly SETPOINT_TYPE_IDLE: number;
        new(other?: PositionSetpoint): PositionSetpoint;
      }
      export interface PositionSetpointTriplet {
        timestamp: number;
        previous: px4_msgs.msg.PositionSetpoint;
        current: px4_msgs.msg.PositionSetpoint;
        next: px4_msgs.msg.PositionSetpoint;
      }
      export interface PositionSetpointTripletConstructor {
        new(other?: PositionSetpointTriplet): PositionSetpointTriplet;
      }
      export interface PowerButtonState {
        timestamp: number;
        event: number;
      }
      export interface PowerButtonStateConstructor {
        readonly PWR_BUTTON_STATE_IDEL: number;
        readonly PWR_BUTTON_STATE_DOWN: number;
        readonly PWR_BUTTON_STATE_UP: number;
        readonly PWR_BUTTON_STATE_REQUEST_SHUTDOWN: number;
        new(other?: PowerButtonState): PowerButtonState;
      }
      export interface PowerMonitor {
        timestamp: number;
        voltage_v: number;
        current_a: number;
        power_w: number;
        rconf: number;
        rsv: number;
        rbv: number;
        rp: number;
        rc: number;
        rcal: number;
        me: number;
        al: number;
      }
      export interface PowerMonitorConstructor {
        new(other?: PowerMonitor): PowerMonitor;
      }
      export interface PpsCapture {
        timestamp: number;
        rtc_timestamp: number;
        pps_rate_exceeded_counter: number;
      }
      export interface PpsCaptureConstructor {
        new(other?: PpsCapture): PpsCapture;
      }
      export interface PwmInput {
        timestamp: number;
        error_count: number;
        pulse_width: number;
        period: number;
      }
      export interface PwmInputConstructor {
        new(other?: PwmInput): PwmInput;
      }
      export interface Px4ioStatus {
        timestamp: number;
        free_memory_bytes: number;
        voltage_v: number;
        rssi_v: number;
        status_arm_sync: boolean;
        status_failsafe: boolean;
        status_fmu_initialized: boolean;
        status_fmu_ok: boolean;
        status_init_ok: boolean;
        status_outputs_armed: boolean;
        status_raw_pwm: boolean;
        status_rc_ok: boolean;
        status_rc_dsm: boolean;
        status_rc_ppm: boolean;
        status_rc_sbus: boolean;
        status_rc_st24: boolean;
        status_rc_sumd: boolean;
        status_safety_button_event: boolean;
        alarm_pwm_error: boolean;
        alarm_rc_lost: boolean;
        arming_failsafe_custom: boolean;
        arming_fmu_armed: boolean;
        arming_fmu_prearmed: boolean;
        arming_force_failsafe: boolean;
        arming_io_arm_ok: boolean;
        arming_lockdown: boolean;
        arming_termination_failsafe: boolean;
        pwm: number[] | Uint16Array;
        pwm_disarmed: number[] | Uint16Array;
        pwm_failsafe: number[] | Uint16Array;
        pwm_rate_hz: number[] | Uint16Array;
        raw_inputs: number[] | Uint16Array;
      }
      export interface Px4ioStatusConstructor {
        new(other?: Px4ioStatus): Px4ioStatus;
      }
      export interface QshellReq {
        timestamp: number;
        cmd: number[] | Int8Array;
        strlen: number;
        request_sequence: number;
      }
      export interface QshellReqConstructor {
        readonly MAX_STRLEN: number;
        new(other?: QshellReq): QshellReq;
      }
      export interface QshellRetval {
        timestamp: number;
        return_value: number;
        return_sequence: number;
      }
      export interface QshellRetvalConstructor {
        new(other?: QshellRetval): QshellRetval;
      }
      export interface RadioStatus {
        timestamp: number;
        rssi: number;
        remote_rssi: number;
        txbuf: number;
        noise: number;
        remote_noise: number;
        rxerrors: number;
        fix: number;
      }
      export interface RadioStatusConstructor {
        new(other?: RadioStatus): RadioStatus;
      }
      export interface RateCtrlStatus {
        timestamp: number;
        rollspeed_integ: number;
        pitchspeed_integ: number;
        yawspeed_integ: number;
        wheel_rate_integ: number;
      }
      export interface RateCtrlStatusConstructor {
        new(other?: RateCtrlStatus): RateCtrlStatus;
      }
      export interface RcChannels {
        timestamp: number;
        timestamp_last_valid: number;
        channels: number[] | Float32Array;
        channel_count: number;
        function: number[] | Int8Array;
        rssi: number;
        signal_lost: boolean;
        frame_drop_count: number;
      }
      export interface RcChannelsConstructor {
        readonly FUNCTION_THROTTLE: number;
        readonly FUNCTION_ROLL: number;
        readonly FUNCTION_PITCH: number;
        readonly FUNCTION_YAW: number;
        readonly FUNCTION_RETURN: number;
        readonly FUNCTION_LOITER: number;
        readonly FUNCTION_OFFBOARD: number;
        readonly FUNCTION_FLAPS: number;
        readonly FUNCTION_AUX_1: number;
        readonly FUNCTION_AUX_2: number;
        readonly FUNCTION_AUX_3: number;
        readonly FUNCTION_AUX_4: number;
        readonly FUNCTION_AUX_5: number;
        readonly FUNCTION_AUX_6: number;
        readonly FUNCTION_PARAM_1: number;
        readonly FUNCTION_PARAM_2: number;
        readonly FUNCTION_PARAM_3_5: number;
        readonly FUNCTION_KILLSWITCH: number;
        readonly FUNCTION_TRANSITION: number;
        readonly FUNCTION_GEAR: number;
        readonly FUNCTION_ARMSWITCH: number;
        readonly FUNCTION_FLTBTN_SLOT_1: number;
        readonly FUNCTION_FLTBTN_SLOT_2: number;
        readonly FUNCTION_FLTBTN_SLOT_3: number;
        readonly FUNCTION_FLTBTN_SLOT_4: number;
        readonly FUNCTION_FLTBTN_SLOT_5: number;
        readonly FUNCTION_FLTBTN_SLOT_6: number;
        readonly FUNCTION_ENGAGE_MAIN_MOTOR: number;
        readonly FUNCTION_FLTBTN_SLOT_COUNT: number;
        new(other?: RcChannels): RcChannels;
      }
      export interface RcParameterMap {
        timestamp: number;
        valid: boolean[];
        param_index: number[] | Int32Array;
        param_id: number[] | Int8Array;
        scale: number[] | Float32Array;
        value0: number[] | Float32Array;
        value_min: number[] | Float32Array;
        value_max: number[] | Float32Array;
      }
      export interface RcParameterMapConstructor {
        readonly RC_PARAM_MAP_NCHAN: number;
        readonly PARAM_ID_LEN: number;
        new(other?: RcParameterMap): RcParameterMap;
      }
      export interface Rpm {
        timestamp: number;
        indicated_frequency_rpm: number;
        estimated_accurancy_rpm: number;
      }
      export interface RpmConstructor {
        new(other?: Rpm): Rpm;
      }
      export interface RtlTimeEstimate {
        timestamp: number;
        valid: boolean;
        time_estimate: number;
        safe_time_estimate: number;
      }
      export interface RtlTimeEstimateConstructor {
        new(other?: RtlTimeEstimate): RtlTimeEstimate;
      }
      export interface SatelliteInfo {
        timestamp: number;
        count: number;
        svid: number[] | Uint8Array;
        used: number[] | Uint8Array;
        elevation: number[] | Uint8Array;
        azimuth: number[] | Uint8Array;
        snr: number[] | Uint8Array;
        prn: number[] | Uint8Array;
      }
      export interface SatelliteInfoConstructor {
        readonly SAT_INFO_MAX_SATELLITES: number;
        new(other?: SatelliteInfo): SatelliteInfo;
      }
      export interface SensorAccel {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        x: number;
        y: number;
        z: number;
        temperature: number;
        error_count: number;
        clip_counter: number[] | Uint8Array;
        samples: number;
      }
      export interface SensorAccelConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: SensorAccel): SensorAccel;
      }
      export interface SensorAccelFifo {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        dt: number;
        scale: number;
        samples: number;
        x: number[] | Int16Array;
        y: number[] | Int16Array;
        z: number[] | Int16Array;
      }
      export interface SensorAccelFifoConstructor {
        new(other?: SensorAccelFifo): SensorAccelFifo;
      }
      export interface SensorBaro {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        pressure: number;
        temperature: number;
        error_count: number;
      }
      export interface SensorBaroConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: SensorBaro): SensorBaro;
      }
      export interface SensorCombined {
        timestamp: number;
        gyro_rad: number[] | Float32Array;
        gyro_integral_dt: number;
        accelerometer_timestamp_relative: number;
        accelerometer_m_s2: number[] | Float32Array;
        accelerometer_integral_dt: number;
        accelerometer_clipping: number;
        gyro_clipping: number;
        accel_calibration_count: number;
        gyro_calibration_count: number;
      }
      export interface SensorCombinedConstructor {
        readonly RELATIVE_TIMESTAMP_INVALID: number;
        readonly CLIPPING_X: number;
        readonly CLIPPING_Y: number;
        readonly CLIPPING_Z: number;
        new(other?: SensorCombined): SensorCombined;
      }
      export interface SensorCorrection {
        timestamp: number;
        gyro_device_ids: number[] | Uint32Array;
        gyro_temperature: number[] | Float32Array;
        gyro_offset_0: number[] | Float32Array;
        gyro_offset_1: number[] | Float32Array;
        gyro_offset_2: number[] | Float32Array;
        gyro_offset_3: number[] | Float32Array;
        accel_device_ids: number[] | Uint32Array;
        accel_temperature: number[] | Float32Array;
        accel_offset_0: number[] | Float32Array;
        accel_offset_1: number[] | Float32Array;
        accel_offset_2: number[] | Float32Array;
        accel_offset_3: number[] | Float32Array;
        baro_device_ids: number[] | Uint32Array;
        baro_temperature: number[] | Float32Array;
        baro_offset_0: number;
        baro_offset_1: number;
        baro_offset_2: number;
        baro_offset_3: number;
      }
      export interface SensorCorrectionConstructor {
        new(other?: SensorCorrection): SensorCorrection;
      }
      export interface SensorGnssRelative {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        time_utc_usec: number;
        reference_station_id: number;
        position: number[] | Float32Array;
        position_accuracy: number[] | Float32Array;
        heading: number;
        heading_accuracy: number;
        position_length: number;
        accuracy_length: number;
        gnss_fix_ok: boolean;
        differential_solution: boolean;
        relative_position_valid: boolean;
        carrier_solution_floating: boolean;
        carrier_solution_fixed: boolean;
        moving_base_mode: boolean;
        reference_position_miss: boolean;
        reference_observations_miss: boolean;
        heading_valid: boolean;
        relative_position_normalized: boolean;
      }
      export interface SensorGnssRelativeConstructor {
        new(other?: SensorGnssRelative): SensorGnssRelative;
      }
      export interface SensorGps {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        lat: number;
        lon: number;
        alt: number;
        alt_ellipsoid: number;
        s_variance_m_s: number;
        c_variance_rad: number;
        fix_type: number;
        eph: number;
        epv: number;
        hdop: number;
        vdop: number;
        noise_per_ms: number;
        automatic_gain_control: number;
        jamming_state: number;
        jamming_indicator: number;
        spoofing_state: number;
        vel_m_s: number;
        vel_n_m_s: number;
        vel_e_m_s: number;
        vel_d_m_s: number;
        cog_rad: number;
        vel_ned_valid: boolean;
        timestamp_time_relative: number;
        time_utc_usec: number;
        satellites_used: number;
        heading: number;
        heading_offset: number;
        heading_accuracy: number;
        rtcm_injection_rate: number;
        selected_rtcm_instance: number;
      }
      export interface SensorGpsConstructor {
        readonly JAMMING_STATE_UNKNOWN: number;
        readonly JAMMING_STATE_OK: number;
        readonly JAMMING_STATE_WARNING: number;
        readonly JAMMING_STATE_CRITICAL: number;
        readonly SPOOFING_STATE_UNKNOWN: number;
        readonly SPOOFING_STATE_NONE: number;
        readonly SPOOFING_STATE_INDICATED: number;
        readonly SPOOFING_STATE_MULTIPLE: number;
        new(other?: SensorGps): SensorGps;
      }
      export interface SensorGyro {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        x: number;
        y: number;
        z: number;
        temperature: number;
        error_count: number;
        clip_counter: number[] | Uint8Array;
        samples: number;
      }
      export interface SensorGyroConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: SensorGyro): SensorGyro;
      }
      export interface SensorGyroFft {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        sensor_sample_rate_hz: number;
        resolution_hz: number;
        peak_frequencies_x: number[] | Float32Array;
        peak_frequencies_y: number[] | Float32Array;
        peak_frequencies_z: number[] | Float32Array;
        peak_snr_x: number[] | Float32Array;
        peak_snr_y: number[] | Float32Array;
        peak_snr_z: number[] | Float32Array;
      }
      export interface SensorGyroFftConstructor {
        new(other?: SensorGyroFft): SensorGyroFft;
      }
      export interface SensorGyroFifo {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        dt: number;
        scale: number;
        samples: number;
        x: number[] | Int16Array;
        y: number[] | Int16Array;
        z: number[] | Int16Array;
      }
      export interface SensorGyroFifoConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: SensorGyroFifo): SensorGyroFifo;
      }
      export interface SensorHygrometer {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        temperature: number;
        humidity: number;
      }
      export interface SensorHygrometerConstructor {
        new(other?: SensorHygrometer): SensorHygrometer;
      }
      export interface SensorMag {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        x: number;
        y: number;
        z: number;
        temperature: number;
        error_count: number;
      }
      export interface SensorMagConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: SensorMag): SensorMag;
      }
      export interface SensorOpticalFlow {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        pixel_flow: number[] | Float32Array;
        delta_angle: number[] | Float32Array;
        delta_angle_available: boolean;
        distance_m: number;
        distance_available: boolean;
        integration_timespan_us: number;
        quality: number;
        error_count: number;
        max_flow_rate: number;
        min_ground_distance: number;
        max_ground_distance: number;
        mode: number;
      }
      export interface SensorOpticalFlowConstructor {
        readonly MODE_UNKNOWN: number;
        readonly MODE_BRIGHT: number;
        readonly MODE_LOWLIGHT: number;
        readonly MODE_SUPER_LOWLIGHT: number;
        new(other?: SensorOpticalFlow): SensorOpticalFlow;
      }
      export interface SensorPreflightMag {
        timestamp: number;
        mag_inconsistency_angle: number;
      }
      export interface SensorPreflightMagConstructor {
        new(other?: SensorPreflightMag): SensorPreflightMag;
      }
      export interface SensorSelection {
        timestamp: number;
        accel_device_id: number;
        gyro_device_id: number;
      }
      export interface SensorSelectionConstructor {
        new(other?: SensorSelection): SensorSelection;
      }
      export interface SensorUwb {
        timestamp: number;
        sessionid: number;
        time_offset: number;
        counter: number;
        mac: number;
        mac_dest: number;
        status: number;
        nlos: number;
        distance: number;
        aoa_azimuth_dev: number;
        aoa_elevation_dev: number;
        aoa_azimuth_resp: number;
        aoa_elevation_resp: number;
        aoa_azimuth_fom: number;
        aoa_elevation_fom: number;
        aoa_dest_azimuth_fom: number;
        aoa_dest_elevation_fom: number;
        orientation: number;
        offset_x: number;
        offset_y: number;
        offset_z: number;
      }
      export interface SensorUwbConstructor {
        new(other?: SensorUwb): SensorUwb;
      }
      export interface SensorsStatus {
        timestamp: number;
        device_id_primary: number;
        device_ids: number[] | Uint32Array;
        inconsistency: number[] | Float32Array;
        healthy: boolean[];
        priority: number[] | Uint8Array;
        enabled: boolean[];
        external: boolean[];
      }
      export interface SensorsStatusConstructor {
        new(other?: SensorsStatus): SensorsStatus;
      }
      export interface SensorsStatusImu {
        timestamp: number;
        accel_device_id_primary: number;
        accel_device_ids: number[] | Uint32Array;
        accel_inconsistency_m_s_s: number[] | Float32Array;
        accel_healthy: boolean[];
        accel_priority: number[] | Uint8Array;
        gyro_device_id_primary: number;
        gyro_device_ids: number[] | Uint32Array;
        gyro_inconsistency_rad_s: number[] | Float32Array;
        gyro_healthy: boolean[];
        gyro_priority: number[] | Uint8Array;
      }
      export interface SensorsStatusImuConstructor {
        new(other?: SensorsStatusImu): SensorsStatusImu;
      }
      export interface SystemPower {
        timestamp: number;
        voltage5v_v: number;
        sensors3v3: number[] | Float32Array;
        sensors3v3_valid: number;
        usb_connected: number;
        brick_valid: number;
        usb_valid: number;
        servo_valid: number;
        periph_5v_oc: number;
        hipower_5v_oc: number;
        comp_5v_valid: number;
        can1_gps1_5v_valid: number;
      }
      export interface SystemPowerConstructor {
        readonly BRICK1_VALID_SHIFTS: number;
        readonly BRICK1_VALID_MASK: number;
        readonly BRICK2_VALID_SHIFTS: number;
        readonly BRICK2_VALID_MASK: number;
        readonly BRICK3_VALID_SHIFTS: number;
        readonly BRICK3_VALID_MASK: number;
        readonly BRICK4_VALID_SHIFTS: number;
        readonly BRICK4_VALID_MASK: number;
        new(other?: SystemPower): SystemPower;
      }
      export interface TakeoffStatus {
        timestamp: number;
        takeoff_state: number;
        tilt_limit: number;
      }
      export interface TakeoffStatusConstructor {
        readonly TAKEOFF_STATE_UNINITIALIZED: number;
        readonly TAKEOFF_STATE_DISARMED: number;
        readonly TAKEOFF_STATE_SPOOLUP: number;
        readonly TAKEOFF_STATE_READY_FOR_TAKEOFF: number;
        readonly TAKEOFF_STATE_RAMPUP: number;
        readonly TAKEOFF_STATE_FLIGHT: number;
        new(other?: TakeoffStatus): TakeoffStatus;
      }
      export interface TaskStackInfo {
        timestamp: number;
        stack_free: number;
        task_name: number[] | Int8Array;
      }
      export interface TaskStackInfoConstructor {
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: TaskStackInfo): TaskStackInfo;
      }
      export interface TecsStatus {
        timestamp: number;
        altitude_sp: number;
        altitude_reference: number;
        height_rate_reference: number;
        height_rate_direct: number;
        height_rate_setpoint: number;
        height_rate: number;
        equivalent_airspeed_sp: number;
        true_airspeed_sp: number;
        true_airspeed_filtered: number;
        true_airspeed_derivative_sp: number;
        true_airspeed_derivative: number;
        true_airspeed_derivative_raw: number;
        total_energy_rate_sp: number;
        total_energy_rate: number;
        total_energy_balance_rate_sp: number;
        total_energy_balance_rate: number;
        throttle_integ: number;
        pitch_integ: number;
        throttle_sp: number;
        pitch_sp_rad: number;
        throttle_trim: number;
        mode: number;
      }
      export interface TecsStatusConstructor {
        readonly TECS_MODE_NORMAL: number;
        readonly TECS_MODE_UNDERSPEED: number;
        new(other?: TecsStatus): TecsStatus;
      }
      export interface TelemetryStatus {
        timestamp: number;
        type: number;
        mode: number;
        flow_control: boolean;
        forwarding: boolean;
        mavlink_v2: boolean;
        ftp: boolean;
        streams: number;
        data_rate: number;
        rate_multiplier: number;
        tx_rate_avg: number;
        tx_error_rate_avg: number;
        tx_message_count: number;
        tx_buffer_overruns: number;
        rx_rate_avg: number;
        rx_message_count: number;
        rx_message_lost_count: number;
        rx_buffer_overruns: number;
        rx_parse_errors: number;
        rx_packet_drop_count: number;
        rx_message_lost_rate: number;
        heartbeat_type_antenna_tracker: boolean;
        heartbeat_type_gcs: boolean;
        heartbeat_type_onboard_controller: boolean;
        heartbeat_type_gimbal: boolean;
        heartbeat_type_adsb: boolean;
        heartbeat_type_camera: boolean;
        heartbeat_type_parachute: boolean;
        heartbeat_type_open_drone_id: boolean;
        heartbeat_component_telemetry_radio: boolean;
        heartbeat_component_log: boolean;
        heartbeat_component_osd: boolean;
        heartbeat_component_obstacle_avoidance: boolean;
        heartbeat_component_vio: boolean;
        heartbeat_component_pairing_manager: boolean;
        heartbeat_component_udp_bridge: boolean;
        heartbeat_component_uart_bridge: boolean;
        avoidance_system_healthy: boolean;
        open_drone_id_system_healthy: boolean;
        parachute_system_healthy: boolean;
      }
      export interface TelemetryStatusConstructor {
        readonly LINK_TYPE_GENERIC: number;
        readonly LINK_TYPE_UBIQUITY_BULLET: number;
        readonly LINK_TYPE_WIRE: number;
        readonly LINK_TYPE_USB: number;
        readonly LINK_TYPE_IRIDIUM: number;
        readonly HEARTBEAT_TIMEOUT_US: number;
        new(other?: TelemetryStatus): TelemetryStatus;
      }
      export interface TiltrotorExtraControls {
        timestamp: number;
        collective_tilt_normalized_setpoint: number;
        collective_thrust_normalized_setpoint: number;
      }
      export interface TiltrotorExtraControlsConstructor {
        new(other?: TiltrotorExtraControls): TiltrotorExtraControls;
      }
      export interface TimesyncStatus {
        timestamp: number;
        source_protocol: number;
        remote_timestamp: number;
        observed_offset: number;
        estimated_offset: number;
        round_trip_time: number;
      }
      export interface TimesyncStatusConstructor {
        readonly SOURCE_PROTOCOL_UNKNOWN: number;
        readonly SOURCE_PROTOCOL_MAVLINK: number;
        readonly SOURCE_PROTOCOL_DDS: number;
        new(other?: TimesyncStatus): TimesyncStatus;
      }
      export interface TrajectoryBezier {
        timestamp: number;
        position: number[] | Float32Array;
        yaw: number;
        delta: number;
      }
      export interface TrajectoryBezierConstructor {
        new(other?: TrajectoryBezier): TrajectoryBezier;
      }
      export interface TrajectorySetpoint {
        timestamp: number;
        position: number[] | Float32Array;
        velocity: number[] | Float32Array;
        acceleration: number[] | Float32Array;
        jerk: number[] | Float32Array;
        yaw: number;
        yawspeed: number;
      }
      export interface TrajectorySetpointConstructor {
        new(other?: TrajectorySetpoint): TrajectorySetpoint;
      }
      export interface TrajectoryWaypoint {
        timestamp: number;
        position: number[] | Float32Array;
        velocity: number[] | Float32Array;
        acceleration: number[] | Float32Array;
        yaw: number;
        yaw_speed: number;
        point_valid: boolean;
        type: number;
      }
      export interface TrajectoryWaypointConstructor {
        new(other?: TrajectoryWaypoint): TrajectoryWaypoint;
      }
      export interface TransponderReport {
        timestamp: number;
        icao_address: number;
        lat: number;
        lon: number;
        altitude_type: number;
        altitude: number;
        heading: number;
        hor_velocity: number;
        ver_velocity: number;
        callsign: number[] | Int8Array;
        emitter_type: number;
        tslc: number;
        flags: number;
        squawk: number;
        uas_id: number[] | Uint8Array;
      }
      export interface TransponderReportConstructor {
        readonly PX4_ADSB_FLAGS_VALID_COORDS: number;
        readonly PX4_ADSB_FLAGS_VALID_ALTITUDE: number;
        readonly PX4_ADSB_FLAGS_VALID_HEADING: number;
        readonly PX4_ADSB_FLAGS_VALID_VELOCITY: number;
        readonly PX4_ADSB_FLAGS_VALID_CALLSIGN: number;
        readonly PX4_ADSB_FLAGS_VALID_SQUAWK: number;
        readonly PX4_ADSB_FLAGS_RETRANSLATE: number;
        readonly ADSB_EMITTER_TYPE_NO_INFO: number;
        readonly ADSB_EMITTER_TYPE_LIGHT: number;
        readonly ADSB_EMITTER_TYPE_SMALL: number;
        readonly ADSB_EMITTER_TYPE_LARGE: number;
        readonly ADSB_EMITTER_TYPE_HIGH_VORTEX_LARGE: number;
        readonly ADSB_EMITTER_TYPE_HEAVY: number;
        readonly ADSB_EMITTER_TYPE_HIGHLY_MANUV: number;
        readonly ADSB_EMITTER_TYPE_ROTOCRAFT: number;
        readonly ADSB_EMITTER_TYPE_UNASSIGNED: number;
        readonly ADSB_EMITTER_TYPE_GLIDER: number;
        readonly ADSB_EMITTER_TYPE_LIGHTER_AIR: number;
        readonly ADSB_EMITTER_TYPE_PARACHUTE: number;
        readonly ADSB_EMITTER_TYPE_ULTRA_LIGHT: number;
        readonly ADSB_EMITTER_TYPE_UNASSIGNED2: number;
        readonly ADSB_EMITTER_TYPE_UAV: number;
        readonly ADSB_EMITTER_TYPE_SPACE: number;
        readonly ADSB_EMITTER_TYPE_UNASSGINED3: number;
        readonly ADSB_EMITTER_TYPE_EMERGENCY_SURFACE: number;
        readonly ADSB_EMITTER_TYPE_SERVICE_SURFACE: number;
        readonly ADSB_EMITTER_TYPE_POINT_OBSTACLE: number;
        readonly ADSB_EMITTER_TYPE_ENUM_END: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: TransponderReport): TransponderReport;
      }
      export interface TuneControl {
        timestamp: number;
        tune_id: number;
        tune_override: boolean;
        frequency: number;
        duration: number;
        silence: number;
        volume: number;
      }
      export interface TuneControlConstructor {
        readonly TUNE_ID_STOP: number;
        readonly TUNE_ID_STARTUP: number;
        readonly TUNE_ID_ERROR: number;
        readonly TUNE_ID_NOTIFY_POSITIVE: number;
        readonly TUNE_ID_NOTIFY_NEUTRAL: number;
        readonly TUNE_ID_NOTIFY_NEGATIVE: number;
        readonly TUNE_ID_ARMING_WARNING: number;
        readonly TUNE_ID_BATTERY_WARNING_SLOW: number;
        readonly TUNE_ID_BATTERY_WARNING_FAST: number;
        readonly TUNE_ID_GPS_WARNING: number;
        readonly TUNE_ID_ARMING_FAILURE: number;
        readonly TUNE_ID_PARACHUTE_RELEASE: number;
        readonly TUNE_ID_SINGLE_BEEP: number;
        readonly TUNE_ID_HOME_SET: number;
        readonly TUNE_ID_SD_INIT: number;
        readonly TUNE_ID_SD_ERROR: number;
        readonly TUNE_ID_PROG_PX4IO: number;
        readonly TUNE_ID_PROG_PX4IO_OK: number;
        readonly TUNE_ID_PROG_PX4IO_ERR: number;
        readonly TUNE_ID_POWER_OFF: number;
        readonly NUMBER_OF_TUNES: number;
        readonly VOLUME_LEVEL_MIN: number;
        readonly VOLUME_LEVEL_DEFAULT: number;
        readonly VOLUME_LEVEL_MAX: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: TuneControl): TuneControl;
      }
      export interface UavcanParameterRequest {
        timestamp: number;
        message_type: number;
        node_id: number;
        param_id: number[] | Int8Array;
        param_index: number;
        param_type: number;
        int_value: number;
        real_value: number;
      }
      export interface UavcanParameterRequestConstructor {
        readonly MESSAGE_TYPE_PARAM_REQUEST_READ: number;
        readonly MESSAGE_TYPE_PARAM_REQUEST_LIST: number;
        readonly MESSAGE_TYPE_PARAM_SET: number;
        readonly NODE_ID_ALL: number;
        readonly PARAM_TYPE_UINT8: number;
        readonly PARAM_TYPE_INT64: number;
        readonly PARAM_TYPE_REAL32: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: UavcanParameterRequest): UavcanParameterRequest;
      }
      export interface UavcanParameterValue {
        timestamp: number;
        node_id: number;
        param_id: number[] | Int8Array;
        param_index: number;
        param_count: number;
        param_type: number;
        int_value: number;
        real_value: number;
      }
      export interface UavcanParameterValueConstructor {
        new(other?: UavcanParameterValue): UavcanParameterValue;
      }
      export interface UlogStream {
        timestamp: number;
        length: number;
        first_message_offset: number;
        msg_sequence: number;
        flags: number;
        data: number[] | Uint8Array;
      }
      export interface UlogStreamConstructor {
        readonly FLAGS_NEED_ACK: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: UlogStream): UlogStream;
      }
      export interface UlogStreamAck {
        timestamp: number;
        msg_sequence: number;
      }
      export interface UlogStreamAckConstructor {
        readonly ACK_TIMEOUT: number;
        readonly ACK_MAX_TRIES: number;
        new(other?: UlogStreamAck): UlogStreamAck;
      }
      export interface VehicleAcceleration {
        timestamp: number;
        timestamp_sample: number;
        xyz: number[] | Float32Array;
      }
      export interface VehicleAccelerationConstructor {
        new(other?: VehicleAcceleration): VehicleAcceleration;
      }
      export interface VehicleAirData {
        timestamp: number;
        timestamp_sample: number;
        baro_device_id: number;
        baro_alt_meter: number;
        baro_temp_celcius: number;
        baro_pressure_pa: number;
        rho: number;
        calibration_count: number;
      }
      export interface VehicleAirDataConstructor {
        new(other?: VehicleAirData): VehicleAirData;
      }
      export interface VehicleAngularAccelerationSetpoint {
        timestamp: number;
        timestamp_sample: number;
        xyz: number[] | Float32Array;
      }
      export interface VehicleAngularAccelerationSetpointConstructor {
        new(other?: VehicleAngularAccelerationSetpoint): VehicleAngularAccelerationSetpoint;
      }
      export interface VehicleAngularVelocity {
        timestamp: number;
        timestamp_sample: number;
        xyz: number[] | Float32Array;
        xyz_derivative: number[] | Float32Array;
      }
      export interface VehicleAngularVelocityConstructor {
        new(other?: VehicleAngularVelocity): VehicleAngularVelocity;
      }
      export interface VehicleAttitude {
        timestamp: number;
        timestamp_sample: number;
        q: number[] | Float32Array;
        delta_q_reset: number[] | Float32Array;
        quat_reset_counter: number;
      }
      export interface VehicleAttitudeConstructor {
        new(other?: VehicleAttitude): VehicleAttitude;
      }
      export interface VehicleAttitudeSetpoint {
        timestamp: number;
        roll_body: number;
        pitch_body: number;
        yaw_body: number;
        yaw_sp_move_rate: number;
        q_d: number[] | Float32Array;
        thrust_body: number[] | Float32Array;
        reset_integral: boolean;
        fw_control_yaw_wheel: boolean;
      }
      export interface VehicleAttitudeSetpointConstructor {
        new(other?: VehicleAttitudeSetpoint): VehicleAttitudeSetpoint;
      }
      export interface VehicleCommand {
        timestamp: number;
        param1: number;
        param2: number;
        param3: number;
        param4: number;
        param5: number;
        param6: number;
        param7: number;
        command: number;
        target_system: number;
        target_component: number;
        source_system: number;
        source_component: number;
        confirmation: number;
        from_external: boolean;
      }
      export interface VehicleCommandConstructor {
        readonly VEHICLE_CMD_CUSTOM_0: number;
        readonly VEHICLE_CMD_CUSTOM_1: number;
        readonly VEHICLE_CMD_CUSTOM_2: number;
        readonly VEHICLE_CMD_NAV_WAYPOINT: number;
        readonly VEHICLE_CMD_NAV_LOITER_UNLIM: number;
        readonly VEHICLE_CMD_NAV_LOITER_TURNS: number;
        readonly VEHICLE_CMD_NAV_LOITER_TIME: number;
        readonly VEHICLE_CMD_NAV_RETURN_TO_LAUNCH: number;
        readonly VEHICLE_CMD_NAV_LAND: number;
        readonly VEHICLE_CMD_NAV_TAKEOFF: number;
        readonly VEHICLE_CMD_NAV_PRECLAND: number;
        readonly VEHICLE_CMD_DO_ORBIT: number;
        readonly VEHICLE_CMD_NAV_ROI: number;
        readonly VEHICLE_CMD_NAV_PATHPLANNING: number;
        readonly VEHICLE_CMD_NAV_VTOL_TAKEOFF: number;
        readonly VEHICLE_CMD_NAV_VTOL_LAND: number;
        readonly VEHICLE_CMD_NAV_GUIDED_LIMITS: number;
        readonly VEHICLE_CMD_NAV_GUIDED_MASTER: number;
        readonly VEHICLE_CMD_NAV_DELAY: number;
        readonly VEHICLE_CMD_NAV_LAST: number;
        readonly VEHICLE_CMD_CONDITION_DELAY: number;
        readonly VEHICLE_CMD_CONDITION_CHANGE_ALT: number;
        readonly VEHICLE_CMD_CONDITION_DISTANCE: number;
        readonly VEHICLE_CMD_CONDITION_YAW: number;
        readonly VEHICLE_CMD_CONDITION_LAST: number;
        readonly VEHICLE_CMD_CONDITION_GATE: number;
        readonly VEHICLE_CMD_DO_SET_MODE: number;
        readonly VEHICLE_CMD_DO_JUMP: number;
        readonly VEHICLE_CMD_DO_CHANGE_SPEED: number;
        readonly VEHICLE_CMD_DO_SET_HOME: number;
        readonly VEHICLE_CMD_DO_SET_PARAMETER: number;
        readonly VEHICLE_CMD_DO_SET_RELAY: number;
        readonly VEHICLE_CMD_DO_REPEAT_RELAY: number;
        readonly VEHICLE_CMD_DO_REPEAT_SERVO: number;
        readonly VEHICLE_CMD_DO_FLIGHTTERMINATION: number;
        readonly VEHICLE_CMD_DO_CHANGE_ALTITUDE: number;
        readonly VEHICLE_CMD_DO_SET_ACTUATOR: number;
        readonly VEHICLE_CMD_DO_LAND_START: number;
        readonly VEHICLE_CMD_DO_GO_AROUND: number;
        readonly VEHICLE_CMD_DO_REPOSITION: number;
        readonly VEHICLE_CMD_DO_PAUSE_CONTINUE: number;
        readonly VEHICLE_CMD_DO_SET_ROI_LOCATION: number;
        readonly VEHICLE_CMD_DO_SET_ROI_WPNEXT_OFFSET: number;
        readonly VEHICLE_CMD_DO_SET_ROI_NONE: number;
        readonly VEHICLE_CMD_DO_CONTROL_VIDEO: number;
        readonly VEHICLE_CMD_DO_SET_ROI: number;
        readonly VEHICLE_CMD_DO_DIGICAM_CONTROL: number;
        readonly VEHICLE_CMD_DO_MOUNT_CONFIGURE: number;
        readonly VEHICLE_CMD_DO_MOUNT_CONTROL: number;
        readonly VEHICLE_CMD_DO_SET_CAM_TRIGG_DIST: number;
        readonly VEHICLE_CMD_DO_FENCE_ENABLE: number;
        readonly VEHICLE_CMD_DO_PARACHUTE: number;
        readonly VEHICLE_CMD_DO_MOTOR_TEST: number;
        readonly VEHICLE_CMD_DO_INVERTED_FLIGHT: number;
        readonly VEHICLE_CMD_DO_GRIPPER: number;
        readonly VEHICLE_CMD_DO_SET_CAM_TRIGG_INTERVAL: number;
        readonly VEHICLE_CMD_DO_MOUNT_CONTROL_QUAT: number;
        readonly VEHICLE_CMD_DO_GUIDED_MASTER: number;
        readonly VEHICLE_CMD_DO_GUIDED_LIMITS: number;
        readonly VEHICLE_CMD_DO_LAST: number;
        readonly VEHICLE_CMD_PREFLIGHT_CALIBRATION: number;
        readonly PREFLIGHT_CALIBRATION_TEMPERATURE_CALIBRATION: number;
        readonly VEHICLE_CMD_PREFLIGHT_SET_SENSOR_OFFSETS: number;
        readonly VEHICLE_CMD_PREFLIGHT_UAVCAN: number;
        readonly VEHICLE_CMD_PREFLIGHT_STORAGE: number;
        readonly VEHICLE_CMD_PREFLIGHT_REBOOT_SHUTDOWN: number;
        readonly VEHICLE_CMD_OBLIQUE_SURVEY: number;
        readonly VEHICLE_CMD_GIMBAL_DEVICE_INFORMATION: number;
        readonly VEHICLE_CMD_MISSION_START: number;
        readonly VEHICLE_CMD_ACTUATOR_TEST: number;
        readonly VEHICLE_CMD_CONFIGURE_ACTUATOR: number;
        readonly VEHICLE_CMD_COMPONENT_ARM_DISARM: number;
        readonly VEHICLE_CMD_RUN_PREARM_CHECKS: number;
        readonly VEHICLE_CMD_INJECT_FAILURE: number;
        readonly VEHICLE_CMD_START_RX_PAIR: number;
        readonly VEHICLE_CMD_REQUEST_MESSAGE: number;
        readonly VEHICLE_CMD_SET_CAMERA_MODE: number;
        readonly VEHICLE_CMD_SET_CAMERA_ZOOM: number;
        readonly VEHICLE_CMD_SET_CAMERA_FOCUS: number;
        readonly VEHICLE_CMD_DO_GIMBAL_MANAGER_PITCHYAW: number;
        readonly VEHICLE_CMD_DO_GIMBAL_MANAGER_CONFIGURE: number;
        readonly VEHICLE_CMD_IMAGE_START_CAPTURE: number;
        readonly VEHICLE_CMD_DO_TRIGGER_CONTROL: number;
        readonly VEHICLE_CMD_VIDEO_START_CAPTURE: number;
        readonly VEHICLE_CMD_VIDEO_STOP_CAPTURE: number;
        readonly VEHICLE_CMD_LOGGING_START: number;
        readonly VEHICLE_CMD_LOGGING_STOP: number;
        readonly VEHICLE_CMD_CONTROL_HIGH_LATENCY: number;
        readonly VEHICLE_CMD_DO_VTOL_TRANSITION: number;
        readonly VEHICLE_CMD_ARM_AUTHORIZATION_REQUEST: number;
        readonly VEHICLE_CMD_PAYLOAD_PREPARE_DEPLOY: number;
        readonly VEHICLE_CMD_PAYLOAD_CONTROL_DEPLOY: number;
        readonly VEHICLE_CMD_FIXED_MAG_CAL_YAW: number;
        readonly VEHICLE_CMD_DO_WINCH: number;
        readonly VEHICLE_CMD_PX4_INTERNAL_START: number;
        readonly VEHICLE_CMD_SET_GPS_GLOBAL_ORIGIN: number;
        readonly VEHICLE_MOUNT_MODE_RETRACT: number;
        readonly VEHICLE_MOUNT_MODE_NEUTRAL: number;
        readonly VEHICLE_MOUNT_MODE_MAVLINK_TARGETING: number;
        readonly VEHICLE_MOUNT_MODE_RC_TARGETING: number;
        readonly VEHICLE_MOUNT_MODE_GPS_POINT: number;
        readonly VEHICLE_MOUNT_MODE_ENUM_END: number;
        readonly VEHICLE_ROI_NONE: number;
        readonly VEHICLE_ROI_WPNEXT: number;
        readonly VEHICLE_ROI_WPINDEX: number;
        readonly VEHICLE_ROI_LOCATION: number;
        readonly VEHICLE_ROI_TARGET: number;
        readonly VEHICLE_ROI_ENUM_END: number;
        readonly PARACHUTE_ACTION_DISABLE: number;
        readonly PARACHUTE_ACTION_ENABLE: number;
        readonly PARACHUTE_ACTION_RELEASE: number;
        readonly FAILURE_UNIT_SENSOR_GYRO: number;
        readonly FAILURE_UNIT_SENSOR_ACCEL: number;
        readonly FAILURE_UNIT_SENSOR_MAG: number;
        readonly FAILURE_UNIT_SENSOR_BARO: number;
        readonly FAILURE_UNIT_SENSOR_GPS: number;
        readonly FAILURE_UNIT_SENSOR_OPTICAL_FLOW: number;
        readonly FAILURE_UNIT_SENSOR_VIO: number;
        readonly FAILURE_UNIT_SENSOR_DISTANCE_SENSOR: number;
        readonly FAILURE_UNIT_SENSOR_AIRSPEED: number;
        readonly FAILURE_UNIT_SYSTEM_BATTERY: number;
        readonly FAILURE_UNIT_SYSTEM_MOTOR: number;
        readonly FAILURE_UNIT_SYSTEM_SERVO: number;
        readonly FAILURE_UNIT_SYSTEM_AVOIDANCE: number;
        readonly FAILURE_UNIT_SYSTEM_RC_SIGNAL: number;
        readonly FAILURE_UNIT_SYSTEM_MAVLINK_SIGNAL: number;
        readonly FAILURE_TYPE_OK: number;
        readonly FAILURE_TYPE_OFF: number;
        readonly FAILURE_TYPE_STUCK: number;
        readonly FAILURE_TYPE_GARBAGE: number;
        readonly FAILURE_TYPE_WRONG: number;
        readonly FAILURE_TYPE_SLOW: number;
        readonly FAILURE_TYPE_DELAYED: number;
        readonly FAILURE_TYPE_INTERMITTENT: number;
        readonly SPEED_TYPE_AIRSPEED: number;
        readonly SPEED_TYPE_GROUNDSPEED: number;
        readonly SPEED_TYPE_CLIMB_SPEED: number;
        readonly SPEED_TYPE_DESCEND_SPEED: number;
        readonly ARMING_ACTION_DISARM: number;
        readonly ARMING_ACTION_ARM: number;
        readonly GRIPPER_ACTION_RELEASE: number;
        readonly GRIPPER_ACTION_GRAB: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: VehicleCommand): VehicleCommand;
      }
      export interface VehicleCommandAck {
        timestamp: number;
        command: number;
        result: number;
        result_param1: number;
        result_param2: number;
        target_system: number;
        target_component: number;
        from_external: boolean;
      }
      export interface VehicleCommandAckConstructor {
        readonly VEHICLE_CMD_RESULT_ACCEPTED: number;
        readonly VEHICLE_CMD_RESULT_TEMPORARILY_REJECTED: number;
        readonly VEHICLE_CMD_RESULT_DENIED: number;
        readonly VEHICLE_CMD_RESULT_UNSUPPORTED: number;
        readonly VEHICLE_CMD_RESULT_FAILED: number;
        readonly VEHICLE_CMD_RESULT_IN_PROGRESS: number;
        readonly VEHICLE_CMD_RESULT_CANCELLED: number;
        readonly ARM_AUTH_DENIED_REASON_GENERIC: number;
        readonly ARM_AUTH_DENIED_REASON_NONE: number;
        readonly ARM_AUTH_DENIED_REASON_INVALID_WAYPOINT: number;
        readonly ARM_AUTH_DENIED_REASON_TIMEOUT: number;
        readonly ARM_AUTH_DENIED_REASON_AIRSPACE_IN_USE: number;
        readonly ARM_AUTH_DENIED_REASON_BAD_WEATHER: number;
        readonly ORB_QUEUE_LENGTH: number;
        new(other?: VehicleCommandAck): VehicleCommandAck;
      }
      export interface VehicleConstraints {
        timestamp: number;
        speed_up: number;
        speed_down: number;
        want_takeoff: boolean;
      }
      export interface VehicleConstraintsConstructor {
        new(other?: VehicleConstraints): VehicleConstraints;
      }
      export interface VehicleControlMode {
        timestamp: number;
        flag_armed: boolean;
        flag_multicopter_position_control_enabled: boolean;
        flag_control_manual_enabled: boolean;
        flag_control_auto_enabled: boolean;
        flag_control_offboard_enabled: boolean;
        flag_control_rates_enabled: boolean;
        flag_control_attitude_enabled: boolean;
        flag_control_acceleration_enabled: boolean;
        flag_control_velocity_enabled: boolean;
        flag_control_position_enabled: boolean;
        flag_control_altitude_enabled: boolean;
        flag_control_climb_rate_enabled: boolean;
        flag_control_termination_enabled: boolean;
      }
      export interface VehicleControlModeConstructor {
        new(other?: VehicleControlMode): VehicleControlMode;
      }
      export interface VehicleGlobalPosition {
        timestamp: number;
        timestamp_sample: number;
        lat: number;
        lon: number;
        alt: number;
        alt_ellipsoid: number;
        delta_alt: number;
        lat_lon_reset_counter: number;
        alt_reset_counter: number;
        eph: number;
        epv: number;
        terrain_alt: number;
        terrain_alt_valid: boolean;
        dead_reckoning: boolean;
      }
      export interface VehicleGlobalPositionConstructor {
        new(other?: VehicleGlobalPosition): VehicleGlobalPosition;
      }
      export interface VehicleImu {
        timestamp: number;
        timestamp_sample: number;
        accel_device_id: number;
        gyro_device_id: number;
        delta_angle: number[] | Float32Array;
        delta_velocity: number[] | Float32Array;
        delta_angle_dt: number;
        delta_velocity_dt: number;
        delta_angle_clipping: number;
        delta_velocity_clipping: number;
        accel_calibration_count: number;
        gyro_calibration_count: number;
      }
      export interface VehicleImuConstructor {
        readonly CLIPPING_X: number;
        readonly CLIPPING_Y: number;
        readonly CLIPPING_Z: number;
        new(other?: VehicleImu): VehicleImu;
      }
      export interface VehicleImuStatus {
        timestamp: number;
        accel_device_id: number;
        gyro_device_id: number;
        accel_clipping: number[] | Uint32Array;
        gyro_clipping: number[] | Uint32Array;
        accel_error_count: number;
        gyro_error_count: number;
        accel_rate_hz: number;
        gyro_rate_hz: number;
        accel_raw_rate_hz: number;
        gyro_raw_rate_hz: number;
        accel_vibration_metric: number;
        gyro_vibration_metric: number;
        delta_angle_coning_metric: number;
        mean_accel: number[] | Float32Array;
        mean_gyro: number[] | Float32Array;
        var_accel: number[] | Float32Array;
        var_gyro: number[] | Float32Array;
        temperature_accel: number;
        temperature_gyro: number;
      }
      export interface VehicleImuStatusConstructor {
        new(other?: VehicleImuStatus): VehicleImuStatus;
      }
      export interface VehicleLandDetected {
        timestamp: number;
        freefall: boolean;
        ground_contact: boolean;
        maybe_landed: boolean;
        landed: boolean;
        in_ground_effect: boolean;
        in_descend: boolean;
        has_low_throttle: boolean;
        vertical_movement: boolean;
        horizontal_movement: boolean;
        rotational_movement: boolean;
        close_to_ground_or_skipped_check: boolean;
        at_rest: boolean;
      }
      export interface VehicleLandDetectedConstructor {
        new(other?: VehicleLandDetected): VehicleLandDetected;
      }
      export interface VehicleLocalPosition {
        timestamp: number;
        timestamp_sample: number;
        xy_valid: boolean;
        z_valid: boolean;
        v_xy_valid: boolean;
        v_z_valid: boolean;
        x: number;
        y: number;
        z: number;
        delta_xy: number[] | Float32Array;
        xy_reset_counter: number;
        delta_z: number;
        z_reset_counter: number;
        vx: number;
        vy: number;
        vz: number;
        z_deriv: number;
        delta_vxy: number[] | Float32Array;
        vxy_reset_counter: number;
        delta_vz: number;
        vz_reset_counter: number;
        ax: number;
        ay: number;
        az: number;
        heading: number;
        delta_heading: number;
        heading_reset_counter: number;
        heading_good_for_control: boolean;
        xy_global: boolean;
        z_global: boolean;
        ref_timestamp: number;
        ref_lat: number;
        ref_lon: number;
        ref_alt: number;
        dist_bottom: number;
        dist_bottom_valid: boolean;
        dist_bottom_sensor_bitfield: number;
        eph: number;
        epv: number;
        evh: number;
        evv: number;
        dead_reckoning: boolean;
        vxy_max: number;
        vz_max: number;
        hagl_min: number;
        hagl_max: number;
      }
      export interface VehicleLocalPositionConstructor {
        readonly DIST_BOTTOM_SENSOR_NONE: number;
        readonly DIST_BOTTOM_SENSOR_RANGE: number;
        readonly DIST_BOTTOM_SENSOR_FLOW: number;
        new(other?: VehicleLocalPosition): VehicleLocalPosition;
      }
      export interface VehicleLocalPositionSetpoint {
        timestamp: number;
        x: number;
        y: number;
        z: number;
        vx: number;
        vy: number;
        vz: number;
        acceleration: number[] | Float32Array;
        thrust: number[] | Float32Array;
        yaw: number;
        yawspeed: number;
      }
      export interface VehicleLocalPositionSetpointConstructor {
        new(other?: VehicleLocalPositionSetpoint): VehicleLocalPositionSetpoint;
      }
      export interface VehicleMagnetometer {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        magnetometer_ga: number[] | Float32Array;
        calibration_count: number;
      }
      export interface VehicleMagnetometerConstructor {
        new(other?: VehicleMagnetometer): VehicleMagnetometer;
      }
      export interface VehicleOdometry {
        timestamp: number;
        timestamp_sample: number;
        pose_frame: number;
        position: number[] | Float32Array;
        q: number[] | Float32Array;
        velocity_frame: number;
        velocity: number[] | Float32Array;
        angular_velocity: number[] | Float32Array;
        position_variance: number[] | Float32Array;
        orientation_variance: number[] | Float32Array;
        velocity_variance: number[] | Float32Array;
        reset_counter: number;
        quality: number;
      }
      export interface VehicleOdometryConstructor {
        readonly POSE_FRAME_UNKNOWN: number;
        readonly POSE_FRAME_NED: number;
        readonly POSE_FRAME_FRD: number;
        readonly VELOCITY_FRAME_UNKNOWN: number;
        readonly VELOCITY_FRAME_NED: number;
        readonly VELOCITY_FRAME_FRD: number;
        readonly VELOCITY_FRAME_BODY_FRD: number;
        new(other?: VehicleOdometry): VehicleOdometry;
      }
      export interface VehicleOpticalFlow {
        timestamp: number;
        timestamp_sample: number;
        device_id: number;
        pixel_flow: number[] | Float32Array;
        delta_angle: number[] | Float32Array;
        distance_m: number;
        integration_timespan_us: number;
        quality: number;
        max_flow_rate: number;
        min_ground_distance: number;
        max_ground_distance: number;
      }
      export interface VehicleOpticalFlowConstructor {
        new(other?: VehicleOpticalFlow): VehicleOpticalFlow;
      }
      export interface VehicleOpticalFlowVel {
        timestamp: number;
        timestamp_sample: number;
        vel_body: number[] | Float32Array;
        vel_ne: number[] | Float32Array;
        flow_uncompensated_integral: number[] | Float32Array;
        flow_compensated_integral: number[] | Float32Array;
        gyro_rate: number[] | Float32Array;
        gyro_rate_integral: number[] | Float32Array;
      }
      export interface VehicleOpticalFlowVelConstructor {
        new(other?: VehicleOpticalFlowVel): VehicleOpticalFlowVel;
      }
      export interface VehicleRatesSetpoint {
        timestamp: number;
        roll: number;
        pitch: number;
        yaw: number;
        thrust_body: number[] | Float32Array;
        reset_integral: boolean;
      }
      export interface VehicleRatesSetpointConstructor {
        new(other?: VehicleRatesSetpoint): VehicleRatesSetpoint;
      }
      export interface VehicleRoi {
        timestamp: number;
        mode: number;
        lat: number;
        lon: number;
        alt: number;
        roll_offset: number;
        pitch_offset: number;
        yaw_offset: number;
      }
      export interface VehicleRoiConstructor {
        readonly ROI_NONE: number;
        readonly ROI_WPNEXT: number;
        readonly ROI_WPINDEX: number;
        readonly ROI_LOCATION: number;
        readonly ROI_TARGET: number;
        readonly ROI_ENUM_END: number;
        new(other?: VehicleRoi): VehicleRoi;
      }
      export interface VehicleStatus {
        timestamp: number;
        armed_time: number;
        takeoff_time: number;
        arming_state: number;
        latest_arming_reason: number;
        latest_disarming_reason: number;
        nav_state_timestamp: number;
        nav_state_user_intention: number;
        nav_state: number;
        failure_detector_status: number;
        hil_state: number;
        vehicle_type: number;
        failsafe: boolean;
        failsafe_and_user_took_over: boolean;
        gcs_connection_lost: boolean;
        gcs_connection_lost_counter: number;
        high_latency_data_link_lost: boolean;
        is_vtol: boolean;
        is_vtol_tailsitter: boolean;
        in_transition_mode: boolean;
        in_transition_to_fw: boolean;
        system_type: number;
        system_id: number;
        component_id: number;
        safety_button_available: boolean;
        safety_off: boolean;
        power_input_valid: boolean;
        usb_connected: boolean;
        open_drone_id_system_present: boolean;
        open_drone_id_system_healthy: boolean;
        parachute_system_present: boolean;
        parachute_system_healthy: boolean;
        avoidance_system_required: boolean;
        avoidance_system_valid: boolean;
        rc_calibration_in_progress: boolean;
        calibration_enabled: boolean;
        pre_flight_checks_pass: boolean;
      }
      export interface VehicleStatusConstructor {
        readonly ARMING_STATE_INIT: number;
        readonly ARMING_STATE_STANDBY: number;
        readonly ARMING_STATE_ARMED: number;
        readonly ARMING_STATE_STANDBY_ERROR: number;
        readonly ARMING_STATE_SHUTDOWN: number;
        readonly ARMING_STATE_IN_AIR_RESTORE: number;
        readonly ARMING_STATE_MAX: number;
        readonly ARM_DISARM_REASON_TRANSITION_TO_STANDBY: number;
        readonly ARM_DISARM_REASON_RC_STICK: number;
        readonly ARM_DISARM_REASON_RC_SWITCH: number;
        readonly ARM_DISARM_REASON_COMMAND_INTERNAL: number;
        readonly ARM_DISARM_REASON_COMMAND_EXTERNAL: number;
        readonly ARM_DISARM_REASON_MISSION_START: number;
        readonly ARM_DISARM_REASON_SAFETY_BUTTON: number;
        readonly ARM_DISARM_REASON_AUTO_DISARM_LAND: number;
        readonly ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT: number;
        readonly ARM_DISARM_REASON_KILL_SWITCH: number;
        readonly ARM_DISARM_REASON_LOCKDOWN: number;
        readonly ARM_DISARM_REASON_FAILURE_DETECTOR: number;
        readonly ARM_DISARM_REASON_SHUTDOWN: number;
        readonly ARM_DISARM_REASON_UNIT_TEST: number;
        readonly NAVIGATION_STATE_MANUAL: number;
        readonly NAVIGATION_STATE_ALTCTL: number;
        readonly NAVIGATION_STATE_POSCTL: number;
        readonly NAVIGATION_STATE_AUTO_MISSION: number;
        readonly NAVIGATION_STATE_AUTO_LOITER: number;
        readonly NAVIGATION_STATE_AUTO_RTL: number;
        readonly NAVIGATION_STATE_UNUSED3: number;
        readonly NAVIGATION_STATE_UNUSED: number;
        readonly NAVIGATION_STATE_ACRO: number;
        readonly NAVIGATION_STATE_UNUSED1: number;
        readonly NAVIGATION_STATE_DESCEND: number;
        readonly NAVIGATION_STATE_TERMINATION: number;
        readonly NAVIGATION_STATE_OFFBOARD: number;
        readonly NAVIGATION_STATE_STAB: number;
        readonly NAVIGATION_STATE_UNUSED2: number;
        readonly NAVIGATION_STATE_AUTO_TAKEOFF: number;
        readonly NAVIGATION_STATE_AUTO_LAND: number;
        readonly NAVIGATION_STATE_AUTO_FOLLOW_TARGET: number;
        readonly NAVIGATION_STATE_AUTO_PRECLAND: number;
        readonly NAVIGATION_STATE_ORBIT: number;
        readonly NAVIGATION_STATE_AUTO_VTOL_TAKEOFF: number;
        readonly NAVIGATION_STATE_MAX: number;
        readonly FAILURE_NONE: number;
        readonly FAILURE_ROLL: number;
        readonly FAILURE_PITCH: number;
        readonly FAILURE_ALT: number;
        readonly FAILURE_EXT: number;
        readonly FAILURE_ARM_ESC: number;
        readonly FAILURE_BATTERY: number;
        readonly FAILURE_IMBALANCED_PROP: number;
        readonly FAILURE_MOTOR: number;
        readonly HIL_STATE_OFF: number;
        readonly HIL_STATE_ON: number;
        readonly VEHICLE_TYPE_UNKNOWN: number;
        readonly VEHICLE_TYPE_ROTARY_WING: number;
        readonly VEHICLE_TYPE_FIXED_WING: number;
        readonly VEHICLE_TYPE_ROVER: number;
        readonly VEHICLE_TYPE_AIRSHIP: number;
        new(other?: VehicleStatus): VehicleStatus;
      }
      export interface VehicleThrustSetpoint {
        timestamp: number;
        timestamp_sample: number;
        xyz: number[] | Float32Array;
      }
      export interface VehicleThrustSetpointConstructor {
        new(other?: VehicleThrustSetpoint): VehicleThrustSetpoint;
      }
      export interface VehicleTorqueSetpoint {
        timestamp: number;
        timestamp_sample: number;
        xyz: number[] | Float32Array;
      }
      export interface VehicleTorqueSetpointConstructor {
        new(other?: VehicleTorqueSetpoint): VehicleTorqueSetpoint;
      }
      export interface VehicleTrajectoryBezier {
        timestamp: number;
        control_points: px4_msgs.msg.TrajectoryBezier[];
        bezier_order: number;
      }
      export interface VehicleTrajectoryBezierConstructor {
        readonly POINT_0: number;
        readonly POINT_1: number;
        readonly POINT_2: number;
        readonly POINT_3: number;
        readonly POINT_4: number;
        readonly NUMBER_POINTS: number;
        new(other?: VehicleTrajectoryBezier): VehicleTrajectoryBezier;
      }
      export interface VehicleTrajectoryWaypoint {
        timestamp: number;
        type: number;
        waypoints: px4_msgs.msg.TrajectoryWaypoint[];
      }
      export interface VehicleTrajectoryWaypointConstructor {
        readonly MAV_TRAJECTORY_REPRESENTATION_WAYPOINTS: number;
        readonly POINT_0: number;
        readonly POINT_1: number;
        readonly POINT_2: number;
        readonly POINT_3: number;
        readonly POINT_4: number;
        readonly NUMBER_POINTS: number;
        new(other?: VehicleTrajectoryWaypoint): VehicleTrajectoryWaypoint;
      }
      export interface VtolVehicleStatus {
        timestamp: number;
        vehicle_vtol_state: number;
        fixed_wing_system_failure: boolean;
      }
      export interface VtolVehicleStatusConstructor {
        readonly VEHICLE_VTOL_STATE_UNDEFINED: number;
        readonly VEHICLE_VTOL_STATE_TRANSITION_TO_FW: number;
        readonly VEHICLE_VTOL_STATE_TRANSITION_TO_MC: number;
        readonly VEHICLE_VTOL_STATE_MC: number;
        readonly VEHICLE_VTOL_STATE_FW: number;
        new(other?: VtolVehicleStatus): VtolVehicleStatus;
      }
      export interface Wind {
        timestamp: number;
        timestamp_sample: number;
        windspeed_north: number;
        windspeed_east: number;
        variance_north: number;
        variance_east: number;
        tas_innov: number;
        tas_innov_var: number;
        beta_innov: number;
        beta_innov_var: number;
      }
      export interface WindConstructor {
        new(other?: Wind): Wind;
      }
      export interface YawEstimatorStatus {
        timestamp: number;
        timestamp_sample: number;
        yaw_composite: number;
        yaw_variance: number;
        yaw_composite_valid: boolean;
        yaw: number[] | Float32Array;
        innov_vn: number[] | Float32Array;
        innov_ve: number[] | Float32Array;
        weight: number[] | Float32Array;
      }
      export interface YawEstimatorStatusConstructor {
        new(other?: YawEstimatorStatus): YawEstimatorStatus;
      }
    }
  }

  namespace rcl_interfaces {
    namespace msg {
      export interface FloatingPointRange {
        from_value: number;
        to_value: number;
        step: number;
      }
      export interface FloatingPointRangeConstructor {
        new(other?: FloatingPointRange): FloatingPointRange;
      }
      export interface IntegerRange {
        from_value: number;
        to_value: number;
        step: number;
      }
      export interface IntegerRangeConstructor {
        new(other?: IntegerRange): IntegerRange;
      }
      export interface ListParametersResult {
        names: string[];
        prefixes: string[];
      }
      export interface ListParametersResultConstructor {
        new(other?: ListParametersResult): ListParametersResult;
      }
      export interface Log {
        stamp: builtin_interfaces.msg.Time;
        level: number;
        name: string;
        msg: string;
        file: string;
        function: string;
        line: number;
      }
      export interface LogConstructor {
        readonly DEBUG: number;
        readonly INFO: number;
        readonly WARN: number;
        readonly ERROR: number;
        readonly FATAL: number;
        new(other?: Log): Log;
      }
      export interface Parameter {
        name: string;
        value: rcl_interfaces.msg.ParameterValue;
      }
      export interface ParameterConstructor {
        new(other?: Parameter): Parameter;
      }
      export interface ParameterDescriptor {
        name: string;
        type: number;
        description: string;
        additional_constraints: string;
        read_only: boolean;
        dynamic_typing: boolean;
        floating_point_range: rcl_interfaces.msg.FloatingPointRange[];
        integer_range: rcl_interfaces.msg.IntegerRange[];
      }
      export interface ParameterDescriptorConstructor {
        new(other?: ParameterDescriptor): ParameterDescriptor;
      }
      export interface ParameterEvent {
        stamp: builtin_interfaces.msg.Time;
        node: string;
        new_parameters: rcl_interfaces.msg.Parameter[];
        changed_parameters: rcl_interfaces.msg.Parameter[];
        deleted_parameters: rcl_interfaces.msg.Parameter[];
      }
      export interface ParameterEventConstructor {
        new(other?: ParameterEvent): ParameterEvent;
      }
      export interface ParameterEventDescriptors {
        new_parameters: rcl_interfaces.msg.ParameterDescriptor[];
        changed_parameters: rcl_interfaces.msg.ParameterDescriptor[];
        deleted_parameters: rcl_interfaces.msg.ParameterDescriptor[];
      }
      export interface ParameterEventDescriptorsConstructor {
        new(other?: ParameterEventDescriptors): ParameterEventDescriptors;
      }
      export interface ParameterType {
      }
      export interface ParameterTypeConstructor {
        readonly PARAMETER_NOT_SET: number;
        readonly PARAMETER_BOOL: number;
        readonly PARAMETER_INTEGER: number;
        readonly PARAMETER_DOUBLE: number;
        readonly PARAMETER_STRING: number;
        readonly PARAMETER_BYTE_ARRAY: number;
        readonly PARAMETER_BOOL_ARRAY: number;
        readonly PARAMETER_INTEGER_ARRAY: number;
        readonly PARAMETER_DOUBLE_ARRAY: number;
        readonly PARAMETER_STRING_ARRAY: number;
        new(other?: ParameterType): ParameterType;
      }
      export interface ParameterValue {
        type: number;
        bool_value: boolean;
        integer_value: number;
        double_value: number;
        string_value: string;
        byte_array_value: number[] | Uint8Array;
        bool_array_value: boolean[];
        integer_array_value: number[];
        double_array_value: number[] | Float64Array;
        string_array_value: string[];
      }
      export interface ParameterValueConstructor {
        new(other?: ParameterValue): ParameterValue;
      }
      export interface SetParametersResult {
        successful: boolean;
        reason: string;
      }
      export interface SetParametersResultConstructor {
        new(other?: SetParametersResult): SetParametersResult;
      }
    }
    namespace srv {
      export interface DescribeParametersConstructor extends ROSService {
        readonly Request: DescribeParameters_RequestConstructor;
        readonly Response: DescribeParameters_ResponseConstructor;
      }
      export interface DescribeParameters_Request {
        names: string[];
      }
      export interface DescribeParameters_RequestConstructor {
        new(other?: DescribeParameters_Request): DescribeParameters_Request;
      }
      export interface DescribeParameters_Response {
        descriptors: rcl_interfaces.msg.ParameterDescriptor[];
      }
      export interface DescribeParameters_ResponseConstructor {
        new(other?: DescribeParameters_Response): DescribeParameters_Response;
      }
      export interface GetParameterTypesConstructor extends ROSService {
        readonly Request: GetParameterTypes_RequestConstructor;
        readonly Response: GetParameterTypes_ResponseConstructor;
      }
      export interface GetParameterTypes_Request {
        names: string[];
      }
      export interface GetParameterTypes_RequestConstructor {
        new(other?: GetParameterTypes_Request): GetParameterTypes_Request;
      }
      export interface GetParameterTypes_Response {
        types: number[] | Uint8Array;
      }
      export interface GetParameterTypes_ResponseConstructor {
        new(other?: GetParameterTypes_Response): GetParameterTypes_Response;
      }
      export interface GetParametersConstructor extends ROSService {
        readonly Request: GetParameters_RequestConstructor;
        readonly Response: GetParameters_ResponseConstructor;
      }
      export interface GetParameters_Request {
        names: string[];
      }
      export interface GetParameters_RequestConstructor {
        new(other?: GetParameters_Request): GetParameters_Request;
      }
      export interface GetParameters_Response {
        values: rcl_interfaces.msg.ParameterValue[];
      }
      export interface GetParameters_ResponseConstructor {
        new(other?: GetParameters_Response): GetParameters_Response;
      }
      export interface ListParametersConstructor extends ROSService {
        readonly Request: ListParameters_RequestConstructor;
        readonly Response: ListParameters_ResponseConstructor;
      }
      export interface ListParameters_Request {
        prefixes: string[];
        depth: number;
      }
      export interface ListParameters_RequestConstructor {
        readonly DEPTH_RECURSIVE: number;
        new(other?: ListParameters_Request): ListParameters_Request;
      }
      export interface ListParameters_Response {
        result: rcl_interfaces.msg.ListParametersResult;
      }
      export interface ListParameters_ResponseConstructor {
        new(other?: ListParameters_Response): ListParameters_Response;
      }
      export interface SetParametersConstructor extends ROSService {
        readonly Request: SetParameters_RequestConstructor;
        readonly Response: SetParameters_ResponseConstructor;
      }
      export interface SetParametersAtomicallyConstructor extends ROSService {
        readonly Request: SetParametersAtomically_RequestConstructor;
        readonly Response: SetParametersAtomically_ResponseConstructor;
      }
      export interface SetParametersAtomically_Request {
        parameters: rcl_interfaces.msg.Parameter[];
      }
      export interface SetParametersAtomically_RequestConstructor {
        new(other?: SetParametersAtomically_Request): SetParametersAtomically_Request;
      }
      export interface SetParametersAtomically_Response {
        result: rcl_interfaces.msg.SetParametersResult;
      }
      export interface SetParametersAtomically_ResponseConstructor {
        new(other?: SetParametersAtomically_Response): SetParametersAtomically_Response;
      }
      export interface SetParameters_Request {
        parameters: rcl_interfaces.msg.Parameter[];
      }
      export interface SetParameters_RequestConstructor {
        new(other?: SetParameters_Request): SetParameters_Request;
      }
      export interface SetParameters_Response {
        results: rcl_interfaces.msg.SetParametersResult[];
      }
      export interface SetParameters_ResponseConstructor {
        new(other?: SetParameters_Response): SetParameters_Response;
      }
    }
  }

  namespace rmw_dds_common {
    namespace msg {
      export interface Gid {
        data: number[] | Int8Array;
      }
      export interface GidConstructor {
        new(other?: Gid): Gid;
      }
      export interface NodeEntitiesInfo {
        node_namespace: string;
        node_name: string;
        reader_gid_seq: rmw_dds_common.msg.Gid[];
        writer_gid_seq: rmw_dds_common.msg.Gid[];
      }
      export interface NodeEntitiesInfoConstructor {
        new(other?: NodeEntitiesInfo): NodeEntitiesInfo;
      }
      export interface ParticipantEntitiesInfo {
        gid: rmw_dds_common.msg.Gid;
        node_entities_info_seq: rmw_dds_common.msg.NodeEntitiesInfo[];
      }
      export interface ParticipantEntitiesInfoConstructor {
        new(other?: ParticipantEntitiesInfo): ParticipantEntitiesInfo;
      }
    }
  }

  namespace rosbag2_interfaces {
    namespace msg {
      export interface ReadSplitEvent {
        closed_file: string;
        opened_file: string;
      }
      export interface ReadSplitEventConstructor {
        new(other?: ReadSplitEvent): ReadSplitEvent;
      }
      export interface WriteSplitEvent {
        closed_file: string;
        opened_file: string;
      }
      export interface WriteSplitEventConstructor {
        new(other?: WriteSplitEvent): WriteSplitEvent;
      }
    }
    namespace srv {
      export interface BurstConstructor extends ROSService {
        readonly Request: Burst_RequestConstructor;
        readonly Response: Burst_ResponseConstructor;
      }
      export interface Burst_Request {
        num_messages: number;
      }
      export interface Burst_RequestConstructor {
        new(other?: Burst_Request): Burst_Request;
      }
      export interface Burst_Response {
        actually_burst: number;
      }
      export interface Burst_ResponseConstructor {
        new(other?: Burst_Response): Burst_Response;
      }
      export interface GetRateConstructor extends ROSService {
        readonly Request: GetRate_RequestConstructor;
        readonly Response: GetRate_ResponseConstructor;
      }
      export interface GetRate_Request {
      }
      export interface GetRate_RequestConstructor {
        new(other?: GetRate_Request): GetRate_Request;
      }
      export interface GetRate_Response {
        rate: number;
      }
      export interface GetRate_ResponseConstructor {
        new(other?: GetRate_Response): GetRate_Response;
      }
      export interface IsPausedConstructor extends ROSService {
        readonly Request: IsPaused_RequestConstructor;
        readonly Response: IsPaused_ResponseConstructor;
      }
      export interface IsPaused_Request {
      }
      export interface IsPaused_RequestConstructor {
        new(other?: IsPaused_Request): IsPaused_Request;
      }
      export interface IsPaused_Response {
        paused: boolean;
      }
      export interface IsPaused_ResponseConstructor {
        new(other?: IsPaused_Response): IsPaused_Response;
      }
      export interface PauseConstructor extends ROSService {
        readonly Request: Pause_RequestConstructor;
        readonly Response: Pause_ResponseConstructor;
      }
      export interface Pause_Request {
      }
      export interface Pause_RequestConstructor {
        new(other?: Pause_Request): Pause_Request;
      }
      export interface Pause_Response {
      }
      export interface Pause_ResponseConstructor {
        new(other?: Pause_Response): Pause_Response;
      }
      export interface PlayNextConstructor extends ROSService {
        readonly Request: PlayNext_RequestConstructor;
        readonly Response: PlayNext_ResponseConstructor;
      }
      export interface PlayNext_Request {
      }
      export interface PlayNext_RequestConstructor {
        new(other?: PlayNext_Request): PlayNext_Request;
      }
      export interface PlayNext_Response {
        success: boolean;
      }
      export interface PlayNext_ResponseConstructor {
        new(other?: PlayNext_Response): PlayNext_Response;
      }
      export interface ResumeConstructor extends ROSService {
        readonly Request: Resume_RequestConstructor;
        readonly Response: Resume_ResponseConstructor;
      }
      export interface Resume_Request {
      }
      export interface Resume_RequestConstructor {
        new(other?: Resume_Request): Resume_Request;
      }
      export interface Resume_Response {
      }
      export interface Resume_ResponseConstructor {
        new(other?: Resume_Response): Resume_Response;
      }
      export interface SeekConstructor extends ROSService {
        readonly Request: Seek_RequestConstructor;
        readonly Response: Seek_ResponseConstructor;
      }
      export interface Seek_Request {
        time: builtin_interfaces.msg.Time;
      }
      export interface Seek_RequestConstructor {
        new(other?: Seek_Request): Seek_Request;
      }
      export interface Seek_Response {
        success: boolean;
      }
      export interface Seek_ResponseConstructor {
        new(other?: Seek_Response): Seek_Response;
      }
      export interface SetRateConstructor extends ROSService {
        readonly Request: SetRate_RequestConstructor;
        readonly Response: SetRate_ResponseConstructor;
      }
      export interface SetRate_Request {
        rate: number;
      }
      export interface SetRate_RequestConstructor {
        new(other?: SetRate_Request): SetRate_Request;
      }
      export interface SetRate_Response {
        success: boolean;
      }
      export interface SetRate_ResponseConstructor {
        new(other?: SetRate_Response): SetRate_Response;
      }
      export interface SnapshotConstructor extends ROSService {
        readonly Request: Snapshot_RequestConstructor;
        readonly Response: Snapshot_ResponseConstructor;
      }
      export interface Snapshot_Request {
      }
      export interface Snapshot_RequestConstructor {
        new(other?: Snapshot_Request): Snapshot_Request;
      }
      export interface Snapshot_Response {
        success: boolean;
      }
      export interface Snapshot_ResponseConstructor {
        new(other?: Snapshot_Response): Snapshot_Response;
      }
      export interface TogglePausedConstructor extends ROSService {
        readonly Request: TogglePaused_RequestConstructor;
        readonly Response: TogglePaused_ResponseConstructor;
      }
      export interface TogglePaused_Request {
      }
      export interface TogglePaused_RequestConstructor {
        new(other?: TogglePaused_Request): TogglePaused_Request;
      }
      export interface TogglePaused_Response {
      }
      export interface TogglePaused_ResponseConstructor {
        new(other?: TogglePaused_Response): TogglePaused_Response;
      }
    }
  }

  namespace rosgraph_msgs {
    namespace msg {
      export interface Clock {
        clock: builtin_interfaces.msg.Time;
      }
      export interface ClockConstructor {
        new(other?: Clock): Clock;
      }
    }
  }

  namespace sensor_msgs {
    namespace msg {
      export interface BatteryState {
        header: std_msgs.msg.Header;
        voltage: number;
        temperature: number;
        current: number;
        charge: number;
        capacity: number;
        design_capacity: number;
        percentage: number;
        power_supply_status: number;
        power_supply_health: number;
        power_supply_technology: number;
        present: boolean;
        cell_voltage: number[] | Float32Array;
        cell_temperature: number[] | Float32Array;
        location: string;
        serial_number: string;
      }
      export interface BatteryStateConstructor {
        readonly POWER_SUPPLY_STATUS_UNKNOWN: number;
        readonly POWER_SUPPLY_STATUS_CHARGING: number;
        readonly POWER_SUPPLY_STATUS_DISCHARGING: number;
        readonly POWER_SUPPLY_STATUS_NOT_CHARGING: number;
        readonly POWER_SUPPLY_STATUS_FULL: number;
        readonly POWER_SUPPLY_HEALTH_UNKNOWN: number;
        readonly POWER_SUPPLY_HEALTH_GOOD: number;
        readonly POWER_SUPPLY_HEALTH_OVERHEAT: number;
        readonly POWER_SUPPLY_HEALTH_DEAD: number;
        readonly POWER_SUPPLY_HEALTH_OVERVOLTAGE: number;
        readonly POWER_SUPPLY_HEALTH_UNSPEC_FAILURE: number;
        readonly POWER_SUPPLY_HEALTH_COLD: number;
        readonly POWER_SUPPLY_HEALTH_WATCHDOG_TIMER_EXPIRE: number;
        readonly POWER_SUPPLY_HEALTH_SAFETY_TIMER_EXPIRE: number;
        readonly POWER_SUPPLY_TECHNOLOGY_UNKNOWN: number;
        readonly POWER_SUPPLY_TECHNOLOGY_NIMH: number;
        readonly POWER_SUPPLY_TECHNOLOGY_LION: number;
        readonly POWER_SUPPLY_TECHNOLOGY_LIPO: number;
        readonly POWER_SUPPLY_TECHNOLOGY_LIFE: number;
        readonly POWER_SUPPLY_TECHNOLOGY_NICD: number;
        readonly POWER_SUPPLY_TECHNOLOGY_LIMN: number;
        new(other?: BatteryState): BatteryState;
      }
      export interface CameraInfo {
        header: std_msgs.msg.Header;
        height: number;
        width: number;
        distortion_model: string;
        d: number[] | Float64Array;
        k: number[] | Float64Array;
        r: number[] | Float64Array;
        p: number[] | Float64Array;
        binning_x: number;
        binning_y: number;
        roi: sensor_msgs.msg.RegionOfInterest;
      }
      export interface CameraInfoConstructor {
        new(other?: CameraInfo): CameraInfo;
      }
      export interface ChannelFloat32 {
        name: string;
        values: number[] | Float32Array;
      }
      export interface ChannelFloat32Constructor {
        new(other?: ChannelFloat32): ChannelFloat32;
      }
      export interface CompressedImage {
        header: std_msgs.msg.Header;
        format: string;
        data: number[] | Uint8Array;
      }
      export interface CompressedImageConstructor {
        new(other?: CompressedImage): CompressedImage;
      }
      export interface FluidPressure {
        header: std_msgs.msg.Header;
        fluid_pressure: number;
        variance: number;
      }
      export interface FluidPressureConstructor {
        new(other?: FluidPressure): FluidPressure;
      }
      export interface Illuminance {
        header: std_msgs.msg.Header;
        illuminance: number;
        variance: number;
      }
      export interface IlluminanceConstructor {
        new(other?: Illuminance): Illuminance;
      }
      export interface Image {
        header: std_msgs.msg.Header;
        height: number;
        width: number;
        encoding: string;
        is_bigendian: number;
        step: number;
        data: number[] | Uint8Array;
      }
      export interface ImageConstructor {
        new(other?: Image): Image;
      }
      export interface Imu {
        header: std_msgs.msg.Header;
        orientation: geometry_msgs.msg.Quaternion;
        orientation_covariance: number[] | Float64Array;
        angular_velocity: geometry_msgs.msg.Vector3;
        angular_velocity_covariance: number[] | Float64Array;
        linear_acceleration: geometry_msgs.msg.Vector3;
        linear_acceleration_covariance: number[] | Float64Array;
      }
      export interface ImuConstructor {
        new(other?: Imu): Imu;
      }
      export interface JointState {
        header: std_msgs.msg.Header;
        name: string[];
        position: number[] | Float64Array;
        velocity: number[] | Float64Array;
        effort: number[] | Float64Array;
      }
      export interface JointStateConstructor {
        new(other?: JointState): JointState;
      }
      export interface Joy {
        header: std_msgs.msg.Header;
        axes: number[] | Float32Array;
        buttons: number[] | Int32Array;
      }
      export interface JoyConstructor {
        new(other?: Joy): Joy;
      }
      export interface JoyFeedback {
        type: number;
        id: number;
        intensity: number;
      }
      export interface JoyFeedbackConstructor {
        readonly TYPE_LED: number;
        readonly TYPE_RUMBLE: number;
        readonly TYPE_BUZZER: number;
        new(other?: JoyFeedback): JoyFeedback;
      }
      export interface JoyFeedbackArray {
        array: sensor_msgs.msg.JoyFeedback[];
      }
      export interface JoyFeedbackArrayConstructor {
        new(other?: JoyFeedbackArray): JoyFeedbackArray;
      }
      export interface LaserEcho {
        echoes: number[] | Float32Array;
      }
      export interface LaserEchoConstructor {
        new(other?: LaserEcho): LaserEcho;
      }
      export interface LaserScan {
        header: std_msgs.msg.Header;
        angle_min: number;
        angle_max: number;
        angle_increment: number;
        time_increment: number;
        scan_time: number;
        range_min: number;
        range_max: number;
        ranges: number[] | Float32Array;
        intensities: number[] | Float32Array;
      }
      export interface LaserScanConstructor {
        new(other?: LaserScan): LaserScan;
      }
      export interface MagneticField {
        header: std_msgs.msg.Header;
        magnetic_field: geometry_msgs.msg.Vector3;
        magnetic_field_covariance: number[] | Float64Array;
      }
      export interface MagneticFieldConstructor {
        new(other?: MagneticField): MagneticField;
      }
      export interface MultiDOFJointState {
        header: std_msgs.msg.Header;
        joint_names: string[];
        transforms: geometry_msgs.msg.Transform[];
        twist: geometry_msgs.msg.Twist[];
        wrench: geometry_msgs.msg.Wrench[];
      }
      export interface MultiDOFJointStateConstructor {
        new(other?: MultiDOFJointState): MultiDOFJointState;
      }
      export interface MultiEchoLaserScan {
        header: std_msgs.msg.Header;
        angle_min: number;
        angle_max: number;
        angle_increment: number;
        time_increment: number;
        scan_time: number;
        range_min: number;
        range_max: number;
        ranges: sensor_msgs.msg.LaserEcho[];
        intensities: sensor_msgs.msg.LaserEcho[];
      }
      export interface MultiEchoLaserScanConstructor {
        new(other?: MultiEchoLaserScan): MultiEchoLaserScan;
      }
      export interface NavSatFix {
        header: std_msgs.msg.Header;
        status: sensor_msgs.msg.NavSatStatus;
        latitude: number;
        longitude: number;
        altitude: number;
        position_covariance: number[] | Float64Array;
        position_covariance_type: number;
      }
      export interface NavSatFixConstructor {
        readonly COVARIANCE_TYPE_UNKNOWN: number;
        readonly COVARIANCE_TYPE_APPROXIMATED: number;
        readonly COVARIANCE_TYPE_DIAGONAL_KNOWN: number;
        readonly COVARIANCE_TYPE_KNOWN: number;
        new(other?: NavSatFix): NavSatFix;
      }
      export interface NavSatStatus {
        status: number;
        service: number;
      }
      export interface NavSatStatusConstructor {
        readonly STATUS_NO_FIX: number;
        readonly STATUS_FIX: number;
        readonly STATUS_SBAS_FIX: number;
        readonly STATUS_GBAS_FIX: number;
        readonly SERVICE_GPS: number;
        readonly SERVICE_GLONASS: number;
        readonly SERVICE_COMPASS: number;
        readonly SERVICE_GALILEO: number;
        new(other?: NavSatStatus): NavSatStatus;
      }
      export interface PointCloud {
        header: std_msgs.msg.Header;
        points: geometry_msgs.msg.Point32[];
        channels: sensor_msgs.msg.ChannelFloat32[];
      }
      export interface PointCloudConstructor {
        new(other?: PointCloud): PointCloud;
      }
      export interface PointCloud2 {
        header: std_msgs.msg.Header;
        height: number;
        width: number;
        fields: sensor_msgs.msg.PointField[];
        is_bigendian: boolean;
        point_step: number;
        row_step: number;
        data: number[] | Uint8Array;
        is_dense: boolean;
      }
      export interface PointCloud2Constructor {
        new(other?: PointCloud2): PointCloud2;
      }
      export interface PointField {
        name: string;
        offset: number;
        datatype: number;
        count: number;
      }
      export interface PointFieldConstructor {
        readonly INT8: number;
        readonly UINT8: number;
        readonly INT16: number;
        readonly UINT16: number;
        readonly INT32: number;
        readonly UINT32: number;
        readonly FLOAT32: number;
        readonly FLOAT64: number;
        new(other?: PointField): PointField;
      }
      export interface Range {
        header: std_msgs.msg.Header;
        radiation_type: number;
        field_of_view: number;
        min_range: number;
        max_range: number;
        range: number;
      }
      export interface RangeConstructor {
        readonly ULTRASOUND: number;
        readonly INFRARED: number;
        new(other?: Range): Range;
      }
      export interface RegionOfInterest {
        x_offset: number;
        y_offset: number;
        height: number;
        width: number;
        do_rectify: boolean;
      }
      export interface RegionOfInterestConstructor {
        new(other?: RegionOfInterest): RegionOfInterest;
      }
      export interface RelativeHumidity {
        header: std_msgs.msg.Header;
        relative_humidity: number;
        variance: number;
      }
      export interface RelativeHumidityConstructor {
        new(other?: RelativeHumidity): RelativeHumidity;
      }
      export interface Temperature {
        header: std_msgs.msg.Header;
        temperature: number;
        variance: number;
      }
      export interface TemperatureConstructor {
        new(other?: Temperature): Temperature;
      }
      export interface TimeReference {
        header: std_msgs.msg.Header;
        time_ref: builtin_interfaces.msg.Time;
        source: string;
      }
      export interface TimeReferenceConstructor {
        new(other?: TimeReference): TimeReference;
      }
    }
    namespace srv {
      export interface SetCameraInfoConstructor extends ROSService {
        readonly Request: SetCameraInfo_RequestConstructor;
        readonly Response: SetCameraInfo_ResponseConstructor;
      }
      export interface SetCameraInfo_Request {
        camera_info: sensor_msgs.msg.CameraInfo;
      }
      export interface SetCameraInfo_RequestConstructor {
        new(other?: SetCameraInfo_Request): SetCameraInfo_Request;
      }
      export interface SetCameraInfo_Response {
        success: boolean;
        status_message: string;
      }
      export interface SetCameraInfo_ResponseConstructor {
        new(other?: SetCameraInfo_Response): SetCameraInfo_Response;
      }
    }
  }

  namespace shape_msgs {
    namespace msg {
      export interface Mesh {
        triangles: shape_msgs.msg.MeshTriangle[];
        vertices: geometry_msgs.msg.Point[];
      }
      export interface MeshConstructor {
        new(other?: Mesh): Mesh;
      }
      export interface MeshTriangle {
        vertex_indices: number[] | Uint32Array;
      }
      export interface MeshTriangleConstructor {
        new(other?: MeshTriangle): MeshTriangle;
      }
      export interface Plane {
        coef: number[] | Float64Array;
      }
      export interface PlaneConstructor {
        new(other?: Plane): Plane;
      }
      export interface SolidPrimitive {
        type: number;
        dimensions: number[] | Float64Array;
        polygon: geometry_msgs.msg.Polygon;
      }
      export interface SolidPrimitiveConstructor {
        readonly BOX: number;
        readonly SPHERE: number;
        readonly CYLINDER: number;
        readonly CONE: number;
        readonly PRISM: number;
        readonly BOX_X: number;
        readonly BOX_Y: number;
        readonly BOX_Z: number;
        readonly SPHERE_RADIUS: number;
        readonly CYLINDER_HEIGHT: number;
        readonly CYLINDER_RADIUS: number;
        readonly CONE_HEIGHT: number;
        readonly CONE_RADIUS: number;
        readonly PRISM_HEIGHT: number;
        new(other?: SolidPrimitive): SolidPrimitive;
      }
    }
  }

  namespace statistics_msgs {
    namespace msg {
      export interface MetricsMessage {
        measurement_source_name: string;
        metrics_source: string;
        unit: string;
        window_start: builtin_interfaces.msg.Time;
        window_stop: builtin_interfaces.msg.Time;
        statistics: statistics_msgs.msg.StatisticDataPoint[];
      }
      export interface MetricsMessageConstructor {
        new(other?: MetricsMessage): MetricsMessage;
      }
      export interface StatisticDataPoint {
        data_type: number;
        data: number;
      }
      export interface StatisticDataPointConstructor {
        new(other?: StatisticDataPoint): StatisticDataPoint;
      }
      export interface StatisticDataType {
      }
      export interface StatisticDataTypeConstructor {
        readonly STATISTICS_DATA_TYPE_UNINITIALIZED: number;
        readonly STATISTICS_DATA_TYPE_AVERAGE: number;
        readonly STATISTICS_DATA_TYPE_MINIMUM: number;
        readonly STATISTICS_DATA_TYPE_MAXIMUM: number;
        readonly STATISTICS_DATA_TYPE_STDDEV: number;
        readonly STATISTICS_DATA_TYPE_SAMPLE_COUNT: number;
        new(other?: StatisticDataType): StatisticDataType;
      }
    }
  }

  namespace std_msgs {
    namespace msg {
      export interface Bool {
        data: boolean;
      }
      export interface BoolConstructor {
        new(other?: Bool): Bool;
      }
      export interface Byte {
        data: number;
      }
      export interface ByteConstructor {
        new(other?: Byte): Byte;
      }
      export interface ByteMultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Uint8Array;
      }
      export interface ByteMultiArrayConstructor {
        new(other?: ByteMultiArray): ByteMultiArray;
      }
      export interface Char {
        data: number;
      }
      export interface CharConstructor {
        new(other?: Char): Char;
      }
      export interface ColorRGBA {
        r: number;
        g: number;
        b: number;
        a: number;
      }
      export interface ColorRGBAConstructor {
        new(other?: ColorRGBA): ColorRGBA;
      }
      export interface Empty {
      }
      export interface EmptyConstructor {
        new(other?: Empty): Empty;
      }
      export interface Float32 {
        data: number;
      }
      export interface Float32Constructor {
        new(other?: Float32): Float32;
      }
      export interface Float32MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Float32Array;
      }
      export interface Float32MultiArrayConstructor {
        new(other?: Float32MultiArray): Float32MultiArray;
      }
      export interface Float64 {
        data: number;
      }
      export interface Float64Constructor {
        new(other?: Float64): Float64;
      }
      export interface Float64MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Float64Array;
      }
      export interface Float64MultiArrayConstructor {
        new(other?: Float64MultiArray): Float64MultiArray;
      }
      export interface Header {
        stamp: builtin_interfaces.msg.Time;
        frame_id: string;
      }
      export interface HeaderConstructor {
        new(other?: Header): Header;
      }
      export interface Int16 {
        data: number;
      }
      export interface Int16Constructor {
        new(other?: Int16): Int16;
      }
      export interface Int16MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Int16Array;
      }
      export interface Int16MultiArrayConstructor {
        new(other?: Int16MultiArray): Int16MultiArray;
      }
      export interface Int32 {
        data: number;
      }
      export interface Int32Constructor {
        new(other?: Int32): Int32;
      }
      export interface Int32MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Int32Array;
      }
      export interface Int32MultiArrayConstructor {
        new(other?: Int32MultiArray): Int32MultiArray;
      }
      export interface Int64 {
        data: number;
      }
      export interface Int64Constructor {
        new(other?: Int64): Int64;
      }
      export interface Int64MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[];
      }
      export interface Int64MultiArrayConstructor {
        new(other?: Int64MultiArray): Int64MultiArray;
      }
      export interface Int8 {
        data: number;
      }
      export interface Int8Constructor {
        new(other?: Int8): Int8;
      }
      export interface Int8MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Int8Array;
      }
      export interface Int8MultiArrayConstructor {
        new(other?: Int8MultiArray): Int8MultiArray;
      }
      export interface MultiArrayDimension {
        label: string;
        size: number;
        stride: number;
      }
      export interface MultiArrayDimensionConstructor {
        new(other?: MultiArrayDimension): MultiArrayDimension;
      }
      export interface MultiArrayLayout {
        dim: std_msgs.msg.MultiArrayDimension[];
        data_offset: number;
      }
      export interface MultiArrayLayoutConstructor {
        new(other?: MultiArrayLayout): MultiArrayLayout;
      }
      export interface String {
        data: string;
      }
      export interface StringConstructor {
        new(other?: String): String;
      }
      export interface UInt16 {
        data: number;
      }
      export interface UInt16Constructor {
        new(other?: UInt16): UInt16;
      }
      export interface UInt16MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Uint16Array;
      }
      export interface UInt16MultiArrayConstructor {
        new(other?: UInt16MultiArray): UInt16MultiArray;
      }
      export interface UInt32 {
        data: number;
      }
      export interface UInt32Constructor {
        new(other?: UInt32): UInt32;
      }
      export interface UInt32MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Uint32Array;
      }
      export interface UInt32MultiArrayConstructor {
        new(other?: UInt32MultiArray): UInt32MultiArray;
      }
      export interface UInt64 {
        data: number;
      }
      export interface UInt64Constructor {
        new(other?: UInt64): UInt64;
      }
      export interface UInt64MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[];
      }
      export interface UInt64MultiArrayConstructor {
        new(other?: UInt64MultiArray): UInt64MultiArray;
      }
      export interface UInt8 {
        data: number;
      }
      export interface UInt8Constructor {
        new(other?: UInt8): UInt8;
      }
      export interface UInt8MultiArray {
        layout: std_msgs.msg.MultiArrayLayout;
        data: number[] | Uint8Array;
      }
      export interface UInt8MultiArrayConstructor {
        new(other?: UInt8MultiArray): UInt8MultiArray;
      }
    }
  }

  namespace std_srvs {
    namespace srv {
      export interface EmptyConstructor extends ROSService {
        readonly Request: Empty_RequestConstructor;
        readonly Response: Empty_ResponseConstructor;
      }
      export interface Empty_Request {
      }
      export interface Empty_RequestConstructor {
        new(other?: Empty_Request): Empty_Request;
      }
      export interface Empty_Response {
      }
      export interface Empty_ResponseConstructor {
        new(other?: Empty_Response): Empty_Response;
      }
      export interface SetBoolConstructor extends ROSService {
        readonly Request: SetBool_RequestConstructor;
        readonly Response: SetBool_ResponseConstructor;
      }
      export interface SetBool_Request {
        data: boolean;
      }
      export interface SetBool_RequestConstructor {
        new(other?: SetBool_Request): SetBool_Request;
      }
      export interface SetBool_Response {
        success: boolean;
        message: string;
      }
      export interface SetBool_ResponseConstructor {
        new(other?: SetBool_Response): SetBool_Response;
      }
      export interface TriggerConstructor extends ROSService {
        readonly Request: Trigger_RequestConstructor;
        readonly Response: Trigger_ResponseConstructor;
      }
      export interface Trigger_Request {
      }
      export interface Trigger_RequestConstructor {
        new(other?: Trigger_Request): Trigger_Request;
      }
      export interface Trigger_Response {
        success: boolean;
        message: string;
      }
      export interface Trigger_ResponseConstructor {
        new(other?: Trigger_Response): Trigger_Response;
      }
    }
  }

  namespace stereo_msgs {
    namespace msg {
      export interface DisparityImage {
        header: std_msgs.msg.Header;
        image: sensor_msgs.msg.Image;
        f: number;
        t: number;
        valid_window: sensor_msgs.msg.RegionOfInterest;
        min_disparity: number;
        max_disparity: number;
        delta_d: number;
      }
      export interface DisparityImageConstructor {
        new(other?: DisparityImage): DisparityImage;
      }
    }
  }

  namespace tf2_msgs {
    namespace action {
      export interface LookupTransformConstructor {
        readonly Goal: LookupTransform_GoalConstructor;
        readonly Result: LookupTransform_ResultConstructor;
        readonly Feedback: LookupTransform_FeedbackConstructor;
      }
      export interface LookupTransform_Feedback {
      }
      export interface LookupTransform_FeedbackConstructor {
        new(other?: LookupTransform_Feedback): LookupTransform_Feedback;
      }
      export interface LookupTransform_FeedbackMessage {
        goal_id: unique_identifier_msgs.msg.UUID;
        feedback: tf2_msgs.action.LookupTransform_Feedback;
      }
      export interface LookupTransform_FeedbackMessageConstructor {
        new(other?: LookupTransform_FeedbackMessage): LookupTransform_FeedbackMessage;
      }
      export interface LookupTransform_GetResultConstructor extends ROSService {
        readonly Request: LookupTransform_GetResult_RequestConstructor;
        readonly Response: LookupTransform_GetResult_ResponseConstructor;
      }
      export interface LookupTransform_GetResult_Request {
        goal_id: unique_identifier_msgs.msg.UUID;
      }
      export interface LookupTransform_GetResult_RequestConstructor {
        new(other?: LookupTransform_GetResult_Request): LookupTransform_GetResult_Request;
      }
      export interface LookupTransform_GetResult_Response {
        status: number;
        result: tf2_msgs.action.LookupTransform_Result;
      }
      export interface LookupTransform_GetResult_ResponseConstructor {
        new(other?: LookupTransform_GetResult_Response): LookupTransform_GetResult_Response;
      }
      export interface LookupTransform_Goal {
        target_frame: string;
        source_frame: string;
        source_time: builtin_interfaces.msg.Time;
        timeout: builtin_interfaces.msg.Duration;
        target_time: builtin_interfaces.msg.Time;
        fixed_frame: string;
        advanced: boolean;
      }
      export interface LookupTransform_GoalConstructor {
        new(other?: LookupTransform_Goal): LookupTransform_Goal;
      }
      export interface LookupTransform_Result {
        transform: geometry_msgs.msg.TransformStamped;
        error: tf2_msgs.msg.TF2Error;
      }
      export interface LookupTransform_ResultConstructor {
        new(other?: LookupTransform_Result): LookupTransform_Result;
      }
      export interface LookupTransform_SendGoalConstructor extends ROSService {
        readonly Request: LookupTransform_SendGoal_RequestConstructor;
        readonly Response: LookupTransform_SendGoal_ResponseConstructor;
      }
      export interface LookupTransform_SendGoal_Request {
        goal_id: unique_identifier_msgs.msg.UUID;
        goal: tf2_msgs.action.LookupTransform_Goal;
      }
      export interface LookupTransform_SendGoal_RequestConstructor {
        new(other?: LookupTransform_SendGoal_Request): LookupTransform_SendGoal_Request;
      }
      export interface LookupTransform_SendGoal_Response {
        accepted: boolean;
        stamp: builtin_interfaces.msg.Time;
      }
      export interface LookupTransform_SendGoal_ResponseConstructor {
        new(other?: LookupTransform_SendGoal_Response): LookupTransform_SendGoal_Response;
      }
    }
    namespace msg {
      export interface TF2Error {
        error: number;
        error_string: string;
      }
      export interface TF2ErrorConstructor {
        readonly NO_ERROR: number;
        readonly LOOKUP_ERROR: number;
        readonly CONNECTIVITY_ERROR: number;
        readonly EXTRAPOLATION_ERROR: number;
        readonly INVALID_ARGUMENT_ERROR: number;
        readonly TIMEOUT_ERROR: number;
        readonly TRANSFORM_ERROR: number;
        new(other?: TF2Error): TF2Error;
      }
      export interface TFMessage {
        transforms: geometry_msgs.msg.TransformStamped[];
      }
      export interface TFMessageConstructor {
        new(other?: TFMessage): TFMessage;
      }
    }
    namespace srv {
      export interface FrameGraphConstructor extends ROSService {
        readonly Request: FrameGraph_RequestConstructor;
        readonly Response: FrameGraph_ResponseConstructor;
      }
      export interface FrameGraph_Request {
      }
      export interface FrameGraph_RequestConstructor {
        new(other?: FrameGraph_Request): FrameGraph_Request;
      }
      export interface FrameGraph_Response {
        frame_yaml: string;
      }
      export interface FrameGraph_ResponseConstructor {
        new(other?: FrameGraph_Response): FrameGraph_Response;
      }
    }
  }

  namespace trajectory_msgs {
    namespace msg {
      export interface JointTrajectory {
        header: std_msgs.msg.Header;
        joint_names: string[];
        points: trajectory_msgs.msg.JointTrajectoryPoint[];
      }
      export interface JointTrajectoryConstructor {
        new(other?: JointTrajectory): JointTrajectory;
      }
      export interface JointTrajectoryPoint {
        positions: number[] | Float64Array;
        velocities: number[] | Float64Array;
        accelerations: number[] | Float64Array;
        effort: number[] | Float64Array;
        time_from_start: builtin_interfaces.msg.Duration;
      }
      export interface JointTrajectoryPointConstructor {
        new(other?: JointTrajectoryPoint): JointTrajectoryPoint;
      }
      export interface MultiDOFJointTrajectory {
        header: std_msgs.msg.Header;
        joint_names: string[];
        points: trajectory_msgs.msg.MultiDOFJointTrajectoryPoint[];
      }
      export interface MultiDOFJointTrajectoryConstructor {
        new(other?: MultiDOFJointTrajectory): MultiDOFJointTrajectory;
      }
      export interface MultiDOFJointTrajectoryPoint {
        transforms: geometry_msgs.msg.Transform[];
        velocities: geometry_msgs.msg.Twist[];
        accelerations: geometry_msgs.msg.Twist[];
        time_from_start: builtin_interfaces.msg.Duration;
      }
      export interface MultiDOFJointTrajectoryPointConstructor {
        new(other?: MultiDOFJointTrajectoryPoint): MultiDOFJointTrajectoryPoint;
      }
    }
  }

  namespace unique_identifier_msgs {
    namespace msg {
      export interface UUID {
        uuid: number[] | Uint8Array;
      }
      export interface UUIDConstructor {
        new(other?: UUID): UUID;
      }
    }
  }

  namespace visualization_msgs {
    namespace msg {
      export interface ImageMarker {
        header: std_msgs.msg.Header;
        ns: string;
        id: number;
        type: number;
        action: number;
        position: geometry_msgs.msg.Point;
        scale: number;
        outline_color: std_msgs.msg.ColorRGBA;
        filled: number;
        fill_color: std_msgs.msg.ColorRGBA;
        lifetime: builtin_interfaces.msg.Duration;
        points: geometry_msgs.msg.Point[];
        outline_colors: std_msgs.msg.ColorRGBA[];
      }
      export interface ImageMarkerConstructor {
        readonly CIRCLE: number;
        readonly LINE_STRIP: number;
        readonly LINE_LIST: number;
        readonly POLYGON: number;
        readonly POINTS: number;
        readonly ADD: number;
        readonly REMOVE: number;
        new(other?: ImageMarker): ImageMarker;
      }
      export interface InteractiveMarker {
        header: std_msgs.msg.Header;
        pose: geometry_msgs.msg.Pose;
        name: string;
        description: string;
        scale: number;
        menu_entries: visualization_msgs.msg.MenuEntry[];
        controls: visualization_msgs.msg.InteractiveMarkerControl[];
      }
      export interface InteractiveMarkerConstructor {
        new(other?: InteractiveMarker): InteractiveMarker;
      }
      export interface InteractiveMarkerControl {
        name: string;
        orientation: geometry_msgs.msg.Quaternion;
        orientation_mode: number;
        interaction_mode: number;
        always_visible: boolean;
        markers: visualization_msgs.msg.Marker[];
        independent_marker_orientation: boolean;
        description: string;
      }
      export interface InteractiveMarkerControlConstructor {
        readonly INHERIT: number;
        readonly FIXED: number;
        readonly VIEW_FACING: number;
        readonly NONE: number;
        readonly MENU: number;
        readonly BUTTON: number;
        readonly MOVE_AXIS: number;
        readonly MOVE_PLANE: number;
        readonly ROTATE_AXIS: number;
        readonly MOVE_ROTATE: number;
        readonly MOVE_3D: number;
        readonly ROTATE_3D: number;
        readonly MOVE_ROTATE_3D: number;
        new(other?: InteractiveMarkerControl): InteractiveMarkerControl;
      }
      export interface InteractiveMarkerFeedback {
        header: std_msgs.msg.Header;
        client_id: string;
        marker_name: string;
        control_name: string;
        event_type: number;
        pose: geometry_msgs.msg.Pose;
        menu_entry_id: number;
        mouse_point: geometry_msgs.msg.Point;
        mouse_point_valid: boolean;
      }
      export interface InteractiveMarkerFeedbackConstructor {
        readonly KEEP_ALIVE: number;
        readonly POSE_UPDATE: number;
        readonly MENU_SELECT: number;
        readonly BUTTON_CLICK: number;
        readonly MOUSE_DOWN: number;
        readonly MOUSE_UP: number;
        new(other?: InteractiveMarkerFeedback): InteractiveMarkerFeedback;
      }
      export interface InteractiveMarkerInit {
        server_id: string;
        seq_num: number;
        markers: visualization_msgs.msg.InteractiveMarker[];
      }
      export interface InteractiveMarkerInitConstructor {
        new(other?: InteractiveMarkerInit): InteractiveMarkerInit;
      }
      export interface InteractiveMarkerPose {
        header: std_msgs.msg.Header;
        pose: geometry_msgs.msg.Pose;
        name: string;
      }
      export interface InteractiveMarkerPoseConstructor {
        new(other?: InteractiveMarkerPose): InteractiveMarkerPose;
      }
      export interface InteractiveMarkerUpdate {
        server_id: string;
        seq_num: number;
        type: number;
        markers: visualization_msgs.msg.InteractiveMarker[];
        poses: visualization_msgs.msg.InteractiveMarkerPose[];
        erases: string[];
      }
      export interface InteractiveMarkerUpdateConstructor {
        readonly KEEP_ALIVE: number;
        readonly UPDATE: number;
        new(other?: InteractiveMarkerUpdate): InteractiveMarkerUpdate;
      }
      export interface Marker {
        header: std_msgs.msg.Header;
        ns: string;
        id: number;
        type: number;
        action: number;
        pose: geometry_msgs.msg.Pose;
        scale: geometry_msgs.msg.Vector3;
        color: std_msgs.msg.ColorRGBA;
        lifetime: builtin_interfaces.msg.Duration;
        frame_locked: boolean;
        points: geometry_msgs.msg.Point[];
        colors: std_msgs.msg.ColorRGBA[];
        texture_resource: string;
        texture: sensor_msgs.msg.CompressedImage;
        uv_coordinates: visualization_msgs.msg.UVCoordinate[];
        text: string;
        mesh_resource: string;
        mesh_file: visualization_msgs.msg.MeshFile;
        mesh_use_embedded_materials: boolean;
      }
      export interface MarkerConstructor {
        readonly ARROW: number;
        readonly CUBE: number;
        readonly SPHERE: number;
        readonly CYLINDER: number;
        readonly LINE_STRIP: number;
        readonly LINE_LIST: number;
        readonly CUBE_LIST: number;
        readonly SPHERE_LIST: number;
        readonly POINTS: number;
        readonly TEXT_VIEW_FACING: number;
        readonly MESH_RESOURCE: number;
        readonly TRIANGLE_LIST: number;
        readonly ADD: number;
        readonly MODIFY: number;
        readonly DELETE: number;
        readonly DELETEALL: number;
        new(other?: Marker): Marker;
      }
      export interface MarkerArray {
        markers: visualization_msgs.msg.Marker[];
      }
      export interface MarkerArrayConstructor {
        new(other?: MarkerArray): MarkerArray;
      }
      export interface MenuEntry {
        id: number;
        parent_id: number;
        title: string;
        command: string;
        command_type: number;
      }
      export interface MenuEntryConstructor {
        readonly FEEDBACK: number;
        readonly ROSRUN: number;
        readonly ROSLAUNCH: number;
        new(other?: MenuEntry): MenuEntry;
      }
      export interface MeshFile {
        filename: string;
        data: number[] | Uint8Array;
      }
      export interface MeshFileConstructor {
        new(other?: MeshFile): MeshFile;
      }
      export interface UVCoordinate {
        u: number;
        v: number;
      }
      export interface UVCoordinateConstructor {
        new(other?: UVCoordinate): UVCoordinate;
      }
    }
    namespace srv {
      export interface GetInteractiveMarkersConstructor extends ROSService {
        readonly Request: GetInteractiveMarkers_RequestConstructor;
        readonly Response: GetInteractiveMarkers_ResponseConstructor;
      }
      export interface GetInteractiveMarkers_Request {
      }
      export interface GetInteractiveMarkers_RequestConstructor {
        new(other?: GetInteractiveMarkers_Request): GetInteractiveMarkers_Request;
      }
      export interface GetInteractiveMarkers_Response {
        sequence_number: number;
        markers: visualization_msgs.msg.InteractiveMarker[];
      }
      export interface GetInteractiveMarkers_ResponseConstructor {
        new(other?: GetInteractiveMarkers_Response): GetInteractiveMarkers_Response;
      }
    }
  }

  type MessagesMap = {
    'string': string,
    'action_msgs/msg/GoalInfo': action_msgs.msg.GoalInfo,
    'action_msgs/msg/GoalStatus': action_msgs.msg.GoalStatus,
    'action_msgs/msg/GoalStatusArray': action_msgs.msg.GoalStatusArray,
    'action_msgs/srv/CancelGoal_Request': action_msgs.srv.CancelGoal_Request,
    'action_msgs/srv/CancelGoal_Response': action_msgs.srv.CancelGoal_Response,
    'actionlib_msgs/msg/GoalID': actionlib_msgs.msg.GoalID,
    'actionlib_msgs/msg/GoalStatus': actionlib_msgs.msg.GoalStatus,
    'actionlib_msgs/msg/GoalStatusArray': actionlib_msgs.msg.GoalStatusArray,
    'builtin_interfaces/msg/Duration': builtin_interfaces.msg.Duration,
    'builtin_interfaces/msg/Time': builtin_interfaces.msg.Time,
    'composition_interfaces/srv/ListNodes_Request': composition_interfaces.srv.ListNodes_Request,
    'composition_interfaces/srv/ListNodes_Response': composition_interfaces.srv.ListNodes_Response,
    'composition_interfaces/srv/LoadNode_Request': composition_interfaces.srv.LoadNode_Request,
    'composition_interfaces/srv/LoadNode_Response': composition_interfaces.srv.LoadNode_Response,
    'composition_interfaces/srv/UnloadNode_Request': composition_interfaces.srv.UnloadNode_Request,
    'composition_interfaces/srv/UnloadNode_Response': composition_interfaces.srv.UnloadNode_Response,
    'diagnostic_msgs/msg/DiagnosticArray': diagnostic_msgs.msg.DiagnosticArray,
    'diagnostic_msgs/msg/DiagnosticStatus': diagnostic_msgs.msg.DiagnosticStatus,
    'diagnostic_msgs/msg/KeyValue': diagnostic_msgs.msg.KeyValue,
    'diagnostic_msgs/srv/AddDiagnostics_Request': diagnostic_msgs.srv.AddDiagnostics_Request,
    'diagnostic_msgs/srv/AddDiagnostics_Response': diagnostic_msgs.srv.AddDiagnostics_Response,
    'diagnostic_msgs/srv/SelfTest_Request': diagnostic_msgs.srv.SelfTest_Request,
    'diagnostic_msgs/srv/SelfTest_Response': diagnostic_msgs.srv.SelfTest_Response,
    'geometry_msgs/msg/Accel': geometry_msgs.msg.Accel,
    'geometry_msgs/msg/AccelStamped': geometry_msgs.msg.AccelStamped,
    'geometry_msgs/msg/AccelWithCovariance': geometry_msgs.msg.AccelWithCovariance,
    'geometry_msgs/msg/AccelWithCovarianceStamped': geometry_msgs.msg.AccelWithCovarianceStamped,
    'geometry_msgs/msg/Inertia': geometry_msgs.msg.Inertia,
    'geometry_msgs/msg/InertiaStamped': geometry_msgs.msg.InertiaStamped,
    'geometry_msgs/msg/Point': geometry_msgs.msg.Point,
    'geometry_msgs/msg/Point32': geometry_msgs.msg.Point32,
    'geometry_msgs/msg/PointStamped': geometry_msgs.msg.PointStamped,
    'geometry_msgs/msg/Polygon': geometry_msgs.msg.Polygon,
    'geometry_msgs/msg/PolygonStamped': geometry_msgs.msg.PolygonStamped,
    'geometry_msgs/msg/Pose': geometry_msgs.msg.Pose,
    'geometry_msgs/msg/Pose2D': geometry_msgs.msg.Pose2D,
    'geometry_msgs/msg/PoseArray': geometry_msgs.msg.PoseArray,
    'geometry_msgs/msg/PoseStamped': geometry_msgs.msg.PoseStamped,
    'geometry_msgs/msg/PoseWithCovariance': geometry_msgs.msg.PoseWithCovariance,
    'geometry_msgs/msg/PoseWithCovarianceStamped': geometry_msgs.msg.PoseWithCovarianceStamped,
    'geometry_msgs/msg/Quaternion': geometry_msgs.msg.Quaternion,
    'geometry_msgs/msg/QuaternionStamped': geometry_msgs.msg.QuaternionStamped,
    'geometry_msgs/msg/Transform': geometry_msgs.msg.Transform,
    'geometry_msgs/msg/TransformStamped': geometry_msgs.msg.TransformStamped,
    'geometry_msgs/msg/Twist': geometry_msgs.msg.Twist,
    'geometry_msgs/msg/TwistStamped': geometry_msgs.msg.TwistStamped,
    'geometry_msgs/msg/TwistWithCovariance': geometry_msgs.msg.TwistWithCovariance,
    'geometry_msgs/msg/TwistWithCovarianceStamped': geometry_msgs.msg.TwistWithCovarianceStamped,
    'geometry_msgs/msg/Vector3': geometry_msgs.msg.Vector3,
    'geometry_msgs/msg/Vector3Stamped': geometry_msgs.msg.Vector3Stamped,
    'geometry_msgs/msg/VelocityStamped': geometry_msgs.msg.VelocityStamped,
    'geometry_msgs/msg/Wrench': geometry_msgs.msg.Wrench,
    'geometry_msgs/msg/WrenchStamped': geometry_msgs.msg.WrenchStamped,
    'lifecycle_msgs/msg/State': lifecycle_msgs.msg.State,
    'lifecycle_msgs/msg/Transition': lifecycle_msgs.msg.Transition,
    'lifecycle_msgs/msg/TransitionDescription': lifecycle_msgs.msg.TransitionDescription,
    'lifecycle_msgs/msg/TransitionEvent': lifecycle_msgs.msg.TransitionEvent,
    'lifecycle_msgs/srv/ChangeState_Request': lifecycle_msgs.srv.ChangeState_Request,
    'lifecycle_msgs/srv/ChangeState_Response': lifecycle_msgs.srv.ChangeState_Response,
    'lifecycle_msgs/srv/GetAvailableStates_Request': lifecycle_msgs.srv.GetAvailableStates_Request,
    'lifecycle_msgs/srv/GetAvailableStates_Response': lifecycle_msgs.srv.GetAvailableStates_Response,
    'lifecycle_msgs/srv/GetAvailableTransitions_Request': lifecycle_msgs.srv.GetAvailableTransitions_Request,
    'lifecycle_msgs/srv/GetAvailableTransitions_Response': lifecycle_msgs.srv.GetAvailableTransitions_Response,
    'lifecycle_msgs/srv/GetState_Request': lifecycle_msgs.srv.GetState_Request,
    'lifecycle_msgs/srv/GetState_Response': lifecycle_msgs.srv.GetState_Response,
    'map_msgs/msg/OccupancyGridUpdate': map_msgs.msg.OccupancyGridUpdate,
    'map_msgs/msg/PointCloud2Update': map_msgs.msg.PointCloud2Update,
    'map_msgs/msg/ProjectedMap': map_msgs.msg.ProjectedMap,
    'map_msgs/msg/ProjectedMapInfo': map_msgs.msg.ProjectedMapInfo,
    'map_msgs/srv/GetMapROI_Request': map_msgs.srv.GetMapROI_Request,
    'map_msgs/srv/GetMapROI_Response': map_msgs.srv.GetMapROI_Response,
    'map_msgs/srv/GetPointMapROI_Request': map_msgs.srv.GetPointMapROI_Request,
    'map_msgs/srv/GetPointMapROI_Response': map_msgs.srv.GetPointMapROI_Response,
    'map_msgs/srv/GetPointMap_Request': map_msgs.srv.GetPointMap_Request,
    'map_msgs/srv/GetPointMap_Response': map_msgs.srv.GetPointMap_Response,
    'map_msgs/srv/ProjectedMapsInfo_Request': map_msgs.srv.ProjectedMapsInfo_Request,
    'map_msgs/srv/ProjectedMapsInfo_Response': map_msgs.srv.ProjectedMapsInfo_Response,
    'map_msgs/srv/SaveMap_Request': map_msgs.srv.SaveMap_Request,
    'map_msgs/srv/SaveMap_Response': map_msgs.srv.SaveMap_Response,
    'map_msgs/srv/SetMapProjections_Request': map_msgs.srv.SetMapProjections_Request,
    'map_msgs/srv/SetMapProjections_Response': map_msgs.srv.SetMapProjections_Response,
    'nav_msgs/msg/GridCells': nav_msgs.msg.GridCells,
    'nav_msgs/msg/MapMetaData': nav_msgs.msg.MapMetaData,
    'nav_msgs/msg/OccupancyGrid': nav_msgs.msg.OccupancyGrid,
    'nav_msgs/msg/Odometry': nav_msgs.msg.Odometry,
    'nav_msgs/msg/Path': nav_msgs.msg.Path,
    'nav_msgs/srv/GetMap_Request': nav_msgs.srv.GetMap_Request,
    'nav_msgs/srv/GetMap_Response': nav_msgs.srv.GetMap_Response,
    'nav_msgs/srv/GetPlan_Request': nav_msgs.srv.GetPlan_Request,
    'nav_msgs/srv/GetPlan_Response': nav_msgs.srv.GetPlan_Response,
    'nav_msgs/srv/LoadMap_Request': nav_msgs.srv.LoadMap_Request,
    'nav_msgs/srv/LoadMap_Response': nav_msgs.srv.LoadMap_Response,
    'nav_msgs/srv/SetMap_Request': nav_msgs.srv.SetMap_Request,
    'nav_msgs/srv/SetMap_Response': nav_msgs.srv.SetMap_Response,
    'px4_msgs/msg/ActionRequest': px4_msgs.msg.ActionRequest,
    'px4_msgs/msg/ActuatorArmed': px4_msgs.msg.ActuatorArmed,
    'px4_msgs/msg/ActuatorControlsStatus': px4_msgs.msg.ActuatorControlsStatus,
    'px4_msgs/msg/ActuatorMotors': px4_msgs.msg.ActuatorMotors,
    'px4_msgs/msg/ActuatorOutputs': px4_msgs.msg.ActuatorOutputs,
    'px4_msgs/msg/ActuatorServos': px4_msgs.msg.ActuatorServos,
    'px4_msgs/msg/ActuatorServosTrim': px4_msgs.msg.ActuatorServosTrim,
    'px4_msgs/msg/ActuatorTest': px4_msgs.msg.ActuatorTest,
    'px4_msgs/msg/AdcReport': px4_msgs.msg.AdcReport,
    'px4_msgs/msg/Airspeed': px4_msgs.msg.Airspeed,
    'px4_msgs/msg/AirspeedValidated': px4_msgs.msg.AirspeedValidated,
    'px4_msgs/msg/AirspeedWind': px4_msgs.msg.AirspeedWind,
    'px4_msgs/msg/AutotuneAttitudeControlStatus': px4_msgs.msg.AutotuneAttitudeControlStatus,
    'px4_msgs/msg/BatteryStatus': px4_msgs.msg.BatteryStatus,
    'px4_msgs/msg/ButtonEvent': px4_msgs.msg.ButtonEvent,
    'px4_msgs/msg/CameraCapture': px4_msgs.msg.CameraCapture,
    'px4_msgs/msg/CameraStatus': px4_msgs.msg.CameraStatus,
    'px4_msgs/msg/CameraTrigger': px4_msgs.msg.CameraTrigger,
    'px4_msgs/msg/CellularStatus': px4_msgs.msg.CellularStatus,
    'px4_msgs/msg/CollisionConstraints': px4_msgs.msg.CollisionConstraints,
    'px4_msgs/msg/CollisionReport': px4_msgs.msg.CollisionReport,
    'px4_msgs/msg/ControlAllocatorStatus': px4_msgs.msg.ControlAllocatorStatus,
    'px4_msgs/msg/Cpuload': px4_msgs.msg.Cpuload,
    'px4_msgs/msg/DebugArray': px4_msgs.msg.DebugArray,
    'px4_msgs/msg/DebugKeyValue': px4_msgs.msg.DebugKeyValue,
    'px4_msgs/msg/DebugValue': px4_msgs.msg.DebugValue,
    'px4_msgs/msg/DebugVect': px4_msgs.msg.DebugVect,
    'px4_msgs/msg/DifferentialPressure': px4_msgs.msg.DifferentialPressure,
    'px4_msgs/msg/DistanceSensor': px4_msgs.msg.DistanceSensor,
    'px4_msgs/msg/Ekf2Timestamps': px4_msgs.msg.Ekf2Timestamps,
    'px4_msgs/msg/EscReport': px4_msgs.msg.EscReport,
    'px4_msgs/msg/EscStatus': px4_msgs.msg.EscStatus,
    'px4_msgs/msg/EstimatorAidSource1d': px4_msgs.msg.EstimatorAidSource1d,
    'px4_msgs/msg/EstimatorAidSource2d': px4_msgs.msg.EstimatorAidSource2d,
    'px4_msgs/msg/EstimatorAidSource3d': px4_msgs.msg.EstimatorAidSource3d,
    'px4_msgs/msg/EstimatorBias': px4_msgs.msg.EstimatorBias,
    'px4_msgs/msg/EstimatorBias3d': px4_msgs.msg.EstimatorBias3d,
    'px4_msgs/msg/EstimatorEventFlags': px4_msgs.msg.EstimatorEventFlags,
    'px4_msgs/msg/EstimatorGpsStatus': px4_msgs.msg.EstimatorGpsStatus,
    'px4_msgs/msg/EstimatorInnovations': px4_msgs.msg.EstimatorInnovations,
    'px4_msgs/msg/EstimatorSelectorStatus': px4_msgs.msg.EstimatorSelectorStatus,
    'px4_msgs/msg/EstimatorSensorBias': px4_msgs.msg.EstimatorSensorBias,
    'px4_msgs/msg/EstimatorStates': px4_msgs.msg.EstimatorStates,
    'px4_msgs/msg/EstimatorStatus': px4_msgs.msg.EstimatorStatus,
    'px4_msgs/msg/EstimatorStatusFlags': px4_msgs.msg.EstimatorStatusFlags,
    'px4_msgs/msg/Event': px4_msgs.msg.Event,
    'px4_msgs/msg/FailsafeFlags': px4_msgs.msg.FailsafeFlags,
    'px4_msgs/msg/FailureDetectorStatus': px4_msgs.msg.FailureDetectorStatus,
    'px4_msgs/msg/FollowTarget': px4_msgs.msg.FollowTarget,
    'px4_msgs/msg/FollowTargetEstimator': px4_msgs.msg.FollowTargetEstimator,
    'px4_msgs/msg/FollowTargetStatus': px4_msgs.msg.FollowTargetStatus,
    'px4_msgs/msg/GeneratorStatus': px4_msgs.msg.GeneratorStatus,
    'px4_msgs/msg/GeofenceResult': px4_msgs.msg.GeofenceResult,
    'px4_msgs/msg/GimbalControls': px4_msgs.msg.GimbalControls,
    'px4_msgs/msg/GimbalDeviceAttitudeStatus': px4_msgs.msg.GimbalDeviceAttitudeStatus,
    'px4_msgs/msg/GimbalDeviceInformation': px4_msgs.msg.GimbalDeviceInformation,
    'px4_msgs/msg/GimbalDeviceSetAttitude': px4_msgs.msg.GimbalDeviceSetAttitude,
    'px4_msgs/msg/GimbalManagerInformation': px4_msgs.msg.GimbalManagerInformation,
    'px4_msgs/msg/GimbalManagerSetAttitude': px4_msgs.msg.GimbalManagerSetAttitude,
    'px4_msgs/msg/GimbalManagerSetManualControl': px4_msgs.msg.GimbalManagerSetManualControl,
    'px4_msgs/msg/GimbalManagerStatus': px4_msgs.msg.GimbalManagerStatus,
    'px4_msgs/msg/GpsDump': px4_msgs.msg.GpsDump,
    'px4_msgs/msg/GpsInjectData': px4_msgs.msg.GpsInjectData,
    'px4_msgs/msg/Gripper': px4_msgs.msg.Gripper,
    'px4_msgs/msg/HealthReport': px4_msgs.msg.HealthReport,
    'px4_msgs/msg/HeaterStatus': px4_msgs.msg.HeaterStatus,
    'px4_msgs/msg/HomePosition': px4_msgs.msg.HomePosition,
    'px4_msgs/msg/HoverThrustEstimate': px4_msgs.msg.HoverThrustEstimate,
    'px4_msgs/msg/InputRc': px4_msgs.msg.InputRc,
    'px4_msgs/msg/InternalCombustionEngineStatus': px4_msgs.msg.InternalCombustionEngineStatus,
    'px4_msgs/msg/IridiumsbdStatus': px4_msgs.msg.IridiumsbdStatus,
    'px4_msgs/msg/IrlockReport': px4_msgs.msg.IrlockReport,
    'px4_msgs/msg/LandingGear': px4_msgs.msg.LandingGear,
    'px4_msgs/msg/LandingGearWheel': px4_msgs.msg.LandingGearWheel,
    'px4_msgs/msg/LandingTargetInnovations': px4_msgs.msg.LandingTargetInnovations,
    'px4_msgs/msg/LandingTargetPose': px4_msgs.msg.LandingTargetPose,
    'px4_msgs/msg/LaunchDetectionStatus': px4_msgs.msg.LaunchDetectionStatus,
    'px4_msgs/msg/LedControl': px4_msgs.msg.LedControl,
    'px4_msgs/msg/LogMessage': px4_msgs.msg.LogMessage,
    'px4_msgs/msg/LoggerStatus': px4_msgs.msg.LoggerStatus,
    'px4_msgs/msg/MagWorkerData': px4_msgs.msg.MagWorkerData,
    'px4_msgs/msg/MagnetometerBiasEstimate': px4_msgs.msg.MagnetometerBiasEstimate,
    'px4_msgs/msg/ManualControlSetpoint': px4_msgs.msg.ManualControlSetpoint,
    'px4_msgs/msg/ManualControlSwitches': px4_msgs.msg.ManualControlSwitches,
    'px4_msgs/msg/MavlinkLog': px4_msgs.msg.MavlinkLog,
    'px4_msgs/msg/MavlinkTunnel': px4_msgs.msg.MavlinkTunnel,
    'px4_msgs/msg/Mission': px4_msgs.msg.Mission,
    'px4_msgs/msg/MissionResult': px4_msgs.msg.MissionResult,
    'px4_msgs/msg/ModeCompleted': px4_msgs.msg.ModeCompleted,
    'px4_msgs/msg/MountOrientation': px4_msgs.msg.MountOrientation,
    'px4_msgs/msg/NavigatorMissionItem': px4_msgs.msg.NavigatorMissionItem,
    'px4_msgs/msg/NormalizedUnsignedSetpoint': px4_msgs.msg.NormalizedUnsignedSetpoint,
    'px4_msgs/msg/NpfgStatus': px4_msgs.msg.NpfgStatus,
    'px4_msgs/msg/ObstacleDistance': px4_msgs.msg.ObstacleDistance,
    'px4_msgs/msg/OffboardControlMode': px4_msgs.msg.OffboardControlMode,
    'px4_msgs/msg/OnboardComputerStatus': px4_msgs.msg.OnboardComputerStatus,
    'px4_msgs/msg/OrbTest': px4_msgs.msg.OrbTest,
    'px4_msgs/msg/OrbTestLarge': px4_msgs.msg.OrbTestLarge,
    'px4_msgs/msg/OrbTestMedium': px4_msgs.msg.OrbTestMedium,
    'px4_msgs/msg/OrbitStatus': px4_msgs.msg.OrbitStatus,
    'px4_msgs/msg/ParameterUpdate': px4_msgs.msg.ParameterUpdate,
    'px4_msgs/msg/Ping': px4_msgs.msg.Ping,
    'px4_msgs/msg/PositionControllerLandingStatus': px4_msgs.msg.PositionControllerLandingStatus,
    'px4_msgs/msg/PositionControllerStatus': px4_msgs.msg.PositionControllerStatus,
    'px4_msgs/msg/PositionSetpoint': px4_msgs.msg.PositionSetpoint,
    'px4_msgs/msg/PositionSetpointTriplet': px4_msgs.msg.PositionSetpointTriplet,
    'px4_msgs/msg/PowerButtonState': px4_msgs.msg.PowerButtonState,
    'px4_msgs/msg/PowerMonitor': px4_msgs.msg.PowerMonitor,
    'px4_msgs/msg/PpsCapture': px4_msgs.msg.PpsCapture,
    'px4_msgs/msg/PwmInput': px4_msgs.msg.PwmInput,
    'px4_msgs/msg/Px4ioStatus': px4_msgs.msg.Px4ioStatus,
    'px4_msgs/msg/QshellReq': px4_msgs.msg.QshellReq,
    'px4_msgs/msg/QshellRetval': px4_msgs.msg.QshellRetval,
    'px4_msgs/msg/RadioStatus': px4_msgs.msg.RadioStatus,
    'px4_msgs/msg/RateCtrlStatus': px4_msgs.msg.RateCtrlStatus,
    'px4_msgs/msg/RcChannels': px4_msgs.msg.RcChannels,
    'px4_msgs/msg/RcParameterMap': px4_msgs.msg.RcParameterMap,
    'px4_msgs/msg/Rpm': px4_msgs.msg.Rpm,
    'px4_msgs/msg/RtlTimeEstimate': px4_msgs.msg.RtlTimeEstimate,
    'px4_msgs/msg/SatelliteInfo': px4_msgs.msg.SatelliteInfo,
    'px4_msgs/msg/SensorAccel': px4_msgs.msg.SensorAccel,
    'px4_msgs/msg/SensorAccelFifo': px4_msgs.msg.SensorAccelFifo,
    'px4_msgs/msg/SensorBaro': px4_msgs.msg.SensorBaro,
    'px4_msgs/msg/SensorCombined': px4_msgs.msg.SensorCombined,
    'px4_msgs/msg/SensorCorrection': px4_msgs.msg.SensorCorrection,
    'px4_msgs/msg/SensorGnssRelative': px4_msgs.msg.SensorGnssRelative,
    'px4_msgs/msg/SensorGps': px4_msgs.msg.SensorGps,
    'px4_msgs/msg/SensorGyro': px4_msgs.msg.SensorGyro,
    'px4_msgs/msg/SensorGyroFft': px4_msgs.msg.SensorGyroFft,
    'px4_msgs/msg/SensorGyroFifo': px4_msgs.msg.SensorGyroFifo,
    'px4_msgs/msg/SensorHygrometer': px4_msgs.msg.SensorHygrometer,
    'px4_msgs/msg/SensorMag': px4_msgs.msg.SensorMag,
    'px4_msgs/msg/SensorOpticalFlow': px4_msgs.msg.SensorOpticalFlow,
    'px4_msgs/msg/SensorPreflightMag': px4_msgs.msg.SensorPreflightMag,
    'px4_msgs/msg/SensorSelection': px4_msgs.msg.SensorSelection,
    'px4_msgs/msg/SensorUwb': px4_msgs.msg.SensorUwb,
    'px4_msgs/msg/SensorsStatus': px4_msgs.msg.SensorsStatus,
    'px4_msgs/msg/SensorsStatusImu': px4_msgs.msg.SensorsStatusImu,
    'px4_msgs/msg/SystemPower': px4_msgs.msg.SystemPower,
    'px4_msgs/msg/TakeoffStatus': px4_msgs.msg.TakeoffStatus,
    'px4_msgs/msg/TaskStackInfo': px4_msgs.msg.TaskStackInfo,
    'px4_msgs/msg/TecsStatus': px4_msgs.msg.TecsStatus,
    'px4_msgs/msg/TelemetryStatus': px4_msgs.msg.TelemetryStatus,
    'px4_msgs/msg/TiltrotorExtraControls': px4_msgs.msg.TiltrotorExtraControls,
    'px4_msgs/msg/TimesyncStatus': px4_msgs.msg.TimesyncStatus,
    'px4_msgs/msg/TrajectoryBezier': px4_msgs.msg.TrajectoryBezier,
    'px4_msgs/msg/TrajectorySetpoint': px4_msgs.msg.TrajectorySetpoint,
    'px4_msgs/msg/TrajectoryWaypoint': px4_msgs.msg.TrajectoryWaypoint,
    'px4_msgs/msg/TransponderReport': px4_msgs.msg.TransponderReport,
    'px4_msgs/msg/TuneControl': px4_msgs.msg.TuneControl,
    'px4_msgs/msg/UavcanParameterRequest': px4_msgs.msg.UavcanParameterRequest,
    'px4_msgs/msg/UavcanParameterValue': px4_msgs.msg.UavcanParameterValue,
    'px4_msgs/msg/UlogStream': px4_msgs.msg.UlogStream,
    'px4_msgs/msg/UlogStreamAck': px4_msgs.msg.UlogStreamAck,
    'px4_msgs/msg/VehicleAcceleration': px4_msgs.msg.VehicleAcceleration,
    'px4_msgs/msg/VehicleAirData': px4_msgs.msg.VehicleAirData,
    'px4_msgs/msg/VehicleAngularAccelerationSetpoint': px4_msgs.msg.VehicleAngularAccelerationSetpoint,
    'px4_msgs/msg/VehicleAngularVelocity': px4_msgs.msg.VehicleAngularVelocity,
    'px4_msgs/msg/VehicleAttitude': px4_msgs.msg.VehicleAttitude,
    'px4_msgs/msg/VehicleAttitudeSetpoint': px4_msgs.msg.VehicleAttitudeSetpoint,
    'px4_msgs/msg/VehicleCommand': px4_msgs.msg.VehicleCommand,
    'px4_msgs/msg/VehicleCommandAck': px4_msgs.msg.VehicleCommandAck,
    'px4_msgs/msg/VehicleConstraints': px4_msgs.msg.VehicleConstraints,
    'px4_msgs/msg/VehicleControlMode': px4_msgs.msg.VehicleControlMode,
    'px4_msgs/msg/VehicleGlobalPosition': px4_msgs.msg.VehicleGlobalPosition,
    'px4_msgs/msg/VehicleImu': px4_msgs.msg.VehicleImu,
    'px4_msgs/msg/VehicleImuStatus': px4_msgs.msg.VehicleImuStatus,
    'px4_msgs/msg/VehicleLandDetected': px4_msgs.msg.VehicleLandDetected,
    'px4_msgs/msg/VehicleLocalPosition': px4_msgs.msg.VehicleLocalPosition,
    'px4_msgs/msg/VehicleLocalPositionSetpoint': px4_msgs.msg.VehicleLocalPositionSetpoint,
    'px4_msgs/msg/VehicleMagnetometer': px4_msgs.msg.VehicleMagnetometer,
    'px4_msgs/msg/VehicleOdometry': px4_msgs.msg.VehicleOdometry,
    'px4_msgs/msg/VehicleOpticalFlow': px4_msgs.msg.VehicleOpticalFlow,
    'px4_msgs/msg/VehicleOpticalFlowVel': px4_msgs.msg.VehicleOpticalFlowVel,
    'px4_msgs/msg/VehicleRatesSetpoint': px4_msgs.msg.VehicleRatesSetpoint,
    'px4_msgs/msg/VehicleRoi': px4_msgs.msg.VehicleRoi,
    'px4_msgs/msg/VehicleStatus': px4_msgs.msg.VehicleStatus,
    'px4_msgs/msg/VehicleThrustSetpoint': px4_msgs.msg.VehicleThrustSetpoint,
    'px4_msgs/msg/VehicleTorqueSetpoint': px4_msgs.msg.VehicleTorqueSetpoint,
    'px4_msgs/msg/VehicleTrajectoryBezier': px4_msgs.msg.VehicleTrajectoryBezier,
    'px4_msgs/msg/VehicleTrajectoryWaypoint': px4_msgs.msg.VehicleTrajectoryWaypoint,
    'px4_msgs/msg/VtolVehicleStatus': px4_msgs.msg.VtolVehicleStatus,
    'px4_msgs/msg/Wind': px4_msgs.msg.Wind,
    'px4_msgs/msg/YawEstimatorStatus': px4_msgs.msg.YawEstimatorStatus,
    'rcl_interfaces/msg/FloatingPointRange': rcl_interfaces.msg.FloatingPointRange,
    'rcl_interfaces/msg/IntegerRange': rcl_interfaces.msg.IntegerRange,
    'rcl_interfaces/msg/ListParametersResult': rcl_interfaces.msg.ListParametersResult,
    'rcl_interfaces/msg/Log': rcl_interfaces.msg.Log,
    'rcl_interfaces/msg/Parameter': rcl_interfaces.msg.Parameter,
    'rcl_interfaces/msg/ParameterDescriptor': rcl_interfaces.msg.ParameterDescriptor,
    'rcl_interfaces/msg/ParameterEvent': rcl_interfaces.msg.ParameterEvent,
    'rcl_interfaces/msg/ParameterEventDescriptors': rcl_interfaces.msg.ParameterEventDescriptors,
    'rcl_interfaces/msg/ParameterType': rcl_interfaces.msg.ParameterType,
    'rcl_interfaces/msg/ParameterValue': rcl_interfaces.msg.ParameterValue,
    'rcl_interfaces/msg/SetParametersResult': rcl_interfaces.msg.SetParametersResult,
    'rcl_interfaces/srv/DescribeParameters_Request': rcl_interfaces.srv.DescribeParameters_Request,
    'rcl_interfaces/srv/DescribeParameters_Response': rcl_interfaces.srv.DescribeParameters_Response,
    'rcl_interfaces/srv/GetParameterTypes_Request': rcl_interfaces.srv.GetParameterTypes_Request,
    'rcl_interfaces/srv/GetParameterTypes_Response': rcl_interfaces.srv.GetParameterTypes_Response,
    'rcl_interfaces/srv/GetParameters_Request': rcl_interfaces.srv.GetParameters_Request,
    'rcl_interfaces/srv/GetParameters_Response': rcl_interfaces.srv.GetParameters_Response,
    'rcl_interfaces/srv/ListParameters_Request': rcl_interfaces.srv.ListParameters_Request,
    'rcl_interfaces/srv/ListParameters_Response': rcl_interfaces.srv.ListParameters_Response,
    'rcl_interfaces/srv/SetParametersAtomically_Request': rcl_interfaces.srv.SetParametersAtomically_Request,
    'rcl_interfaces/srv/SetParametersAtomically_Response': rcl_interfaces.srv.SetParametersAtomically_Response,
    'rcl_interfaces/srv/SetParameters_Request': rcl_interfaces.srv.SetParameters_Request,
    'rcl_interfaces/srv/SetParameters_Response': rcl_interfaces.srv.SetParameters_Response,
    'rmw_dds_common/msg/Gid': rmw_dds_common.msg.Gid,
    'rmw_dds_common/msg/NodeEntitiesInfo': rmw_dds_common.msg.NodeEntitiesInfo,
    'rmw_dds_common/msg/ParticipantEntitiesInfo': rmw_dds_common.msg.ParticipantEntitiesInfo,
    'rosbag2_interfaces/msg/ReadSplitEvent': rosbag2_interfaces.msg.ReadSplitEvent,
    'rosbag2_interfaces/msg/WriteSplitEvent': rosbag2_interfaces.msg.WriteSplitEvent,
    'rosbag2_interfaces/srv/Burst_Request': rosbag2_interfaces.srv.Burst_Request,
    'rosbag2_interfaces/srv/Burst_Response': rosbag2_interfaces.srv.Burst_Response,
    'rosbag2_interfaces/srv/GetRate_Request': rosbag2_interfaces.srv.GetRate_Request,
    'rosbag2_interfaces/srv/GetRate_Response': rosbag2_interfaces.srv.GetRate_Response,
    'rosbag2_interfaces/srv/IsPaused_Request': rosbag2_interfaces.srv.IsPaused_Request,
    'rosbag2_interfaces/srv/IsPaused_Response': rosbag2_interfaces.srv.IsPaused_Response,
    'rosbag2_interfaces/srv/Pause_Request': rosbag2_interfaces.srv.Pause_Request,
    'rosbag2_interfaces/srv/Pause_Response': rosbag2_interfaces.srv.Pause_Response,
    'rosbag2_interfaces/srv/PlayNext_Request': rosbag2_interfaces.srv.PlayNext_Request,
    'rosbag2_interfaces/srv/PlayNext_Response': rosbag2_interfaces.srv.PlayNext_Response,
    'rosbag2_interfaces/srv/Resume_Request': rosbag2_interfaces.srv.Resume_Request,
    'rosbag2_interfaces/srv/Resume_Response': rosbag2_interfaces.srv.Resume_Response,
    'rosbag2_interfaces/srv/Seek_Request': rosbag2_interfaces.srv.Seek_Request,
    'rosbag2_interfaces/srv/Seek_Response': rosbag2_interfaces.srv.Seek_Response,
    'rosbag2_interfaces/srv/SetRate_Request': rosbag2_interfaces.srv.SetRate_Request,
    'rosbag2_interfaces/srv/SetRate_Response': rosbag2_interfaces.srv.SetRate_Response,
    'rosbag2_interfaces/srv/Snapshot_Request': rosbag2_interfaces.srv.Snapshot_Request,
    'rosbag2_interfaces/srv/Snapshot_Response': rosbag2_interfaces.srv.Snapshot_Response,
    'rosbag2_interfaces/srv/TogglePaused_Request': rosbag2_interfaces.srv.TogglePaused_Request,
    'rosbag2_interfaces/srv/TogglePaused_Response': rosbag2_interfaces.srv.TogglePaused_Response,
    'rosgraph_msgs/msg/Clock': rosgraph_msgs.msg.Clock,
    'sensor_msgs/msg/BatteryState': sensor_msgs.msg.BatteryState,
    'sensor_msgs/msg/CameraInfo': sensor_msgs.msg.CameraInfo,
    'sensor_msgs/msg/ChannelFloat32': sensor_msgs.msg.ChannelFloat32,
    'sensor_msgs/msg/CompressedImage': sensor_msgs.msg.CompressedImage,
    'sensor_msgs/msg/FluidPressure': sensor_msgs.msg.FluidPressure,
    'sensor_msgs/msg/Illuminance': sensor_msgs.msg.Illuminance,
    'sensor_msgs/msg/Image': sensor_msgs.msg.Image,
    'sensor_msgs/msg/Imu': sensor_msgs.msg.Imu,
    'sensor_msgs/msg/JointState': sensor_msgs.msg.JointState,
    'sensor_msgs/msg/Joy': sensor_msgs.msg.Joy,
    'sensor_msgs/msg/JoyFeedback': sensor_msgs.msg.JoyFeedback,
    'sensor_msgs/msg/JoyFeedbackArray': sensor_msgs.msg.JoyFeedbackArray,
    'sensor_msgs/msg/LaserEcho': sensor_msgs.msg.LaserEcho,
    'sensor_msgs/msg/LaserScan': sensor_msgs.msg.LaserScan,
    'sensor_msgs/msg/MagneticField': sensor_msgs.msg.MagneticField,
    'sensor_msgs/msg/MultiDOFJointState': sensor_msgs.msg.MultiDOFJointState,
    'sensor_msgs/msg/MultiEchoLaserScan': sensor_msgs.msg.MultiEchoLaserScan,
    'sensor_msgs/msg/NavSatFix': sensor_msgs.msg.NavSatFix,
    'sensor_msgs/msg/NavSatStatus': sensor_msgs.msg.NavSatStatus,
    'sensor_msgs/msg/PointCloud': sensor_msgs.msg.PointCloud,
    'sensor_msgs/msg/PointCloud2': sensor_msgs.msg.PointCloud2,
    'sensor_msgs/msg/PointField': sensor_msgs.msg.PointField,
    'sensor_msgs/msg/Range': sensor_msgs.msg.Range,
    'sensor_msgs/msg/RegionOfInterest': sensor_msgs.msg.RegionOfInterest,
    'sensor_msgs/msg/RelativeHumidity': sensor_msgs.msg.RelativeHumidity,
    'sensor_msgs/msg/Temperature': sensor_msgs.msg.Temperature,
    'sensor_msgs/msg/TimeReference': sensor_msgs.msg.TimeReference,
    'sensor_msgs/srv/SetCameraInfo_Request': sensor_msgs.srv.SetCameraInfo_Request,
    'sensor_msgs/srv/SetCameraInfo_Response': sensor_msgs.srv.SetCameraInfo_Response,
    'shape_msgs/msg/Mesh': shape_msgs.msg.Mesh,
    'shape_msgs/msg/MeshTriangle': shape_msgs.msg.MeshTriangle,
    'shape_msgs/msg/Plane': shape_msgs.msg.Plane,
    'shape_msgs/msg/SolidPrimitive': shape_msgs.msg.SolidPrimitive,
    'statistics_msgs/msg/MetricsMessage': statistics_msgs.msg.MetricsMessage,
    'statistics_msgs/msg/StatisticDataPoint': statistics_msgs.msg.StatisticDataPoint,
    'statistics_msgs/msg/StatisticDataType': statistics_msgs.msg.StatisticDataType,
    'std_msgs/msg/Bool': std_msgs.msg.Bool,
    'std_msgs/msg/Byte': std_msgs.msg.Byte,
    'std_msgs/msg/ByteMultiArray': std_msgs.msg.ByteMultiArray,
    'std_msgs/msg/Char': std_msgs.msg.Char,
    'std_msgs/msg/ColorRGBA': std_msgs.msg.ColorRGBA,
    'std_msgs/msg/Empty': std_msgs.msg.Empty,
    'std_msgs/msg/Float32': std_msgs.msg.Float32,
    'std_msgs/msg/Float32MultiArray': std_msgs.msg.Float32MultiArray,
    'std_msgs/msg/Float64': std_msgs.msg.Float64,
    'std_msgs/msg/Float64MultiArray': std_msgs.msg.Float64MultiArray,
    'std_msgs/msg/Header': std_msgs.msg.Header,
    'std_msgs/msg/Int16': std_msgs.msg.Int16,
    'std_msgs/msg/Int16MultiArray': std_msgs.msg.Int16MultiArray,
    'std_msgs/msg/Int32': std_msgs.msg.Int32,
    'std_msgs/msg/Int32MultiArray': std_msgs.msg.Int32MultiArray,
    'std_msgs/msg/Int64': std_msgs.msg.Int64,
    'std_msgs/msg/Int64MultiArray': std_msgs.msg.Int64MultiArray,
    'std_msgs/msg/Int8': std_msgs.msg.Int8,
    'std_msgs/msg/Int8MultiArray': std_msgs.msg.Int8MultiArray,
    'std_msgs/msg/MultiArrayDimension': std_msgs.msg.MultiArrayDimension,
    'std_msgs/msg/MultiArrayLayout': std_msgs.msg.MultiArrayLayout,
    'std_msgs/msg/String': std_msgs.msg.String,
    'std_msgs/msg/UInt16': std_msgs.msg.UInt16,
    'std_msgs/msg/UInt16MultiArray': std_msgs.msg.UInt16MultiArray,
    'std_msgs/msg/UInt32': std_msgs.msg.UInt32,
    'std_msgs/msg/UInt32MultiArray': std_msgs.msg.UInt32MultiArray,
    'std_msgs/msg/UInt64': std_msgs.msg.UInt64,
    'std_msgs/msg/UInt64MultiArray': std_msgs.msg.UInt64MultiArray,
    'std_msgs/msg/UInt8': std_msgs.msg.UInt8,
    'std_msgs/msg/UInt8MultiArray': std_msgs.msg.UInt8MultiArray,
    'std_srvs/srv/Empty_Request': std_srvs.srv.Empty_Request,
    'std_srvs/srv/Empty_Response': std_srvs.srv.Empty_Response,
    'std_srvs/srv/SetBool_Request': std_srvs.srv.SetBool_Request,
    'std_srvs/srv/SetBool_Response': std_srvs.srv.SetBool_Response,
    'std_srvs/srv/Trigger_Request': std_srvs.srv.Trigger_Request,
    'std_srvs/srv/Trigger_Response': std_srvs.srv.Trigger_Response,
    'stereo_msgs/msg/DisparityImage': stereo_msgs.msg.DisparityImage,
    'tf2_msgs/action/LookupTransform_Feedback': tf2_msgs.action.LookupTransform_Feedback,
    'tf2_msgs/action/LookupTransform_FeedbackMessage': tf2_msgs.action.LookupTransform_FeedbackMessage,
    'tf2_msgs/action/LookupTransform_GetResult_Request': tf2_msgs.action.LookupTransform_GetResult_Request,
    'tf2_msgs/action/LookupTransform_GetResult_Response': tf2_msgs.action.LookupTransform_GetResult_Response,
    'tf2_msgs/action/LookupTransform_Goal': tf2_msgs.action.LookupTransform_Goal,
    'tf2_msgs/action/LookupTransform_Result': tf2_msgs.action.LookupTransform_Result,
    'tf2_msgs/action/LookupTransform_SendGoal_Request': tf2_msgs.action.LookupTransform_SendGoal_Request,
    'tf2_msgs/action/LookupTransform_SendGoal_Response': tf2_msgs.action.LookupTransform_SendGoal_Response,
    'tf2_msgs/msg/TF2Error': tf2_msgs.msg.TF2Error,
    'tf2_msgs/msg/TFMessage': tf2_msgs.msg.TFMessage,
    'tf2_msgs/srv/FrameGraph_Request': tf2_msgs.srv.FrameGraph_Request,
    'tf2_msgs/srv/FrameGraph_Response': tf2_msgs.srv.FrameGraph_Response,
    'trajectory_msgs/msg/JointTrajectory': trajectory_msgs.msg.JointTrajectory,
    'trajectory_msgs/msg/JointTrajectoryPoint': trajectory_msgs.msg.JointTrajectoryPoint,
    'trajectory_msgs/msg/MultiDOFJointTrajectory': trajectory_msgs.msg.MultiDOFJointTrajectory,
    'trajectory_msgs/msg/MultiDOFJointTrajectoryPoint': trajectory_msgs.msg.MultiDOFJointTrajectoryPoint,
    'unique_identifier_msgs/msg/UUID': unique_identifier_msgs.msg.UUID,
    'visualization_msgs/msg/ImageMarker': visualization_msgs.msg.ImageMarker,
    'visualization_msgs/msg/InteractiveMarker': visualization_msgs.msg.InteractiveMarker,
    'visualization_msgs/msg/InteractiveMarkerControl': visualization_msgs.msg.InteractiveMarkerControl,
    'visualization_msgs/msg/InteractiveMarkerFeedback': visualization_msgs.msg.InteractiveMarkerFeedback,
    'visualization_msgs/msg/InteractiveMarkerInit': visualization_msgs.msg.InteractiveMarkerInit,
    'visualization_msgs/msg/InteractiveMarkerPose': visualization_msgs.msg.InteractiveMarkerPose,
    'visualization_msgs/msg/InteractiveMarkerUpdate': visualization_msgs.msg.InteractiveMarkerUpdate,
    'visualization_msgs/msg/Marker': visualization_msgs.msg.Marker,
    'visualization_msgs/msg/MarkerArray': visualization_msgs.msg.MarkerArray,
    'visualization_msgs/msg/MenuEntry': visualization_msgs.msg.MenuEntry,
    'visualization_msgs/msg/MeshFile': visualization_msgs.msg.MeshFile,
    'visualization_msgs/msg/UVCoordinate': visualization_msgs.msg.UVCoordinate,
    'visualization_msgs/srv/GetInteractiveMarkers_Request': visualization_msgs.srv.GetInteractiveMarkers_Request,
    'visualization_msgs/srv/GetInteractiveMarkers_Response': visualization_msgs.srv.GetInteractiveMarkers_Response,
  };
  type MessageTypeClassName = keyof MessagesMap;
  type Message = MessagesMap[MessageTypeClassName];
  type MessageType<T> = T extends MessageTypeClassName ? MessagesMap[T] : object;

  type MessageTypeClassConstructorMap = {
    'string': never,
    'action_msgs/msg/GoalInfo': action_msgs.msg.GoalInfoConstructor,
    'action_msgs/msg/GoalStatus': action_msgs.msg.GoalStatusConstructor,
    'action_msgs/msg/GoalStatusArray': action_msgs.msg.GoalStatusArrayConstructor,
    'action_msgs/srv/CancelGoal_Request': action_msgs.srv.CancelGoal_RequestConstructor,
    'action_msgs/srv/CancelGoal_Response': action_msgs.srv.CancelGoal_ResponseConstructor,
    'actionlib_msgs/msg/GoalID': actionlib_msgs.msg.GoalIDConstructor,
    'actionlib_msgs/msg/GoalStatus': actionlib_msgs.msg.GoalStatusConstructor,
    'actionlib_msgs/msg/GoalStatusArray': actionlib_msgs.msg.GoalStatusArrayConstructor,
    'builtin_interfaces/msg/Duration': builtin_interfaces.msg.DurationConstructor,
    'builtin_interfaces/msg/Time': builtin_interfaces.msg.TimeConstructor,
    'composition_interfaces/srv/ListNodes_Request': composition_interfaces.srv.ListNodes_RequestConstructor,
    'composition_interfaces/srv/ListNodes_Response': composition_interfaces.srv.ListNodes_ResponseConstructor,
    'composition_interfaces/srv/LoadNode_Request': composition_interfaces.srv.LoadNode_RequestConstructor,
    'composition_interfaces/srv/LoadNode_Response': composition_interfaces.srv.LoadNode_ResponseConstructor,
    'composition_interfaces/srv/UnloadNode_Request': composition_interfaces.srv.UnloadNode_RequestConstructor,
    'composition_interfaces/srv/UnloadNode_Response': composition_interfaces.srv.UnloadNode_ResponseConstructor,
    'diagnostic_msgs/msg/DiagnosticArray': diagnostic_msgs.msg.DiagnosticArrayConstructor,
    'diagnostic_msgs/msg/DiagnosticStatus': diagnostic_msgs.msg.DiagnosticStatusConstructor,
    'diagnostic_msgs/msg/KeyValue': diagnostic_msgs.msg.KeyValueConstructor,
    'diagnostic_msgs/srv/AddDiagnostics_Request': diagnostic_msgs.srv.AddDiagnostics_RequestConstructor,
    'diagnostic_msgs/srv/AddDiagnostics_Response': diagnostic_msgs.srv.AddDiagnostics_ResponseConstructor,
    'diagnostic_msgs/srv/SelfTest_Request': diagnostic_msgs.srv.SelfTest_RequestConstructor,
    'diagnostic_msgs/srv/SelfTest_Response': diagnostic_msgs.srv.SelfTest_ResponseConstructor,
    'geometry_msgs/msg/Accel': geometry_msgs.msg.AccelConstructor,
    'geometry_msgs/msg/AccelStamped': geometry_msgs.msg.AccelStampedConstructor,
    'geometry_msgs/msg/AccelWithCovariance': geometry_msgs.msg.AccelWithCovarianceConstructor,
    'geometry_msgs/msg/AccelWithCovarianceStamped': geometry_msgs.msg.AccelWithCovarianceStampedConstructor,
    'geometry_msgs/msg/Inertia': geometry_msgs.msg.InertiaConstructor,
    'geometry_msgs/msg/InertiaStamped': geometry_msgs.msg.InertiaStampedConstructor,
    'geometry_msgs/msg/Point': geometry_msgs.msg.PointConstructor,
    'geometry_msgs/msg/Point32': geometry_msgs.msg.Point32Constructor,
    'geometry_msgs/msg/PointStamped': geometry_msgs.msg.PointStampedConstructor,
    'geometry_msgs/msg/Polygon': geometry_msgs.msg.PolygonConstructor,
    'geometry_msgs/msg/PolygonStamped': geometry_msgs.msg.PolygonStampedConstructor,
    'geometry_msgs/msg/Pose': geometry_msgs.msg.PoseConstructor,
    'geometry_msgs/msg/Pose2D': geometry_msgs.msg.Pose2DConstructor,
    'geometry_msgs/msg/PoseArray': geometry_msgs.msg.PoseArrayConstructor,
    'geometry_msgs/msg/PoseStamped': geometry_msgs.msg.PoseStampedConstructor,
    'geometry_msgs/msg/PoseWithCovariance': geometry_msgs.msg.PoseWithCovarianceConstructor,
    'geometry_msgs/msg/PoseWithCovarianceStamped': geometry_msgs.msg.PoseWithCovarianceStampedConstructor,
    'geometry_msgs/msg/Quaternion': geometry_msgs.msg.QuaternionConstructor,
    'geometry_msgs/msg/QuaternionStamped': geometry_msgs.msg.QuaternionStampedConstructor,
    'geometry_msgs/msg/Transform': geometry_msgs.msg.TransformConstructor,
    'geometry_msgs/msg/TransformStamped': geometry_msgs.msg.TransformStampedConstructor,
    'geometry_msgs/msg/Twist': geometry_msgs.msg.TwistConstructor,
    'geometry_msgs/msg/TwistStamped': geometry_msgs.msg.TwistStampedConstructor,
    'geometry_msgs/msg/TwistWithCovariance': geometry_msgs.msg.TwistWithCovarianceConstructor,
    'geometry_msgs/msg/TwistWithCovarianceStamped': geometry_msgs.msg.TwistWithCovarianceStampedConstructor,
    'geometry_msgs/msg/Vector3': geometry_msgs.msg.Vector3Constructor,
    'geometry_msgs/msg/Vector3Stamped': geometry_msgs.msg.Vector3StampedConstructor,
    'geometry_msgs/msg/VelocityStamped': geometry_msgs.msg.VelocityStampedConstructor,
    'geometry_msgs/msg/Wrench': geometry_msgs.msg.WrenchConstructor,
    'geometry_msgs/msg/WrenchStamped': geometry_msgs.msg.WrenchStampedConstructor,
    'lifecycle_msgs/msg/State': lifecycle_msgs.msg.StateConstructor,
    'lifecycle_msgs/msg/Transition': lifecycle_msgs.msg.TransitionConstructor,
    'lifecycle_msgs/msg/TransitionDescription': lifecycle_msgs.msg.TransitionDescriptionConstructor,
    'lifecycle_msgs/msg/TransitionEvent': lifecycle_msgs.msg.TransitionEventConstructor,
    'lifecycle_msgs/srv/ChangeState_Request': lifecycle_msgs.srv.ChangeState_RequestConstructor,
    'lifecycle_msgs/srv/ChangeState_Response': lifecycle_msgs.srv.ChangeState_ResponseConstructor,
    'lifecycle_msgs/srv/GetAvailableStates_Request': lifecycle_msgs.srv.GetAvailableStates_RequestConstructor,
    'lifecycle_msgs/srv/GetAvailableStates_Response': lifecycle_msgs.srv.GetAvailableStates_ResponseConstructor,
    'lifecycle_msgs/srv/GetAvailableTransitions_Request': lifecycle_msgs.srv.GetAvailableTransitions_RequestConstructor,
    'lifecycle_msgs/srv/GetAvailableTransitions_Response': lifecycle_msgs.srv.GetAvailableTransitions_ResponseConstructor,
    'lifecycle_msgs/srv/GetState_Request': lifecycle_msgs.srv.GetState_RequestConstructor,
    'lifecycle_msgs/srv/GetState_Response': lifecycle_msgs.srv.GetState_ResponseConstructor,
    'map_msgs/msg/OccupancyGridUpdate': map_msgs.msg.OccupancyGridUpdateConstructor,
    'map_msgs/msg/PointCloud2Update': map_msgs.msg.PointCloud2UpdateConstructor,
    'map_msgs/msg/ProjectedMap': map_msgs.msg.ProjectedMapConstructor,
    'map_msgs/msg/ProjectedMapInfo': map_msgs.msg.ProjectedMapInfoConstructor,
    'map_msgs/srv/GetMapROI_Request': map_msgs.srv.GetMapROI_RequestConstructor,
    'map_msgs/srv/GetMapROI_Response': map_msgs.srv.GetMapROI_ResponseConstructor,
    'map_msgs/srv/GetPointMapROI_Request': map_msgs.srv.GetPointMapROI_RequestConstructor,
    'map_msgs/srv/GetPointMapROI_Response': map_msgs.srv.GetPointMapROI_ResponseConstructor,
    'map_msgs/srv/GetPointMap_Request': map_msgs.srv.GetPointMap_RequestConstructor,
    'map_msgs/srv/GetPointMap_Response': map_msgs.srv.GetPointMap_ResponseConstructor,
    'map_msgs/srv/ProjectedMapsInfo_Request': map_msgs.srv.ProjectedMapsInfo_RequestConstructor,
    'map_msgs/srv/ProjectedMapsInfo_Response': map_msgs.srv.ProjectedMapsInfo_ResponseConstructor,
    'map_msgs/srv/SaveMap_Request': map_msgs.srv.SaveMap_RequestConstructor,
    'map_msgs/srv/SaveMap_Response': map_msgs.srv.SaveMap_ResponseConstructor,
    'map_msgs/srv/SetMapProjections_Request': map_msgs.srv.SetMapProjections_RequestConstructor,
    'map_msgs/srv/SetMapProjections_Response': map_msgs.srv.SetMapProjections_ResponseConstructor,
    'nav_msgs/msg/GridCells': nav_msgs.msg.GridCellsConstructor,
    'nav_msgs/msg/MapMetaData': nav_msgs.msg.MapMetaDataConstructor,
    'nav_msgs/msg/OccupancyGrid': nav_msgs.msg.OccupancyGridConstructor,
    'nav_msgs/msg/Odometry': nav_msgs.msg.OdometryConstructor,
    'nav_msgs/msg/Path': nav_msgs.msg.PathConstructor,
    'nav_msgs/srv/GetMap_Request': nav_msgs.srv.GetMap_RequestConstructor,
    'nav_msgs/srv/GetMap_Response': nav_msgs.srv.GetMap_ResponseConstructor,
    'nav_msgs/srv/GetPlan_Request': nav_msgs.srv.GetPlan_RequestConstructor,
    'nav_msgs/srv/GetPlan_Response': nav_msgs.srv.GetPlan_ResponseConstructor,
    'nav_msgs/srv/LoadMap_Request': nav_msgs.srv.LoadMap_RequestConstructor,
    'nav_msgs/srv/LoadMap_Response': nav_msgs.srv.LoadMap_ResponseConstructor,
    'nav_msgs/srv/SetMap_Request': nav_msgs.srv.SetMap_RequestConstructor,
    'nav_msgs/srv/SetMap_Response': nav_msgs.srv.SetMap_ResponseConstructor,
    'px4_msgs/msg/ActionRequest': px4_msgs.msg.ActionRequestConstructor,
    'px4_msgs/msg/ActuatorArmed': px4_msgs.msg.ActuatorArmedConstructor,
    'px4_msgs/msg/ActuatorControlsStatus': px4_msgs.msg.ActuatorControlsStatusConstructor,
    'px4_msgs/msg/ActuatorMotors': px4_msgs.msg.ActuatorMotorsConstructor,
    'px4_msgs/msg/ActuatorOutputs': px4_msgs.msg.ActuatorOutputsConstructor,
    'px4_msgs/msg/ActuatorServos': px4_msgs.msg.ActuatorServosConstructor,
    'px4_msgs/msg/ActuatorServosTrim': px4_msgs.msg.ActuatorServosTrimConstructor,
    'px4_msgs/msg/ActuatorTest': px4_msgs.msg.ActuatorTestConstructor,
    'px4_msgs/msg/AdcReport': px4_msgs.msg.AdcReportConstructor,
    'px4_msgs/msg/Airspeed': px4_msgs.msg.AirspeedConstructor,
    'px4_msgs/msg/AirspeedValidated': px4_msgs.msg.AirspeedValidatedConstructor,
    'px4_msgs/msg/AirspeedWind': px4_msgs.msg.AirspeedWindConstructor,
    'px4_msgs/msg/AutotuneAttitudeControlStatus': px4_msgs.msg.AutotuneAttitudeControlStatusConstructor,
    'px4_msgs/msg/BatteryStatus': px4_msgs.msg.BatteryStatusConstructor,
    'px4_msgs/msg/ButtonEvent': px4_msgs.msg.ButtonEventConstructor,
    'px4_msgs/msg/CameraCapture': px4_msgs.msg.CameraCaptureConstructor,
    'px4_msgs/msg/CameraStatus': px4_msgs.msg.CameraStatusConstructor,
    'px4_msgs/msg/CameraTrigger': px4_msgs.msg.CameraTriggerConstructor,
    'px4_msgs/msg/CellularStatus': px4_msgs.msg.CellularStatusConstructor,
    'px4_msgs/msg/CollisionConstraints': px4_msgs.msg.CollisionConstraintsConstructor,
    'px4_msgs/msg/CollisionReport': px4_msgs.msg.CollisionReportConstructor,
    'px4_msgs/msg/ControlAllocatorStatus': px4_msgs.msg.ControlAllocatorStatusConstructor,
    'px4_msgs/msg/Cpuload': px4_msgs.msg.CpuloadConstructor,
    'px4_msgs/msg/DebugArray': px4_msgs.msg.DebugArrayConstructor,
    'px4_msgs/msg/DebugKeyValue': px4_msgs.msg.DebugKeyValueConstructor,
    'px4_msgs/msg/DebugValue': px4_msgs.msg.DebugValueConstructor,
    'px4_msgs/msg/DebugVect': px4_msgs.msg.DebugVectConstructor,
    'px4_msgs/msg/DifferentialPressure': px4_msgs.msg.DifferentialPressureConstructor,
    'px4_msgs/msg/DistanceSensor': px4_msgs.msg.DistanceSensorConstructor,
    'px4_msgs/msg/Ekf2Timestamps': px4_msgs.msg.Ekf2TimestampsConstructor,
    'px4_msgs/msg/EscReport': px4_msgs.msg.EscReportConstructor,
    'px4_msgs/msg/EscStatus': px4_msgs.msg.EscStatusConstructor,
    'px4_msgs/msg/EstimatorAidSource1d': px4_msgs.msg.EstimatorAidSource1dConstructor,
    'px4_msgs/msg/EstimatorAidSource2d': px4_msgs.msg.EstimatorAidSource2dConstructor,
    'px4_msgs/msg/EstimatorAidSource3d': px4_msgs.msg.EstimatorAidSource3dConstructor,
    'px4_msgs/msg/EstimatorBias': px4_msgs.msg.EstimatorBiasConstructor,
    'px4_msgs/msg/EstimatorBias3d': px4_msgs.msg.EstimatorBias3dConstructor,
    'px4_msgs/msg/EstimatorEventFlags': px4_msgs.msg.EstimatorEventFlagsConstructor,
    'px4_msgs/msg/EstimatorGpsStatus': px4_msgs.msg.EstimatorGpsStatusConstructor,
    'px4_msgs/msg/EstimatorInnovations': px4_msgs.msg.EstimatorInnovationsConstructor,
    'px4_msgs/msg/EstimatorSelectorStatus': px4_msgs.msg.EstimatorSelectorStatusConstructor,
    'px4_msgs/msg/EstimatorSensorBias': px4_msgs.msg.EstimatorSensorBiasConstructor,
    'px4_msgs/msg/EstimatorStates': px4_msgs.msg.EstimatorStatesConstructor,
    'px4_msgs/msg/EstimatorStatus': px4_msgs.msg.EstimatorStatusConstructor,
    'px4_msgs/msg/EstimatorStatusFlags': px4_msgs.msg.EstimatorStatusFlagsConstructor,
    'px4_msgs/msg/Event': px4_msgs.msg.EventConstructor,
    'px4_msgs/msg/FailsafeFlags': px4_msgs.msg.FailsafeFlagsConstructor,
    'px4_msgs/msg/FailureDetectorStatus': px4_msgs.msg.FailureDetectorStatusConstructor,
    'px4_msgs/msg/FollowTarget': px4_msgs.msg.FollowTargetConstructor,
    'px4_msgs/msg/FollowTargetEstimator': px4_msgs.msg.FollowTargetEstimatorConstructor,
    'px4_msgs/msg/FollowTargetStatus': px4_msgs.msg.FollowTargetStatusConstructor,
    'px4_msgs/msg/GeneratorStatus': px4_msgs.msg.GeneratorStatusConstructor,
    'px4_msgs/msg/GeofenceResult': px4_msgs.msg.GeofenceResultConstructor,
    'px4_msgs/msg/GimbalControls': px4_msgs.msg.GimbalControlsConstructor,
    'px4_msgs/msg/GimbalDeviceAttitudeStatus': px4_msgs.msg.GimbalDeviceAttitudeStatusConstructor,
    'px4_msgs/msg/GimbalDeviceInformation': px4_msgs.msg.GimbalDeviceInformationConstructor,
    'px4_msgs/msg/GimbalDeviceSetAttitude': px4_msgs.msg.GimbalDeviceSetAttitudeConstructor,
    'px4_msgs/msg/GimbalManagerInformation': px4_msgs.msg.GimbalManagerInformationConstructor,
    'px4_msgs/msg/GimbalManagerSetAttitude': px4_msgs.msg.GimbalManagerSetAttitudeConstructor,
    'px4_msgs/msg/GimbalManagerSetManualControl': px4_msgs.msg.GimbalManagerSetManualControlConstructor,
    'px4_msgs/msg/GimbalManagerStatus': px4_msgs.msg.GimbalManagerStatusConstructor,
    'px4_msgs/msg/GpsDump': px4_msgs.msg.GpsDumpConstructor,
    'px4_msgs/msg/GpsInjectData': px4_msgs.msg.GpsInjectDataConstructor,
    'px4_msgs/msg/Gripper': px4_msgs.msg.GripperConstructor,
    'px4_msgs/msg/HealthReport': px4_msgs.msg.HealthReportConstructor,
    'px4_msgs/msg/HeaterStatus': px4_msgs.msg.HeaterStatusConstructor,
    'px4_msgs/msg/HomePosition': px4_msgs.msg.HomePositionConstructor,
    'px4_msgs/msg/HoverThrustEstimate': px4_msgs.msg.HoverThrustEstimateConstructor,
    'px4_msgs/msg/InputRc': px4_msgs.msg.InputRcConstructor,
    'px4_msgs/msg/InternalCombustionEngineStatus': px4_msgs.msg.InternalCombustionEngineStatusConstructor,
    'px4_msgs/msg/IridiumsbdStatus': px4_msgs.msg.IridiumsbdStatusConstructor,
    'px4_msgs/msg/IrlockReport': px4_msgs.msg.IrlockReportConstructor,
    'px4_msgs/msg/LandingGear': px4_msgs.msg.LandingGearConstructor,
    'px4_msgs/msg/LandingGearWheel': px4_msgs.msg.LandingGearWheelConstructor,
    'px4_msgs/msg/LandingTargetInnovations': px4_msgs.msg.LandingTargetInnovationsConstructor,
    'px4_msgs/msg/LandingTargetPose': px4_msgs.msg.LandingTargetPoseConstructor,
    'px4_msgs/msg/LaunchDetectionStatus': px4_msgs.msg.LaunchDetectionStatusConstructor,
    'px4_msgs/msg/LedControl': px4_msgs.msg.LedControlConstructor,
    'px4_msgs/msg/LogMessage': px4_msgs.msg.LogMessageConstructor,
    'px4_msgs/msg/LoggerStatus': px4_msgs.msg.LoggerStatusConstructor,
    'px4_msgs/msg/MagWorkerData': px4_msgs.msg.MagWorkerDataConstructor,
    'px4_msgs/msg/MagnetometerBiasEstimate': px4_msgs.msg.MagnetometerBiasEstimateConstructor,
    'px4_msgs/msg/ManualControlSetpoint': px4_msgs.msg.ManualControlSetpointConstructor,
    'px4_msgs/msg/ManualControlSwitches': px4_msgs.msg.ManualControlSwitchesConstructor,
    'px4_msgs/msg/MavlinkLog': px4_msgs.msg.MavlinkLogConstructor,
    'px4_msgs/msg/MavlinkTunnel': px4_msgs.msg.MavlinkTunnelConstructor,
    'px4_msgs/msg/Mission': px4_msgs.msg.MissionConstructor,
    'px4_msgs/msg/MissionResult': px4_msgs.msg.MissionResultConstructor,
    'px4_msgs/msg/ModeCompleted': px4_msgs.msg.ModeCompletedConstructor,
    'px4_msgs/msg/MountOrientation': px4_msgs.msg.MountOrientationConstructor,
    'px4_msgs/msg/NavigatorMissionItem': px4_msgs.msg.NavigatorMissionItemConstructor,
    'px4_msgs/msg/NormalizedUnsignedSetpoint': px4_msgs.msg.NormalizedUnsignedSetpointConstructor,
    'px4_msgs/msg/NpfgStatus': px4_msgs.msg.NpfgStatusConstructor,
    'px4_msgs/msg/ObstacleDistance': px4_msgs.msg.ObstacleDistanceConstructor,
    'px4_msgs/msg/OffboardControlMode': px4_msgs.msg.OffboardControlModeConstructor,
    'px4_msgs/msg/OnboardComputerStatus': px4_msgs.msg.OnboardComputerStatusConstructor,
    'px4_msgs/msg/OrbTest': px4_msgs.msg.OrbTestConstructor,
    'px4_msgs/msg/OrbTestLarge': px4_msgs.msg.OrbTestLargeConstructor,
    'px4_msgs/msg/OrbTestMedium': px4_msgs.msg.OrbTestMediumConstructor,
    'px4_msgs/msg/OrbitStatus': px4_msgs.msg.OrbitStatusConstructor,
    'px4_msgs/msg/ParameterUpdate': px4_msgs.msg.ParameterUpdateConstructor,
    'px4_msgs/msg/Ping': px4_msgs.msg.PingConstructor,
    'px4_msgs/msg/PositionControllerLandingStatus': px4_msgs.msg.PositionControllerLandingStatusConstructor,
    'px4_msgs/msg/PositionControllerStatus': px4_msgs.msg.PositionControllerStatusConstructor,
    'px4_msgs/msg/PositionSetpoint': px4_msgs.msg.PositionSetpointConstructor,
    'px4_msgs/msg/PositionSetpointTriplet': px4_msgs.msg.PositionSetpointTripletConstructor,
    'px4_msgs/msg/PowerButtonState': px4_msgs.msg.PowerButtonStateConstructor,
    'px4_msgs/msg/PowerMonitor': px4_msgs.msg.PowerMonitorConstructor,
    'px4_msgs/msg/PpsCapture': px4_msgs.msg.PpsCaptureConstructor,
    'px4_msgs/msg/PwmInput': px4_msgs.msg.PwmInputConstructor,
    'px4_msgs/msg/Px4ioStatus': px4_msgs.msg.Px4ioStatusConstructor,
    'px4_msgs/msg/QshellReq': px4_msgs.msg.QshellReqConstructor,
    'px4_msgs/msg/QshellRetval': px4_msgs.msg.QshellRetvalConstructor,
    'px4_msgs/msg/RadioStatus': px4_msgs.msg.RadioStatusConstructor,
    'px4_msgs/msg/RateCtrlStatus': px4_msgs.msg.RateCtrlStatusConstructor,
    'px4_msgs/msg/RcChannels': px4_msgs.msg.RcChannelsConstructor,
    'px4_msgs/msg/RcParameterMap': px4_msgs.msg.RcParameterMapConstructor,
    'px4_msgs/msg/Rpm': px4_msgs.msg.RpmConstructor,
    'px4_msgs/msg/RtlTimeEstimate': px4_msgs.msg.RtlTimeEstimateConstructor,
    'px4_msgs/msg/SatelliteInfo': px4_msgs.msg.SatelliteInfoConstructor,
    'px4_msgs/msg/SensorAccel': px4_msgs.msg.SensorAccelConstructor,
    'px4_msgs/msg/SensorAccelFifo': px4_msgs.msg.SensorAccelFifoConstructor,
    'px4_msgs/msg/SensorBaro': px4_msgs.msg.SensorBaroConstructor,
    'px4_msgs/msg/SensorCombined': px4_msgs.msg.SensorCombinedConstructor,
    'px4_msgs/msg/SensorCorrection': px4_msgs.msg.SensorCorrectionConstructor,
    'px4_msgs/msg/SensorGnssRelative': px4_msgs.msg.SensorGnssRelativeConstructor,
    'px4_msgs/msg/SensorGps': px4_msgs.msg.SensorGpsConstructor,
    'px4_msgs/msg/SensorGyro': px4_msgs.msg.SensorGyroConstructor,
    'px4_msgs/msg/SensorGyroFft': px4_msgs.msg.SensorGyroFftConstructor,
    'px4_msgs/msg/SensorGyroFifo': px4_msgs.msg.SensorGyroFifoConstructor,
    'px4_msgs/msg/SensorHygrometer': px4_msgs.msg.SensorHygrometerConstructor,
    'px4_msgs/msg/SensorMag': px4_msgs.msg.SensorMagConstructor,
    'px4_msgs/msg/SensorOpticalFlow': px4_msgs.msg.SensorOpticalFlowConstructor,
    'px4_msgs/msg/SensorPreflightMag': px4_msgs.msg.SensorPreflightMagConstructor,
    'px4_msgs/msg/SensorSelection': px4_msgs.msg.SensorSelectionConstructor,
    'px4_msgs/msg/SensorUwb': px4_msgs.msg.SensorUwbConstructor,
    'px4_msgs/msg/SensorsStatus': px4_msgs.msg.SensorsStatusConstructor,
    'px4_msgs/msg/SensorsStatusImu': px4_msgs.msg.SensorsStatusImuConstructor,
    'px4_msgs/msg/SystemPower': px4_msgs.msg.SystemPowerConstructor,
    'px4_msgs/msg/TakeoffStatus': px4_msgs.msg.TakeoffStatusConstructor,
    'px4_msgs/msg/TaskStackInfo': px4_msgs.msg.TaskStackInfoConstructor,
    'px4_msgs/msg/TecsStatus': px4_msgs.msg.TecsStatusConstructor,
    'px4_msgs/msg/TelemetryStatus': px4_msgs.msg.TelemetryStatusConstructor,
    'px4_msgs/msg/TiltrotorExtraControls': px4_msgs.msg.TiltrotorExtraControlsConstructor,
    'px4_msgs/msg/TimesyncStatus': px4_msgs.msg.TimesyncStatusConstructor,
    'px4_msgs/msg/TrajectoryBezier': px4_msgs.msg.TrajectoryBezierConstructor,
    'px4_msgs/msg/TrajectorySetpoint': px4_msgs.msg.TrajectorySetpointConstructor,
    'px4_msgs/msg/TrajectoryWaypoint': px4_msgs.msg.TrajectoryWaypointConstructor,
    'px4_msgs/msg/TransponderReport': px4_msgs.msg.TransponderReportConstructor,
    'px4_msgs/msg/TuneControl': px4_msgs.msg.TuneControlConstructor,
    'px4_msgs/msg/UavcanParameterRequest': px4_msgs.msg.UavcanParameterRequestConstructor,
    'px4_msgs/msg/UavcanParameterValue': px4_msgs.msg.UavcanParameterValueConstructor,
    'px4_msgs/msg/UlogStream': px4_msgs.msg.UlogStreamConstructor,
    'px4_msgs/msg/UlogStreamAck': px4_msgs.msg.UlogStreamAckConstructor,
    'px4_msgs/msg/VehicleAcceleration': px4_msgs.msg.VehicleAccelerationConstructor,
    'px4_msgs/msg/VehicleAirData': px4_msgs.msg.VehicleAirDataConstructor,
    'px4_msgs/msg/VehicleAngularAccelerationSetpoint': px4_msgs.msg.VehicleAngularAccelerationSetpointConstructor,
    'px4_msgs/msg/VehicleAngularVelocity': px4_msgs.msg.VehicleAngularVelocityConstructor,
    'px4_msgs/msg/VehicleAttitude': px4_msgs.msg.VehicleAttitudeConstructor,
    'px4_msgs/msg/VehicleAttitudeSetpoint': px4_msgs.msg.VehicleAttitudeSetpointConstructor,
    'px4_msgs/msg/VehicleCommand': px4_msgs.msg.VehicleCommandConstructor,
    'px4_msgs/msg/VehicleCommandAck': px4_msgs.msg.VehicleCommandAckConstructor,
    'px4_msgs/msg/VehicleConstraints': px4_msgs.msg.VehicleConstraintsConstructor,
    'px4_msgs/msg/VehicleControlMode': px4_msgs.msg.VehicleControlModeConstructor,
    'px4_msgs/msg/VehicleGlobalPosition': px4_msgs.msg.VehicleGlobalPositionConstructor,
    'px4_msgs/msg/VehicleImu': px4_msgs.msg.VehicleImuConstructor,
    'px4_msgs/msg/VehicleImuStatus': px4_msgs.msg.VehicleImuStatusConstructor,
    'px4_msgs/msg/VehicleLandDetected': px4_msgs.msg.VehicleLandDetectedConstructor,
    'px4_msgs/msg/VehicleLocalPosition': px4_msgs.msg.VehicleLocalPositionConstructor,
    'px4_msgs/msg/VehicleLocalPositionSetpoint': px4_msgs.msg.VehicleLocalPositionSetpointConstructor,
    'px4_msgs/msg/VehicleMagnetometer': px4_msgs.msg.VehicleMagnetometerConstructor,
    'px4_msgs/msg/VehicleOdometry': px4_msgs.msg.VehicleOdometryConstructor,
    'px4_msgs/msg/VehicleOpticalFlow': px4_msgs.msg.VehicleOpticalFlowConstructor,
    'px4_msgs/msg/VehicleOpticalFlowVel': px4_msgs.msg.VehicleOpticalFlowVelConstructor,
    'px4_msgs/msg/VehicleRatesSetpoint': px4_msgs.msg.VehicleRatesSetpointConstructor,
    'px4_msgs/msg/VehicleRoi': px4_msgs.msg.VehicleRoiConstructor,
    'px4_msgs/msg/VehicleStatus': px4_msgs.msg.VehicleStatusConstructor,
    'px4_msgs/msg/VehicleThrustSetpoint': px4_msgs.msg.VehicleThrustSetpointConstructor,
    'px4_msgs/msg/VehicleTorqueSetpoint': px4_msgs.msg.VehicleTorqueSetpointConstructor,
    'px4_msgs/msg/VehicleTrajectoryBezier': px4_msgs.msg.VehicleTrajectoryBezierConstructor,
    'px4_msgs/msg/VehicleTrajectoryWaypoint': px4_msgs.msg.VehicleTrajectoryWaypointConstructor,
    'px4_msgs/msg/VtolVehicleStatus': px4_msgs.msg.VtolVehicleStatusConstructor,
    'px4_msgs/msg/Wind': px4_msgs.msg.WindConstructor,
    'px4_msgs/msg/YawEstimatorStatus': px4_msgs.msg.YawEstimatorStatusConstructor,
    'rcl_interfaces/msg/FloatingPointRange': rcl_interfaces.msg.FloatingPointRangeConstructor,
    'rcl_interfaces/msg/IntegerRange': rcl_interfaces.msg.IntegerRangeConstructor,
    'rcl_interfaces/msg/ListParametersResult': rcl_interfaces.msg.ListParametersResultConstructor,
    'rcl_interfaces/msg/Log': rcl_interfaces.msg.LogConstructor,
    'rcl_interfaces/msg/Parameter': rcl_interfaces.msg.ParameterConstructor,
    'rcl_interfaces/msg/ParameterDescriptor': rcl_interfaces.msg.ParameterDescriptorConstructor,
    'rcl_interfaces/msg/ParameterEvent': rcl_interfaces.msg.ParameterEventConstructor,
    'rcl_interfaces/msg/ParameterEventDescriptors': rcl_interfaces.msg.ParameterEventDescriptorsConstructor,
    'rcl_interfaces/msg/ParameterType': rcl_interfaces.msg.ParameterTypeConstructor,
    'rcl_interfaces/msg/ParameterValue': rcl_interfaces.msg.ParameterValueConstructor,
    'rcl_interfaces/msg/SetParametersResult': rcl_interfaces.msg.SetParametersResultConstructor,
    'rcl_interfaces/srv/DescribeParameters_Request': rcl_interfaces.srv.DescribeParameters_RequestConstructor,
    'rcl_interfaces/srv/DescribeParameters_Response': rcl_interfaces.srv.DescribeParameters_ResponseConstructor,
    'rcl_interfaces/srv/GetParameterTypes_Request': rcl_interfaces.srv.GetParameterTypes_RequestConstructor,
    'rcl_interfaces/srv/GetParameterTypes_Response': rcl_interfaces.srv.GetParameterTypes_ResponseConstructor,
    'rcl_interfaces/srv/GetParameters_Request': rcl_interfaces.srv.GetParameters_RequestConstructor,
    'rcl_interfaces/srv/GetParameters_Response': rcl_interfaces.srv.GetParameters_ResponseConstructor,
    'rcl_interfaces/srv/ListParameters_Request': rcl_interfaces.srv.ListParameters_RequestConstructor,
    'rcl_interfaces/srv/ListParameters_Response': rcl_interfaces.srv.ListParameters_ResponseConstructor,
    'rcl_interfaces/srv/SetParametersAtomically_Request': rcl_interfaces.srv.SetParametersAtomically_RequestConstructor,
    'rcl_interfaces/srv/SetParametersAtomically_Response': rcl_interfaces.srv.SetParametersAtomically_ResponseConstructor,
    'rcl_interfaces/srv/SetParameters_Request': rcl_interfaces.srv.SetParameters_RequestConstructor,
    'rcl_interfaces/srv/SetParameters_Response': rcl_interfaces.srv.SetParameters_ResponseConstructor,
    'rmw_dds_common/msg/Gid': rmw_dds_common.msg.GidConstructor,
    'rmw_dds_common/msg/NodeEntitiesInfo': rmw_dds_common.msg.NodeEntitiesInfoConstructor,
    'rmw_dds_common/msg/ParticipantEntitiesInfo': rmw_dds_common.msg.ParticipantEntitiesInfoConstructor,
    'rosbag2_interfaces/msg/ReadSplitEvent': rosbag2_interfaces.msg.ReadSplitEventConstructor,
    'rosbag2_interfaces/msg/WriteSplitEvent': rosbag2_interfaces.msg.WriteSplitEventConstructor,
    'rosbag2_interfaces/srv/Burst_Request': rosbag2_interfaces.srv.Burst_RequestConstructor,
    'rosbag2_interfaces/srv/Burst_Response': rosbag2_interfaces.srv.Burst_ResponseConstructor,
    'rosbag2_interfaces/srv/GetRate_Request': rosbag2_interfaces.srv.GetRate_RequestConstructor,
    'rosbag2_interfaces/srv/GetRate_Response': rosbag2_interfaces.srv.GetRate_ResponseConstructor,
    'rosbag2_interfaces/srv/IsPaused_Request': rosbag2_interfaces.srv.IsPaused_RequestConstructor,
    'rosbag2_interfaces/srv/IsPaused_Response': rosbag2_interfaces.srv.IsPaused_ResponseConstructor,
    'rosbag2_interfaces/srv/Pause_Request': rosbag2_interfaces.srv.Pause_RequestConstructor,
    'rosbag2_interfaces/srv/Pause_Response': rosbag2_interfaces.srv.Pause_ResponseConstructor,
    'rosbag2_interfaces/srv/PlayNext_Request': rosbag2_interfaces.srv.PlayNext_RequestConstructor,
    'rosbag2_interfaces/srv/PlayNext_Response': rosbag2_interfaces.srv.PlayNext_ResponseConstructor,
    'rosbag2_interfaces/srv/Resume_Request': rosbag2_interfaces.srv.Resume_RequestConstructor,
    'rosbag2_interfaces/srv/Resume_Response': rosbag2_interfaces.srv.Resume_ResponseConstructor,
    'rosbag2_interfaces/srv/Seek_Request': rosbag2_interfaces.srv.Seek_RequestConstructor,
    'rosbag2_interfaces/srv/Seek_Response': rosbag2_interfaces.srv.Seek_ResponseConstructor,
    'rosbag2_interfaces/srv/SetRate_Request': rosbag2_interfaces.srv.SetRate_RequestConstructor,
    'rosbag2_interfaces/srv/SetRate_Response': rosbag2_interfaces.srv.SetRate_ResponseConstructor,
    'rosbag2_interfaces/srv/Snapshot_Request': rosbag2_interfaces.srv.Snapshot_RequestConstructor,
    'rosbag2_interfaces/srv/Snapshot_Response': rosbag2_interfaces.srv.Snapshot_ResponseConstructor,
    'rosbag2_interfaces/srv/TogglePaused_Request': rosbag2_interfaces.srv.TogglePaused_RequestConstructor,
    'rosbag2_interfaces/srv/TogglePaused_Response': rosbag2_interfaces.srv.TogglePaused_ResponseConstructor,
    'rosgraph_msgs/msg/Clock': rosgraph_msgs.msg.ClockConstructor,
    'sensor_msgs/msg/BatteryState': sensor_msgs.msg.BatteryStateConstructor,
    'sensor_msgs/msg/CameraInfo': sensor_msgs.msg.CameraInfoConstructor,
    'sensor_msgs/msg/ChannelFloat32': sensor_msgs.msg.ChannelFloat32Constructor,
    'sensor_msgs/msg/CompressedImage': sensor_msgs.msg.CompressedImageConstructor,
    'sensor_msgs/msg/FluidPressure': sensor_msgs.msg.FluidPressureConstructor,
    'sensor_msgs/msg/Illuminance': sensor_msgs.msg.IlluminanceConstructor,
    'sensor_msgs/msg/Image': sensor_msgs.msg.ImageConstructor,
    'sensor_msgs/msg/Imu': sensor_msgs.msg.ImuConstructor,
    'sensor_msgs/msg/JointState': sensor_msgs.msg.JointStateConstructor,
    'sensor_msgs/msg/Joy': sensor_msgs.msg.JoyConstructor,
    'sensor_msgs/msg/JoyFeedback': sensor_msgs.msg.JoyFeedbackConstructor,
    'sensor_msgs/msg/JoyFeedbackArray': sensor_msgs.msg.JoyFeedbackArrayConstructor,
    'sensor_msgs/msg/LaserEcho': sensor_msgs.msg.LaserEchoConstructor,
    'sensor_msgs/msg/LaserScan': sensor_msgs.msg.LaserScanConstructor,
    'sensor_msgs/msg/MagneticField': sensor_msgs.msg.MagneticFieldConstructor,
    'sensor_msgs/msg/MultiDOFJointState': sensor_msgs.msg.MultiDOFJointStateConstructor,
    'sensor_msgs/msg/MultiEchoLaserScan': sensor_msgs.msg.MultiEchoLaserScanConstructor,
    'sensor_msgs/msg/NavSatFix': sensor_msgs.msg.NavSatFixConstructor,
    'sensor_msgs/msg/NavSatStatus': sensor_msgs.msg.NavSatStatusConstructor,
    'sensor_msgs/msg/PointCloud': sensor_msgs.msg.PointCloudConstructor,
    'sensor_msgs/msg/PointCloud2': sensor_msgs.msg.PointCloud2Constructor,
    'sensor_msgs/msg/PointField': sensor_msgs.msg.PointFieldConstructor,
    'sensor_msgs/msg/Range': sensor_msgs.msg.RangeConstructor,
    'sensor_msgs/msg/RegionOfInterest': sensor_msgs.msg.RegionOfInterestConstructor,
    'sensor_msgs/msg/RelativeHumidity': sensor_msgs.msg.RelativeHumidityConstructor,
    'sensor_msgs/msg/Temperature': sensor_msgs.msg.TemperatureConstructor,
    'sensor_msgs/msg/TimeReference': sensor_msgs.msg.TimeReferenceConstructor,
    'sensor_msgs/srv/SetCameraInfo_Request': sensor_msgs.srv.SetCameraInfo_RequestConstructor,
    'sensor_msgs/srv/SetCameraInfo_Response': sensor_msgs.srv.SetCameraInfo_ResponseConstructor,
    'shape_msgs/msg/Mesh': shape_msgs.msg.MeshConstructor,
    'shape_msgs/msg/MeshTriangle': shape_msgs.msg.MeshTriangleConstructor,
    'shape_msgs/msg/Plane': shape_msgs.msg.PlaneConstructor,
    'shape_msgs/msg/SolidPrimitive': shape_msgs.msg.SolidPrimitiveConstructor,
    'statistics_msgs/msg/MetricsMessage': statistics_msgs.msg.MetricsMessageConstructor,
    'statistics_msgs/msg/StatisticDataPoint': statistics_msgs.msg.StatisticDataPointConstructor,
    'statistics_msgs/msg/StatisticDataType': statistics_msgs.msg.StatisticDataTypeConstructor,
    'std_msgs/msg/Bool': std_msgs.msg.BoolConstructor,
    'std_msgs/msg/Byte': std_msgs.msg.ByteConstructor,
    'std_msgs/msg/ByteMultiArray': std_msgs.msg.ByteMultiArrayConstructor,
    'std_msgs/msg/Char': std_msgs.msg.CharConstructor,
    'std_msgs/msg/ColorRGBA': std_msgs.msg.ColorRGBAConstructor,
    'std_msgs/msg/Empty': std_msgs.msg.EmptyConstructor,
    'std_msgs/msg/Float32': std_msgs.msg.Float32Constructor,
    'std_msgs/msg/Float32MultiArray': std_msgs.msg.Float32MultiArrayConstructor,
    'std_msgs/msg/Float64': std_msgs.msg.Float64Constructor,
    'std_msgs/msg/Float64MultiArray': std_msgs.msg.Float64MultiArrayConstructor,
    'std_msgs/msg/Header': std_msgs.msg.HeaderConstructor,
    'std_msgs/msg/Int16': std_msgs.msg.Int16Constructor,
    'std_msgs/msg/Int16MultiArray': std_msgs.msg.Int16MultiArrayConstructor,
    'std_msgs/msg/Int32': std_msgs.msg.Int32Constructor,
    'std_msgs/msg/Int32MultiArray': std_msgs.msg.Int32MultiArrayConstructor,
    'std_msgs/msg/Int64': std_msgs.msg.Int64Constructor,
    'std_msgs/msg/Int64MultiArray': std_msgs.msg.Int64MultiArrayConstructor,
    'std_msgs/msg/Int8': std_msgs.msg.Int8Constructor,
    'std_msgs/msg/Int8MultiArray': std_msgs.msg.Int8MultiArrayConstructor,
    'std_msgs/msg/MultiArrayDimension': std_msgs.msg.MultiArrayDimensionConstructor,
    'std_msgs/msg/MultiArrayLayout': std_msgs.msg.MultiArrayLayoutConstructor,
    'std_msgs/msg/String': std_msgs.msg.StringConstructor,
    'std_msgs/msg/UInt16': std_msgs.msg.UInt16Constructor,
    'std_msgs/msg/UInt16MultiArray': std_msgs.msg.UInt16MultiArrayConstructor,
    'std_msgs/msg/UInt32': std_msgs.msg.UInt32Constructor,
    'std_msgs/msg/UInt32MultiArray': std_msgs.msg.UInt32MultiArrayConstructor,
    'std_msgs/msg/UInt64': std_msgs.msg.UInt64Constructor,
    'std_msgs/msg/UInt64MultiArray': std_msgs.msg.UInt64MultiArrayConstructor,
    'std_msgs/msg/UInt8': std_msgs.msg.UInt8Constructor,
    'std_msgs/msg/UInt8MultiArray': std_msgs.msg.UInt8MultiArrayConstructor,
    'std_srvs/srv/Empty_Request': std_srvs.srv.Empty_RequestConstructor,
    'std_srvs/srv/Empty_Response': std_srvs.srv.Empty_ResponseConstructor,
    'std_srvs/srv/SetBool_Request': std_srvs.srv.SetBool_RequestConstructor,
    'std_srvs/srv/SetBool_Response': std_srvs.srv.SetBool_ResponseConstructor,
    'std_srvs/srv/Trigger_Request': std_srvs.srv.Trigger_RequestConstructor,
    'std_srvs/srv/Trigger_Response': std_srvs.srv.Trigger_ResponseConstructor,
    'stereo_msgs/msg/DisparityImage': stereo_msgs.msg.DisparityImageConstructor,
    'tf2_msgs/action/LookupTransform_Feedback': tf2_msgs.action.LookupTransform_FeedbackConstructor,
    'tf2_msgs/action/LookupTransform_FeedbackMessage': tf2_msgs.action.LookupTransform_FeedbackMessageConstructor,
    'tf2_msgs/action/LookupTransform_GetResult_Request': tf2_msgs.action.LookupTransform_GetResult_RequestConstructor,
    'tf2_msgs/action/LookupTransform_GetResult_Response': tf2_msgs.action.LookupTransform_GetResult_ResponseConstructor,
    'tf2_msgs/action/LookupTransform_Goal': tf2_msgs.action.LookupTransform_GoalConstructor,
    'tf2_msgs/action/LookupTransform_Result': tf2_msgs.action.LookupTransform_ResultConstructor,
    'tf2_msgs/action/LookupTransform_SendGoal_Request': tf2_msgs.action.LookupTransform_SendGoal_RequestConstructor,
    'tf2_msgs/action/LookupTransform_SendGoal_Response': tf2_msgs.action.LookupTransform_SendGoal_ResponseConstructor,
    'tf2_msgs/msg/TF2Error': tf2_msgs.msg.TF2ErrorConstructor,
    'tf2_msgs/msg/TFMessage': tf2_msgs.msg.TFMessageConstructor,
    'tf2_msgs/srv/FrameGraph_Request': tf2_msgs.srv.FrameGraph_RequestConstructor,
    'tf2_msgs/srv/FrameGraph_Response': tf2_msgs.srv.FrameGraph_ResponseConstructor,
    'trajectory_msgs/msg/JointTrajectory': trajectory_msgs.msg.JointTrajectoryConstructor,
    'trajectory_msgs/msg/JointTrajectoryPoint': trajectory_msgs.msg.JointTrajectoryPointConstructor,
    'trajectory_msgs/msg/MultiDOFJointTrajectory': trajectory_msgs.msg.MultiDOFJointTrajectoryConstructor,
    'trajectory_msgs/msg/MultiDOFJointTrajectoryPoint': trajectory_msgs.msg.MultiDOFJointTrajectoryPointConstructor,
    'unique_identifier_msgs/msg/UUID': unique_identifier_msgs.msg.UUIDConstructor,
    'visualization_msgs/msg/ImageMarker': visualization_msgs.msg.ImageMarkerConstructor,
    'visualization_msgs/msg/InteractiveMarker': visualization_msgs.msg.InteractiveMarkerConstructor,
    'visualization_msgs/msg/InteractiveMarkerControl': visualization_msgs.msg.InteractiveMarkerControlConstructor,
    'visualization_msgs/msg/InteractiveMarkerFeedback': visualization_msgs.msg.InteractiveMarkerFeedbackConstructor,
    'visualization_msgs/msg/InteractiveMarkerInit': visualization_msgs.msg.InteractiveMarkerInitConstructor,
    'visualization_msgs/msg/InteractiveMarkerPose': visualization_msgs.msg.InteractiveMarkerPoseConstructor,
    'visualization_msgs/msg/InteractiveMarkerUpdate': visualization_msgs.msg.InteractiveMarkerUpdateConstructor,
    'visualization_msgs/msg/Marker': visualization_msgs.msg.MarkerConstructor,
    'visualization_msgs/msg/MarkerArray': visualization_msgs.msg.MarkerArrayConstructor,
    'visualization_msgs/msg/MenuEntry': visualization_msgs.msg.MenuEntryConstructor,
    'visualization_msgs/msg/MeshFile': visualization_msgs.msg.MeshFileConstructor,
    'visualization_msgs/msg/UVCoordinate': visualization_msgs.msg.UVCoordinateConstructor,
    'visualization_msgs/srv/GetInteractiveMarkers_Request': visualization_msgs.srv.GetInteractiveMarkers_RequestConstructor,
    'visualization_msgs/srv/GetInteractiveMarkers_Response': visualization_msgs.srv.GetInteractiveMarkers_ResponseConstructor,
  };
  type MessageConstructorType<T> = T extends MessageTypeClassName ? MessageTypeClassConstructorMap[T] : object;

  type ServicesMap = {
    'action_msgs/srv/CancelGoal': action_msgs.srv.CancelGoalConstructor,
    'composition_interfaces/srv/ListNodes': composition_interfaces.srv.ListNodesConstructor,
    'composition_interfaces/srv/LoadNode': composition_interfaces.srv.LoadNodeConstructor,
    'composition_interfaces/srv/UnloadNode': composition_interfaces.srv.UnloadNodeConstructor,
    'diagnostic_msgs/srv/AddDiagnostics': diagnostic_msgs.srv.AddDiagnosticsConstructor,
    'diagnostic_msgs/srv/SelfTest': diagnostic_msgs.srv.SelfTestConstructor,
    'lifecycle_msgs/srv/ChangeState': lifecycle_msgs.srv.ChangeStateConstructor,
    'lifecycle_msgs/srv/GetAvailableStates': lifecycle_msgs.srv.GetAvailableStatesConstructor,
    'lifecycle_msgs/srv/GetAvailableTransitions': lifecycle_msgs.srv.GetAvailableTransitionsConstructor,
    'lifecycle_msgs/srv/GetState': lifecycle_msgs.srv.GetStateConstructor,
    'map_msgs/srv/GetMapROI': map_msgs.srv.GetMapROIConstructor,
    'map_msgs/srv/GetPointMap': map_msgs.srv.GetPointMapConstructor,
    'map_msgs/srv/GetPointMapROI': map_msgs.srv.GetPointMapROIConstructor,
    'map_msgs/srv/ProjectedMapsInfo': map_msgs.srv.ProjectedMapsInfoConstructor,
    'map_msgs/srv/SaveMap': map_msgs.srv.SaveMapConstructor,
    'map_msgs/srv/SetMapProjections': map_msgs.srv.SetMapProjectionsConstructor,
    'nav_msgs/srv/GetMap': nav_msgs.srv.GetMapConstructor,
    'nav_msgs/srv/GetPlan': nav_msgs.srv.GetPlanConstructor,
    'nav_msgs/srv/LoadMap': nav_msgs.srv.LoadMapConstructor,
    'nav_msgs/srv/SetMap': nav_msgs.srv.SetMapConstructor,
    'rcl_interfaces/srv/DescribeParameters': rcl_interfaces.srv.DescribeParametersConstructor,
    'rcl_interfaces/srv/GetParameterTypes': rcl_interfaces.srv.GetParameterTypesConstructor,
    'rcl_interfaces/srv/GetParameters': rcl_interfaces.srv.GetParametersConstructor,
    'rcl_interfaces/srv/ListParameters': rcl_interfaces.srv.ListParametersConstructor,
    'rcl_interfaces/srv/SetParameters': rcl_interfaces.srv.SetParametersConstructor,
    'rcl_interfaces/srv/SetParametersAtomically': rcl_interfaces.srv.SetParametersAtomicallyConstructor,
    'rosbag2_interfaces/srv/Burst': rosbag2_interfaces.srv.BurstConstructor,
    'rosbag2_interfaces/srv/GetRate': rosbag2_interfaces.srv.GetRateConstructor,
    'rosbag2_interfaces/srv/IsPaused': rosbag2_interfaces.srv.IsPausedConstructor,
    'rosbag2_interfaces/srv/Pause': rosbag2_interfaces.srv.PauseConstructor,
    'rosbag2_interfaces/srv/PlayNext': rosbag2_interfaces.srv.PlayNextConstructor,
    'rosbag2_interfaces/srv/Resume': rosbag2_interfaces.srv.ResumeConstructor,
    'rosbag2_interfaces/srv/Seek': rosbag2_interfaces.srv.SeekConstructor,
    'rosbag2_interfaces/srv/SetRate': rosbag2_interfaces.srv.SetRateConstructor,
    'rosbag2_interfaces/srv/Snapshot': rosbag2_interfaces.srv.SnapshotConstructor,
    'rosbag2_interfaces/srv/TogglePaused': rosbag2_interfaces.srv.TogglePausedConstructor,
    'sensor_msgs/srv/SetCameraInfo': sensor_msgs.srv.SetCameraInfoConstructor,
    'std_srvs/srv/Empty': std_srvs.srv.EmptyConstructor,
    'std_srvs/srv/SetBool': std_srvs.srv.SetBoolConstructor,
    'std_srvs/srv/Trigger': std_srvs.srv.TriggerConstructor,
    'tf2_msgs/srv/FrameGraph': tf2_msgs.srv.FrameGraphConstructor,
    'visualization_msgs/srv/GetInteractiveMarkers': visualization_msgs.srv.GetInteractiveMarkersConstructor,
  };
  type ServiceTypeClassName = keyof ServicesMap;
  type Service = ServicesMap[ServiceTypeClassName];
  type ServiceType<T> = T extends ServiceTypeClassName ? ServicesMap[T] : object;

  type ActionsMap = {
    'tf2_msgs/action/LookupTransform': tf2_msgs.action.LookupTransformConstructor,
  };
  type ActionTypeClassName = keyof ActionsMap;
  type Action = ActionsMap[ActionTypeClassName];
  type ActionType<T> = T extends ActionTypeClassName ? ActionsMap[T] : object;

  type TypeClassName = MessageTypeClassName | ServiceTypeClassName | ActionTypeClassName;
  type InterfaceType<T> = T extends TypeClassName ? (MessageTypeClassConstructorMap & ServicesMap & ActionsMap)[T] : object;
}
