// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const FailureDetectorStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  fd_roll: primitiveTypes.bool,
  fd_pitch: primitiveTypes.bool,
  fd_alt: primitiveTypes.bool,
  fd_ext: primitiveTypes.bool,
  fd_arm_escs: primitiveTypes.bool,
  fd_battery: primitiveTypes.bool,
  fd_imbalanced_prop: primitiveTypes.bool,
  fd_motor: primitiveTypes.bool,
  imbalanced_prop_metric: primitiveTypes.float32,
  motor_failure_mask: primitiveTypes.uint16,
});
const FailureDetectorStatusRefArray = ArrayType(FailureDetectorStatusRefStruct);
const FailureDetectorStatusRefStructArray = StructType({
  data: FailureDetectorStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class FailureDetectorStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new FailureDetectorStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._fd_rollIntialized = true;
      this._fd_pitchIntialized = true;
      this._fd_altIntialized = true;
      this._fd_extIntialized = true;
      this._fd_arm_escsIntialized = true;
      this._fd_batteryIntialized = true;
      this._fd_imbalanced_propIntialized = true;
      this._fd_motorIntialized = true;
      this._imbalanced_prop_metricIntialized = true;
      this._motor_failure_maskIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new FailureDetectorStatusRefStruct();
    this._timestampIntialized = false;
    this._fd_rollIntialized = false;
    this._fd_pitchIntialized = false;
    this._fd_altIntialized = false;
    this._fd_extIntialized = false;
    this._fd_arm_escsIntialized = false;
    this._fd_batteryIntialized = false;
    this._fd_imbalanced_propIntialized = false;
    this._fd_motorIntialized = false;
    this._imbalanced_prop_metricIntialized = false;
    this._motor_failure_maskIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new FailureDetectorStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new FailureDetectorStatusArrayWrapper;
  }
  static get ArrayType() {
    return FailureDetectorStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return FailureDetectorStatusRefStructArray
  }
  static get refObjectType() {
    return FailureDetectorStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_rollIntialized) {
        throw new TypeError('Invalid argument: fd_roll in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_pitchIntialized) {
        throw new TypeError('Invalid argument: fd_pitch in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_altIntialized) {
        throw new TypeError('Invalid argument: fd_alt in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_extIntialized) {
        throw new TypeError('Invalid argument: fd_ext in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_arm_escsIntialized) {
        throw new TypeError('Invalid argument: fd_arm_escs in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_batteryIntialized) {
        throw new TypeError('Invalid argument: fd_battery in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_imbalanced_propIntialized) {
        throw new TypeError('Invalid argument: fd_imbalanced_prop in FailureDetectorStatus');
      }
      if (checkConsistency && !this._fd_motorIntialized) {
        throw new TypeError('Invalid argument: fd_motor in FailureDetectorStatus');
      }
      if (checkConsistency && !this._imbalanced_prop_metricIntialized) {
        throw new TypeError('Invalid argument: imbalanced_prop_metric in FailureDetectorStatus');
      }
      if (checkConsistency && !this._motor_failure_maskIntialized) {
        throw new TypeError('Invalid argument: motor_failure_mask in FailureDetectorStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._fd_rollIntialized = true;
    this._refObject.fd_roll = refObject.fd_roll;
    this._fd_pitchIntialized = true;
    this._refObject.fd_pitch = refObject.fd_pitch;
    this._fd_altIntialized = true;
    this._refObject.fd_alt = refObject.fd_alt;
    this._fd_extIntialized = true;
    this._refObject.fd_ext = refObject.fd_ext;
    this._fd_arm_escsIntialized = true;
    this._refObject.fd_arm_escs = refObject.fd_arm_escs;
    this._fd_batteryIntialized = true;
    this._refObject.fd_battery = refObject.fd_battery;
    this._fd_imbalanced_propIntialized = true;
    this._refObject.fd_imbalanced_prop = refObject.fd_imbalanced_prop;
    this._fd_motorIntialized = true;
    this._refObject.fd_motor = refObject.fd_motor;
    this._imbalanced_prop_metricIntialized = true;
    this._refObject.imbalanced_prop_metric = refObject.imbalanced_prop_metric;
    this._motor_failure_maskIntialized = true;
    this._refObject.motor_failure_mask = refObject.motor_failure_mask;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    FailureDetectorStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'FailureDetectorStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get fd_roll() {
    if (!this._fd_rollIntialized) {
      return undefined;
    }
    return this._refObject.fd_roll;
  }
  set fd_roll(value) {
    this._fd_rollIntialized = true;
    this._refObject.fd_roll = value;
  }
  get fd_pitch() {
    if (!this._fd_pitchIntialized) {
      return undefined;
    }
    return this._refObject.fd_pitch;
  }
  set fd_pitch(value) {
    this._fd_pitchIntialized = true;
    this._refObject.fd_pitch = value;
  }
  get fd_alt() {
    if (!this._fd_altIntialized) {
      return undefined;
    }
    return this._refObject.fd_alt;
  }
  set fd_alt(value) {
    this._fd_altIntialized = true;
    this._refObject.fd_alt = value;
  }
  get fd_ext() {
    if (!this._fd_extIntialized) {
      return undefined;
    }
    return this._refObject.fd_ext;
  }
  set fd_ext(value) {
    this._fd_extIntialized = true;
    this._refObject.fd_ext = value;
  }
  get fd_arm_escs() {
    if (!this._fd_arm_escsIntialized) {
      return undefined;
    }
    return this._refObject.fd_arm_escs;
  }
  set fd_arm_escs(value) {
    this._fd_arm_escsIntialized = true;
    this._refObject.fd_arm_escs = value;
  }
  get fd_battery() {
    if (!this._fd_batteryIntialized) {
      return undefined;
    }
    return this._refObject.fd_battery;
  }
  set fd_battery(value) {
    this._fd_batteryIntialized = true;
    this._refObject.fd_battery = value;
  }
  get fd_imbalanced_prop() {
    if (!this._fd_imbalanced_propIntialized) {
      return undefined;
    }
    return this._refObject.fd_imbalanced_prop;
  }
  set fd_imbalanced_prop(value) {
    this._fd_imbalanced_propIntialized = true;
    this._refObject.fd_imbalanced_prop = value;
  }
  get fd_motor() {
    if (!this._fd_motorIntialized) {
      return undefined;
    }
    return this._refObject.fd_motor;
  }
  set fd_motor(value) {
    this._fd_motorIntialized = true;
    this._refObject.fd_motor = value;
  }
  get imbalanced_prop_metric() {
    if (!this._imbalanced_prop_metricIntialized) {
      return undefined;
    }
    return this._refObject.imbalanced_prop_metric;
  }
  set imbalanced_prop_metric(value) {
    this._imbalanced_prop_metricIntialized = true;
    this._refObject.imbalanced_prop_metric = value;
  }
  get motor_failure_mask() {
    if (!this._motor_failure_maskIntialized) {
      return undefined;
    }
    return this._refObject.motor_failure_mask;
  }
  set motor_failure_mask(value) {
    this._motor_failure_maskIntialized = true;
    this._refObject.motor_failure_mask = value;
  }
  copyRefObject(refObject) {
    this._refObject = new FailureDetectorStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._fd_rollIntialized = true;
    this._fd_pitchIntialized = true;
    this._fd_altIntialized = true;
    this._fd_extIntialized = true;
    this._fd_arm_escsIntialized = true;
    this._fd_batteryIntialized = true;
    this._fd_imbalanced_propIntialized = true;
    this._fd_motorIntialized = true;
    this._imbalanced_prop_metricIntialized = true;
    this._motor_failure_maskIntialized = true;
  }
  copy(other) {
    this._refObject = new FailureDetectorStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._fd_rollIntialized = true;
    this._fd_pitchIntialized = true;
    this._fd_altIntialized = true;
    this._fd_extIntialized = true;
    this._fd_arm_escsIntialized = true;
    this._fd_batteryIntialized = true;
    this._fd_imbalanced_propIntialized = true;
    this._fd_motorIntialized = true;
    this._imbalanced_prop_metricIntialized = true;
    this._motor_failure_maskIntialized = true;
  }
  static get classType() {
    return FailureDetectorStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_roll","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_pitch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_ext","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_arm_escs","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_battery","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_imbalanced_prop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fd_motor","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"imbalanced_prop_metric","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"motor_failure_mask","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"FailureDetectorStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"FailureDetectorStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","fd_roll","fd_pitch","fd_alt","fd_ext","fd_arm_escs","fd_battery","fd_imbalanced_prop","fd_motor","imbalanced_prop_metric","motor_failure_mask"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class FailureDetectorStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof FailureDetectorStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new FailureDetectorStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to FailureDetectorStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to FailureDetectorStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new FailureDetectorStatusRefArray(size);
    this._refObject = new FailureDetectorStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new FailureDetectorStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof FailureDetectorStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "FailureDetectorStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      FailureDetectorStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return FailureDetectorStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return FailureDetectorStatusArrayWrapper;
  }
}
module.exports = FailureDetectorStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_roll",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_pitch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_ext",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_arm_escs",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_battery",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_imbalanced_prop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fd_motor",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "imbalanced_prop_metric",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "motor_failure_mask",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "FailureDetectorStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "FailureDetectorStatus"
}
*/
