// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HoverThrustEstimateRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  timestamp_sample: primitiveTypes.uint64,
  hover_thrust: primitiveTypes.float32,
  hover_thrust_var: primitiveTypes.float32,
  accel_innov: primitiveTypes.float32,
  accel_innov_var: primitiveTypes.float32,
  accel_innov_test_ratio: primitiveTypes.float32,
  accel_noise_var: primitiveTypes.float32,
  valid: primitiveTypes.bool,
});
const HoverThrustEstimateRefArray = ArrayType(HoverThrustEstimateRefStruct);
const HoverThrustEstimateRefStructArray = StructType({
  data: HoverThrustEstimateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class HoverThrustEstimateWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new HoverThrustEstimateRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._timestamp_sampleIntialized = true;
      this._hover_thrustIntialized = true;
      this._hover_thrust_varIntialized = true;
      this._accel_innovIntialized = true;
      this._accel_innov_varIntialized = true;
      this._accel_innov_test_ratioIntialized = true;
      this._accel_noise_varIntialized = true;
      this._validIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new HoverThrustEstimateRefStruct();
    this._timestampIntialized = false;
    this._timestamp_sampleIntialized = false;
    this._hover_thrustIntialized = false;
    this._hover_thrust_varIntialized = false;
    this._accel_innovIntialized = false;
    this._accel_innov_varIntialized = false;
    this._accel_innov_test_ratioIntialized = false;
    this._accel_noise_varIntialized = false;
    this._validIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new HoverThrustEstimateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new HoverThrustEstimateArrayWrapper;
  }
  static get ArrayType() {
    return HoverThrustEstimateArrayWrapper;
  }
  static get refObjectArrayType() {
    return HoverThrustEstimateRefStructArray
  }
  static get refObjectType() {
    return HoverThrustEstimateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in HoverThrustEstimate');
      }
      if (checkConsistency && !this._timestamp_sampleIntialized) {
        throw new TypeError('Invalid argument: timestamp_sample in HoverThrustEstimate');
      }
      if (checkConsistency && !this._hover_thrustIntialized) {
        throw new TypeError('Invalid argument: hover_thrust in HoverThrustEstimate');
      }
      if (checkConsistency && !this._hover_thrust_varIntialized) {
        throw new TypeError('Invalid argument: hover_thrust_var in HoverThrustEstimate');
      }
      if (checkConsistency && !this._accel_innovIntialized) {
        throw new TypeError('Invalid argument: accel_innov in HoverThrustEstimate');
      }
      if (checkConsistency && !this._accel_innov_varIntialized) {
        throw new TypeError('Invalid argument: accel_innov_var in HoverThrustEstimate');
      }
      if (checkConsistency && !this._accel_innov_test_ratioIntialized) {
        throw new TypeError('Invalid argument: accel_innov_test_ratio in HoverThrustEstimate');
      }
      if (checkConsistency && !this._accel_noise_varIntialized) {
        throw new TypeError('Invalid argument: accel_noise_var in HoverThrustEstimate');
      }
      if (checkConsistency && !this._validIntialized) {
        throw new TypeError('Invalid argument: valid in HoverThrustEstimate');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = refObject.timestamp_sample;
    this._hover_thrustIntialized = true;
    this._refObject.hover_thrust = refObject.hover_thrust;
    this._hover_thrust_varIntialized = true;
    this._refObject.hover_thrust_var = refObject.hover_thrust_var;
    this._accel_innovIntialized = true;
    this._refObject.accel_innov = refObject.accel_innov;
    this._accel_innov_varIntialized = true;
    this._refObject.accel_innov_var = refObject.accel_innov_var;
    this._accel_innov_test_ratioIntialized = true;
    this._refObject.accel_innov_test_ratio = refObject.accel_innov_test_ratio;
    this._accel_noise_varIntialized = true;
    this._refObject.accel_noise_var = refObject.accel_noise_var;
    this._validIntialized = true;
    this._refObject.valid = refObject.valid;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    HoverThrustEstimateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'HoverThrustEstimate'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get timestamp_sample() {
    if (!this._timestamp_sampleIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_sample;
  }
  set timestamp_sample(value) {
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = value;
  }
  get hover_thrust() {
    if (!this._hover_thrustIntialized) {
      return undefined;
    }
    return this._refObject.hover_thrust;
  }
  set hover_thrust(value) {
    this._hover_thrustIntialized = true;
    this._refObject.hover_thrust = value;
  }
  get hover_thrust_var() {
    if (!this._hover_thrust_varIntialized) {
      return undefined;
    }
    return this._refObject.hover_thrust_var;
  }
  set hover_thrust_var(value) {
    this._hover_thrust_varIntialized = true;
    this._refObject.hover_thrust_var = value;
  }
  get accel_innov() {
    if (!this._accel_innovIntialized) {
      return undefined;
    }
    return this._refObject.accel_innov;
  }
  set accel_innov(value) {
    this._accel_innovIntialized = true;
    this._refObject.accel_innov = value;
  }
  get accel_innov_var() {
    if (!this._accel_innov_varIntialized) {
      return undefined;
    }
    return this._refObject.accel_innov_var;
  }
  set accel_innov_var(value) {
    this._accel_innov_varIntialized = true;
    this._refObject.accel_innov_var = value;
  }
  get accel_innov_test_ratio() {
    if (!this._accel_innov_test_ratioIntialized) {
      return undefined;
    }
    return this._refObject.accel_innov_test_ratio;
  }
  set accel_innov_test_ratio(value) {
    this._accel_innov_test_ratioIntialized = true;
    this._refObject.accel_innov_test_ratio = value;
  }
  get accel_noise_var() {
    if (!this._accel_noise_varIntialized) {
      return undefined;
    }
    return this._refObject.accel_noise_var;
  }
  set accel_noise_var(value) {
    this._accel_noise_varIntialized = true;
    this._refObject.accel_noise_var = value;
  }
  get valid() {
    if (!this._validIntialized) {
      return undefined;
    }
    return this._refObject.valid;
  }
  set valid(value) {
    this._validIntialized = true;
    this._refObject.valid = value;
  }
  copyRefObject(refObject) {
    this._refObject = new HoverThrustEstimateRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._hover_thrustIntialized = true;
    this._hover_thrust_varIntialized = true;
    this._accel_innovIntialized = true;
    this._accel_innov_varIntialized = true;
    this._accel_innov_test_ratioIntialized = true;
    this._accel_noise_varIntialized = true;
    this._validIntialized = true;
  }
  copy(other) {
    this._refObject = new HoverThrustEstimateRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._hover_thrustIntialized = true;
    this._hover_thrust_varIntialized = true;
    this._accel_innovIntialized = true;
    this._accel_innov_varIntialized = true;
    this._accel_innov_test_ratioIntialized = true;
    this._accel_noise_varIntialized = true;
    this._validIntialized = true;
  }
  static get classType() {
    return HoverThrustEstimateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_sample","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"hover_thrust","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"hover_thrust_var","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_innov","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_innov_var","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_innov_test_ratio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_noise_var","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"HoverThrustEstimate","stringUpperBound":null,"isPrimitiveType":false},"msgName":"HoverThrustEstimate"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","timestamp_sample","hover_thrust","hover_thrust_var","accel_innov","accel_innov_var","accel_innov_test_ratio","accel_noise_var","valid"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class HoverThrustEstimateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof HoverThrustEstimateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new HoverThrustEstimateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to HoverThrustEstimateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to HoverThrustEstimateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new HoverThrustEstimateRefArray(size);
    this._refObject = new HoverThrustEstimateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new HoverThrustEstimateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof HoverThrustEstimateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "HoverThrustEstimateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      HoverThrustEstimateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return HoverThrustEstimateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return HoverThrustEstimateArrayWrapper;
  }
}
module.exports = HoverThrustEstimateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_sample",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "hover_thrust",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "hover_thrust_var",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_innov",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_innov_var",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_innov_test_ratio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_noise_var",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "HoverThrustEstimate",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "HoverThrustEstimate"
}
*/
