// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ManualControlSwitchesRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  timestamp_sample: primitiveTypes.uint64,
  mode_slot: primitiveTypes.uint8,
  arm_switch: primitiveTypes.uint8,
  return_switch: primitiveTypes.uint8,
  loiter_switch: primitiveTypes.uint8,
  offboard_switch: primitiveTypes.uint8,
  kill_switch: primitiveTypes.uint8,
  gear_switch: primitiveTypes.uint8,
  transition_switch: primitiveTypes.uint8,
  photo_switch: primitiveTypes.uint8,
  video_switch: primitiveTypes.uint8,
  engage_main_motor_switch: primitiveTypes.uint8,
  switch_changes: primitiveTypes.uint32,
});
const ManualControlSwitchesRefArray = ArrayType(ManualControlSwitchesRefStruct);
const ManualControlSwitchesRefStructArray = StructType({
  data: ManualControlSwitchesRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ManualControlSwitchesWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ManualControlSwitchesRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._timestamp_sampleIntialized = true;
      this._mode_slotIntialized = true;
      this._arm_switchIntialized = true;
      this._return_switchIntialized = true;
      this._loiter_switchIntialized = true;
      this._offboard_switchIntialized = true;
      this._kill_switchIntialized = true;
      this._gear_switchIntialized = true;
      this._transition_switchIntialized = true;
      this._photo_switchIntialized = true;
      this._video_switchIntialized = true;
      this._engage_main_motor_switchIntialized = true;
      this._switch_changesIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ManualControlSwitchesRefStruct();
    this._timestampIntialized = false;
    this._timestamp_sampleIntialized = false;
    this._mode_slotIntialized = false;
    this._arm_switchIntialized = false;
    this._return_switchIntialized = false;
    this._loiter_switchIntialized = false;
    this._offboard_switchIntialized = false;
    this._kill_switchIntialized = false;
    this._gear_switchIntialized = false;
    this._transition_switchIntialized = false;
    this._photo_switchIntialized = false;
    this._video_switchIntialized = false;
    this._engage_main_motor_switchIntialized = false;
    this._switch_changesIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ManualControlSwitchesWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ManualControlSwitchesArrayWrapper;
  }
  static get ArrayType() {
    return ManualControlSwitchesArrayWrapper;
  }
  static get refObjectArrayType() {
    return ManualControlSwitchesRefStructArray
  }
  static get refObjectType() {
    return ManualControlSwitchesRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in ManualControlSwitches');
      }
      if (checkConsistency && !this._timestamp_sampleIntialized) {
        throw new TypeError('Invalid argument: timestamp_sample in ManualControlSwitches');
      }
      if (checkConsistency && !this._mode_slotIntialized) {
        throw new TypeError('Invalid argument: mode_slot in ManualControlSwitches');
      }
      if (checkConsistency && !this._arm_switchIntialized) {
        throw new TypeError('Invalid argument: arm_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._return_switchIntialized) {
        throw new TypeError('Invalid argument: return_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._loiter_switchIntialized) {
        throw new TypeError('Invalid argument: loiter_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._offboard_switchIntialized) {
        throw new TypeError('Invalid argument: offboard_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._kill_switchIntialized) {
        throw new TypeError('Invalid argument: kill_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._gear_switchIntialized) {
        throw new TypeError('Invalid argument: gear_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._transition_switchIntialized) {
        throw new TypeError('Invalid argument: transition_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._photo_switchIntialized) {
        throw new TypeError('Invalid argument: photo_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._video_switchIntialized) {
        throw new TypeError('Invalid argument: video_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._engage_main_motor_switchIntialized) {
        throw new TypeError('Invalid argument: engage_main_motor_switch in ManualControlSwitches');
      }
      if (checkConsistency && !this._switch_changesIntialized) {
        throw new TypeError('Invalid argument: switch_changes in ManualControlSwitches');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = refObject.timestamp_sample;
    this._mode_slotIntialized = true;
    this._refObject.mode_slot = refObject.mode_slot;
    this._arm_switchIntialized = true;
    this._refObject.arm_switch = refObject.arm_switch;
    this._return_switchIntialized = true;
    this._refObject.return_switch = refObject.return_switch;
    this._loiter_switchIntialized = true;
    this._refObject.loiter_switch = refObject.loiter_switch;
    this._offboard_switchIntialized = true;
    this._refObject.offboard_switch = refObject.offboard_switch;
    this._kill_switchIntialized = true;
    this._refObject.kill_switch = refObject.kill_switch;
    this._gear_switchIntialized = true;
    this._refObject.gear_switch = refObject.gear_switch;
    this._transition_switchIntialized = true;
    this._refObject.transition_switch = refObject.transition_switch;
    this._photo_switchIntialized = true;
    this._refObject.photo_switch = refObject.photo_switch;
    this._video_switchIntialized = true;
    this._refObject.video_switch = refObject.video_switch;
    this._engage_main_motor_switchIntialized = true;
    this._refObject.engage_main_motor_switch = refObject.engage_main_motor_switch;
    this._switch_changesIntialized = true;
    this._refObject.switch_changes = refObject.switch_changes;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ManualControlSwitchesWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'ManualControlSwitches'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get timestamp_sample() {
    if (!this._timestamp_sampleIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_sample;
  }
  set timestamp_sample(value) {
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = value;
  }
  get mode_slot() {
    if (!this._mode_slotIntialized) {
      return undefined;
    }
    return this._refObject.mode_slot;
  }
  set mode_slot(value) {
    this._mode_slotIntialized = true;
    this._refObject.mode_slot = value;
  }
  get arm_switch() {
    if (!this._arm_switchIntialized) {
      return undefined;
    }
    return this._refObject.arm_switch;
  }
  set arm_switch(value) {
    this._arm_switchIntialized = true;
    this._refObject.arm_switch = value;
  }
  get return_switch() {
    if (!this._return_switchIntialized) {
      return undefined;
    }
    return this._refObject.return_switch;
  }
  set return_switch(value) {
    this._return_switchIntialized = true;
    this._refObject.return_switch = value;
  }
  get loiter_switch() {
    if (!this._loiter_switchIntialized) {
      return undefined;
    }
    return this._refObject.loiter_switch;
  }
  set loiter_switch(value) {
    this._loiter_switchIntialized = true;
    this._refObject.loiter_switch = value;
  }
  get offboard_switch() {
    if (!this._offboard_switchIntialized) {
      return undefined;
    }
    return this._refObject.offboard_switch;
  }
  set offboard_switch(value) {
    this._offboard_switchIntialized = true;
    this._refObject.offboard_switch = value;
  }
  get kill_switch() {
    if (!this._kill_switchIntialized) {
      return undefined;
    }
    return this._refObject.kill_switch;
  }
  set kill_switch(value) {
    this._kill_switchIntialized = true;
    this._refObject.kill_switch = value;
  }
  get gear_switch() {
    if (!this._gear_switchIntialized) {
      return undefined;
    }
    return this._refObject.gear_switch;
  }
  set gear_switch(value) {
    this._gear_switchIntialized = true;
    this._refObject.gear_switch = value;
  }
  get transition_switch() {
    if (!this._transition_switchIntialized) {
      return undefined;
    }
    return this._refObject.transition_switch;
  }
  set transition_switch(value) {
    this._transition_switchIntialized = true;
    this._refObject.transition_switch = value;
  }
  get photo_switch() {
    if (!this._photo_switchIntialized) {
      return undefined;
    }
    return this._refObject.photo_switch;
  }
  set photo_switch(value) {
    this._photo_switchIntialized = true;
    this._refObject.photo_switch = value;
  }
  get video_switch() {
    if (!this._video_switchIntialized) {
      return undefined;
    }
    return this._refObject.video_switch;
  }
  set video_switch(value) {
    this._video_switchIntialized = true;
    this._refObject.video_switch = value;
  }
  get engage_main_motor_switch() {
    if (!this._engage_main_motor_switchIntialized) {
      return undefined;
    }
    return this._refObject.engage_main_motor_switch;
  }
  set engage_main_motor_switch(value) {
    this._engage_main_motor_switchIntialized = true;
    this._refObject.engage_main_motor_switch = value;
  }
  get switch_changes() {
    if (!this._switch_changesIntialized) {
      return undefined;
    }
    return this._refObject.switch_changes;
  }
  set switch_changes(value) {
    this._switch_changesIntialized = true;
    this._refObject.switch_changes = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ManualControlSwitchesRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._mode_slotIntialized = true;
    this._arm_switchIntialized = true;
    this._return_switchIntialized = true;
    this._loiter_switchIntialized = true;
    this._offboard_switchIntialized = true;
    this._kill_switchIntialized = true;
    this._gear_switchIntialized = true;
    this._transition_switchIntialized = true;
    this._photo_switchIntialized = true;
    this._video_switchIntialized = true;
    this._engage_main_motor_switchIntialized = true;
    this._switch_changesIntialized = true;
  }
  copy(other) {
    this._refObject = new ManualControlSwitchesRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._mode_slotIntialized = true;
    this._arm_switchIntialized = true;
    this._return_switchIntialized = true;
    this._loiter_switchIntialized = true;
    this._offboard_switchIntialized = true;
    this._kill_switchIntialized = true;
    this._gear_switchIntialized = true;
    this._transition_switchIntialized = true;
    this._photo_switchIntialized = true;
    this._video_switchIntialized = true;
    this._engage_main_motor_switchIntialized = true;
    this._switch_changesIntialized = true;
  }
  static get classType() {
    return ManualControlSwitchesWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"SWITCH_POS_NONE","value":0},{"type":"uint8","name":"SWITCH_POS_ON","value":1},{"type":"uint8","name":"SWITCH_POS_MIDDLE","value":2},{"type":"uint8","name":"SWITCH_POS_OFF","value":3},{"type":"uint8","name":"MODE_SLOT_NONE","value":0},{"type":"uint8","name":"MODE_SLOT_1","value":1},{"type":"uint8","name":"MODE_SLOT_2","value":2},{"type":"uint8","name":"MODE_SLOT_3","value":3},{"type":"uint8","name":"MODE_SLOT_4","value":4},{"type":"uint8","name":"MODE_SLOT_5","value":5},{"type":"uint8","name":"MODE_SLOT_6","value":6},{"type":"uint8","name":"MODE_SLOT_NUM","value":6}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_sample","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mode_slot","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"arm_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"return_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loiter_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"offboard_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"kill_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gear_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"transition_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"photo_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"video_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"engage_main_motor_switch","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"switch_changes","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"ManualControlSwitches","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ManualControlSwitches"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","timestamp_sample","mode_slot","arm_switch","return_switch","loiter_switch","offboard_switch","kill_switch","gear_switch","transition_switch","photo_switch","video_switch","engage_main_motor_switch","switch_changes"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ManualControlSwitchesArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ManualControlSwitchesWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ManualControlSwitchesWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ManualControlSwitchesArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ManualControlSwitchesArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ManualControlSwitchesRefArray(size);
    this._refObject = new ManualControlSwitchesRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ManualControlSwitchesWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ManualControlSwitchesArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ManualControlSwitchesArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ManualControlSwitchesWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ManualControlSwitchesWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ManualControlSwitchesArrayWrapper;
  }
}
// Define constants (12 in total)
Object.defineProperty(ManualControlSwitchesWrapper, "SWITCH_POS_NONE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "SWITCH_POS_ON", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "SWITCH_POS_MIDDLE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "SWITCH_POS_OFF", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_NONE", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_1", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_2", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_3", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_4", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_5", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_6", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ManualControlSwitchesWrapper, "MODE_SLOT_NUM", {value: 6, writable: false, enumerable: true, configurable: true});
module.exports = ManualControlSwitchesWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "SWITCH_POS_NONE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SWITCH_POS_ON",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SWITCH_POS_MIDDLE",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "SWITCH_POS_OFF",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_NONE",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_1",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_2",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_3",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_4",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_5",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_6",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "MODE_SLOT_NUM",
      "value": 6
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_sample",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mode_slot",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "arm_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "return_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loiter_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "offboard_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "kill_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gear_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "transition_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "photo_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "video_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "engage_main_motor_switch",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "switch_changes",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "ManualControlSwitches",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ManualControlSwitches"
}
*/
