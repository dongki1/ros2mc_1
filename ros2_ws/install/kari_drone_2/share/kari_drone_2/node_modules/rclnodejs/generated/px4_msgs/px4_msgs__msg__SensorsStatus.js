// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const UInt32Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt32.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const SensorsStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  device_id_primary: primitiveTypes.uint32,
  device_ids: ArrayType(primitiveTypes.uint32, 4),
  inconsistency: ArrayType(primitiveTypes.float32, 4),
  healthy: ArrayType(primitiveTypes.bool, 4),
  priority: ArrayType(primitiveTypes.uint8, 4),
  enabled: ArrayType(primitiveTypes.bool, 4),
  external: ArrayType(primitiveTypes.bool, 4),
});
const SensorsStatusRefArray = ArrayType(SensorsStatusRefStruct);
const SensorsStatusRefStructArray = StructType({
  data: SensorsStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorsStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._healthyArray = [];
    this._enabledArray = [];
    this._externalArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorsStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._device_id_primaryIntialized = true;
      this._wrapperFields.device_ids = UInt32Wrapper.createArray();
      this._wrapperFields.device_ids.copy(other._wrapperFields.device_ids);
      this._wrapperFields.inconsistency = Float32Wrapper.createArray();
      this._wrapperFields.inconsistency.copy(other._wrapperFields.inconsistency);
      this._wrapperFields.healthy = BoolWrapper.createArray();
      this._wrapperFields.healthy.copy(other._wrapperFields.healthy);
      this.healthy = other.healthy;
      this._wrapperFields.priority = UInt8Wrapper.createArray();
      this._wrapperFields.priority.copy(other._wrapperFields.priority);
      this._wrapperFields.enabled = BoolWrapper.createArray();
      this._wrapperFields.enabled.copy(other._wrapperFields.enabled);
      this.enabled = other.enabled;
      this._wrapperFields.external = BoolWrapper.createArray();
      this._wrapperFields.external.copy(other._wrapperFields.external);
      this.external = other.external;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorsStatusRefStruct();
    this._timestampIntialized = false;
    this._device_id_primaryIntialized = false;
    this._wrapperFields.device_ids = UInt32Wrapper.createArray();
    this._wrapperFields.inconsistency = Float32Wrapper.createArray();
    this._wrapperFields.healthy = BoolWrapper.createArray();
    this._wrapperFields.priority = UInt8Wrapper.createArray();
    this._wrapperFields.enabled = BoolWrapper.createArray();
    this._wrapperFields.external = BoolWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new SensorsStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorsStatusArrayWrapper;
  }
  static get ArrayType() {
    return SensorsStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorsStatusRefStructArray
  }
  static get refObjectType() {
    return SensorsStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in SensorsStatus');
      }
      if (checkConsistency && !this._device_id_primaryIntialized) {
        throw new TypeError('Invalid argument: device_id_primary in SensorsStatus');
      }
    this._refObject.device_ids = Array.from(this._wrapperFields.device_ids.data);
    this._refObject.inconsistency = Array.from(this._wrapperFields.inconsistency.data);
    this._refObject.healthy = this._healthyArray;
    this._refObject.priority = Array.from(this._wrapperFields.priority.data);
    this._refObject.enabled = this._enabledArray;
    this._refObject.external = this._externalArray;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._device_id_primaryIntialized = true;
    this._refObject.device_id_primary = refObject.device_id_primary;
    this._wrapperFields.device_ids.fill(refObject.device_ids.toArray());
    this._wrapperFields.inconsistency.fill(refObject.inconsistency.toArray());
    this._healthyArray = refObject.healthy.toArray();
    this._wrapperFields.priority.fill(refObject.priority.toArray());
    this._enabledArray = refObject.enabled.toArray();
    this._externalArray = refObject.external.toArray();
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    SensorsStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'SensorsStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get device_id_primary() {
    if (!this._device_id_primaryIntialized) {
      return undefined;
    }
    return this._refObject.device_id_primary;
  }
  set device_id_primary(value) {
    this._device_id_primaryIntialized = true;
    this._refObject.device_id_primary = value;
  }
  get device_ids() {
    return this._wrapperFields['device_ids'].data;
  }
  set device_ids(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['device_ids'].fill(value);
  }
  get inconsistency() {
    return this._wrapperFields['inconsistency'].data;
  }
  set inconsistency(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['inconsistency'].fill(value);
  }
  get healthy() {
    return this._healthyArray;
  }
  set healthy(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._healthyArray = value;
  }
  get priority() {
    return this._wrapperFields['priority'].data;
  }
  set priority(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['priority'].fill(value);
  }
  get enabled() {
    return this._enabledArray;
  }
  set enabled(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._enabledArray = value;
  }
  get external() {
    return this._externalArray;
  }
  set external(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._externalArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SensorsStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._device_id_primaryIntialized = true;
    this._wrapperFields.device_ids.fill(refObject.device_ids.toArray());
    this._wrapperFields.inconsistency.fill(refObject.inconsistency.toArray());
    refObject.healthy.data.length = refObject.healthy.size;
    for (let index = 0; index < refObject.healthy.size; index++) {
      this._healthyArray[index] = refObject.healthy.data[index].data;
    }
    this._wrapperFields.priority.fill(refObject.priority.toArray());
    refObject.enabled.data.length = refObject.enabled.size;
    for (let index = 0; index < refObject.enabled.size; index++) {
      this._enabledArray[index] = refObject.enabled.data[index].data;
    }
    refObject.external.data.length = refObject.external.size;
    for (let index = 0; index < refObject.external.size; index++) {
      this._externalArray[index] = refObject.external.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new SensorsStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._device_id_primaryIntialized = true;
    this._wrapperFields.device_ids.copy(other._wrapperFields.device_ids);
    this._wrapperFields.inconsistency.copy(other._wrapperFields.inconsistency);
    this._healthyArray = other._healthyArray.slice();
    this._wrapperFields.priority.copy(other._wrapperFields.priority);
    this._enabledArray = other._enabledArray.slice();
    this._externalArray = other._externalArray.slice();
  }
  static get classType() {
    return SensorsStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"device_id_primary","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"device_ids","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"inconsistency","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"healthy","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"priority","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"enabled","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"external","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"SensorsStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorsStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","device_id_primary","device_ids","inconsistency","healthy","priority","enabled","external"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorsStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorsStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorsStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorsStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorsStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorsStatusRefArray(size);
    this._refObject = new SensorsStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorsStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorsStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorsStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorsStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorsStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorsStatusArrayWrapper;
  }
}
module.exports = SensorsStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "device_id_primary",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "device_ids",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "inconsistency",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "healthy",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "priority",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "enabled",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "external",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "SensorsStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorsStatus"
}
*/
