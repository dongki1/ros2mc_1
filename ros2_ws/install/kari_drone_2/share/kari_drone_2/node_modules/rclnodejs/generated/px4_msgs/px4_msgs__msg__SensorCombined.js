// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const SensorCombinedRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  gyro_rad: ArrayType(primitiveTypes.float32, 3),
  gyro_integral_dt: primitiveTypes.uint32,
  accelerometer_timestamp_relative: primitiveTypes.int32,
  accelerometer_m_s2: ArrayType(primitiveTypes.float32, 3),
  accelerometer_integral_dt: primitiveTypes.uint32,
  accelerometer_clipping: primitiveTypes.uint8,
  gyro_clipping: primitiveTypes.uint8,
  accel_calibration_count: primitiveTypes.uint8,
  gyro_calibration_count: primitiveTypes.uint8,
});
const SensorCombinedRefArray = ArrayType(SensorCombinedRefStruct);
const SensorCombinedRefStructArray = StructType({
  data: SensorCombinedRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorCombinedWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorCombinedRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._wrapperFields.gyro_rad = Float32Wrapper.createArray();
      this._wrapperFields.gyro_rad.copy(other._wrapperFields.gyro_rad);
      this._gyro_integral_dtIntialized = true;
      this._accelerometer_timestamp_relativeIntialized = true;
      this._wrapperFields.accelerometer_m_s2 = Float32Wrapper.createArray();
      this._wrapperFields.accelerometer_m_s2.copy(other._wrapperFields.accelerometer_m_s2);
      this._accelerometer_integral_dtIntialized = true;
      this._accelerometer_clippingIntialized = true;
      this._gyro_clippingIntialized = true;
      this._accel_calibration_countIntialized = true;
      this._gyro_calibration_countIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorCombinedRefStruct();
    this._timestampIntialized = false;
    this._wrapperFields.gyro_rad = Float32Wrapper.createArray();
    this._gyro_integral_dtIntialized = false;
    this._accelerometer_timestamp_relativeIntialized = false;
    this._wrapperFields.accelerometer_m_s2 = Float32Wrapper.createArray();
    this._accelerometer_integral_dtIntialized = false;
    this._accelerometer_clippingIntialized = false;
    this._gyro_clippingIntialized = false;
    this._accel_calibration_countIntialized = false;
    this._gyro_calibration_countIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new SensorCombinedWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorCombinedArrayWrapper;
  }
  static get ArrayType() {
    return SensorCombinedArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorCombinedRefStructArray
  }
  static get refObjectType() {
    return SensorCombinedRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in SensorCombined');
      }
      if (checkConsistency && !this._gyro_integral_dtIntialized) {
        throw new TypeError('Invalid argument: gyro_integral_dt in SensorCombined');
      }
      if (checkConsistency && !this._accelerometer_timestamp_relativeIntialized) {
        throw new TypeError('Invalid argument: accelerometer_timestamp_relative in SensorCombined');
      }
      if (checkConsistency && !this._accelerometer_integral_dtIntialized) {
        throw new TypeError('Invalid argument: accelerometer_integral_dt in SensorCombined');
      }
      if (checkConsistency && !this._accelerometer_clippingIntialized) {
        throw new TypeError('Invalid argument: accelerometer_clipping in SensorCombined');
      }
      if (checkConsistency && !this._gyro_clippingIntialized) {
        throw new TypeError('Invalid argument: gyro_clipping in SensorCombined');
      }
      if (checkConsistency && !this._accel_calibration_countIntialized) {
        throw new TypeError('Invalid argument: accel_calibration_count in SensorCombined');
      }
      if (checkConsistency && !this._gyro_calibration_countIntialized) {
        throw new TypeError('Invalid argument: gyro_calibration_count in SensorCombined');
      }
    this._refObject.gyro_rad = Array.from(this._wrapperFields.gyro_rad.data);
    this._refObject.accelerometer_m_s2 = Array.from(this._wrapperFields.accelerometer_m_s2.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._wrapperFields.gyro_rad.fill(refObject.gyro_rad.toArray());
    this._gyro_integral_dtIntialized = true;
    this._refObject.gyro_integral_dt = refObject.gyro_integral_dt;
    this._accelerometer_timestamp_relativeIntialized = true;
    this._refObject.accelerometer_timestamp_relative = refObject.accelerometer_timestamp_relative;
    this._wrapperFields.accelerometer_m_s2.fill(refObject.accelerometer_m_s2.toArray());
    this._accelerometer_integral_dtIntialized = true;
    this._refObject.accelerometer_integral_dt = refObject.accelerometer_integral_dt;
    this._accelerometer_clippingIntialized = true;
    this._refObject.accelerometer_clipping = refObject.accelerometer_clipping;
    this._gyro_clippingIntialized = true;
    this._refObject.gyro_clipping = refObject.gyro_clipping;
    this._accel_calibration_countIntialized = true;
    this._refObject.accel_calibration_count = refObject.accel_calibration_count;
    this._gyro_calibration_countIntialized = true;
    this._refObject.gyro_calibration_count = refObject.gyro_calibration_count;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    SensorCombinedWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'SensorCombined'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get gyro_rad() {
    return this._wrapperFields['gyro_rad'].data;
  }
  set gyro_rad(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['gyro_rad'].fill(value);
  }
  get gyro_integral_dt() {
    if (!this._gyro_integral_dtIntialized) {
      return undefined;
    }
    return this._refObject.gyro_integral_dt;
  }
  set gyro_integral_dt(value) {
    this._gyro_integral_dtIntialized = true;
    this._refObject.gyro_integral_dt = value;
  }
  get accelerometer_timestamp_relative() {
    if (!this._accelerometer_timestamp_relativeIntialized) {
      return undefined;
    }
    return this._refObject.accelerometer_timestamp_relative;
  }
  set accelerometer_timestamp_relative(value) {
    this._accelerometer_timestamp_relativeIntialized = true;
    this._refObject.accelerometer_timestamp_relative = value;
  }
  get accelerometer_m_s2() {
    return this._wrapperFields['accelerometer_m_s2'].data;
  }
  set accelerometer_m_s2(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['accelerometer_m_s2'].fill(value);
  }
  get accelerometer_integral_dt() {
    if (!this._accelerometer_integral_dtIntialized) {
      return undefined;
    }
    return this._refObject.accelerometer_integral_dt;
  }
  set accelerometer_integral_dt(value) {
    this._accelerometer_integral_dtIntialized = true;
    this._refObject.accelerometer_integral_dt = value;
  }
  get accelerometer_clipping() {
    if (!this._accelerometer_clippingIntialized) {
      return undefined;
    }
    return this._refObject.accelerometer_clipping;
  }
  set accelerometer_clipping(value) {
    this._accelerometer_clippingIntialized = true;
    this._refObject.accelerometer_clipping = value;
  }
  get gyro_clipping() {
    if (!this._gyro_clippingIntialized) {
      return undefined;
    }
    return this._refObject.gyro_clipping;
  }
  set gyro_clipping(value) {
    this._gyro_clippingIntialized = true;
    this._refObject.gyro_clipping = value;
  }
  get accel_calibration_count() {
    if (!this._accel_calibration_countIntialized) {
      return undefined;
    }
    return this._refObject.accel_calibration_count;
  }
  set accel_calibration_count(value) {
    this._accel_calibration_countIntialized = true;
    this._refObject.accel_calibration_count = value;
  }
  get gyro_calibration_count() {
    if (!this._gyro_calibration_countIntialized) {
      return undefined;
    }
    return this._refObject.gyro_calibration_count;
  }
  set gyro_calibration_count(value) {
    this._gyro_calibration_countIntialized = true;
    this._refObject.gyro_calibration_count = value;
  }
  copyRefObject(refObject) {
    this._refObject = new SensorCombinedRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._wrapperFields.gyro_rad.fill(refObject.gyro_rad.toArray());
    this._gyro_integral_dtIntialized = true;
    this._accelerometer_timestamp_relativeIntialized = true;
    this._wrapperFields.accelerometer_m_s2.fill(refObject.accelerometer_m_s2.toArray());
    this._accelerometer_integral_dtIntialized = true;
    this._accelerometer_clippingIntialized = true;
    this._gyro_clippingIntialized = true;
    this._accel_calibration_countIntialized = true;
    this._gyro_calibration_countIntialized = true;
  }
  copy(other) {
    this._refObject = new SensorCombinedRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._wrapperFields.gyro_rad.copy(other._wrapperFields.gyro_rad);
    this._gyro_integral_dtIntialized = true;
    this._accelerometer_timestamp_relativeIntialized = true;
    this._wrapperFields.accelerometer_m_s2.copy(other._wrapperFields.accelerometer_m_s2);
    this._accelerometer_integral_dtIntialized = true;
    this._accelerometer_clippingIntialized = true;
    this._gyro_clippingIntialized = true;
    this._accel_calibration_countIntialized = true;
    this._gyro_calibration_countIntialized = true;
  }
  static get classType() {
    return SensorCombinedWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int32","name":"RELATIVE_TIMESTAMP_INVALID","value":2147483647},{"type":"uint8","name":"CLIPPING_X","value":1},{"type":"uint8","name":"CLIPPING_Y","value":2},{"type":"uint8","name":"CLIPPING_Z","value":4}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_rad","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_integral_dt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accelerometer_timestamp_relative","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accelerometer_m_s2","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accelerometer_integral_dt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accelerometer_clipping","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_clipping","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_calibration_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_calibration_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"SensorCombined","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorCombined"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","gyro_rad","gyro_integral_dt","accelerometer_timestamp_relative","accelerometer_m_s2","accelerometer_integral_dt","accelerometer_clipping","gyro_clipping","accel_calibration_count","gyro_calibration_count"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorCombinedArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorCombinedWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorCombinedWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorCombinedArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorCombinedArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorCombinedRefArray(size);
    this._refObject = new SensorCombinedRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorCombinedWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorCombinedArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorCombinedArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorCombinedWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorCombinedWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorCombinedArrayWrapper;
  }
}
// Define constants (4 in total)
Object.defineProperty(SensorCombinedWrapper, "RELATIVE_TIMESTAMP_INVALID", {value: 2147483647, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorCombinedWrapper, "CLIPPING_X", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorCombinedWrapper, "CLIPPING_Y", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(SensorCombinedWrapper, "CLIPPING_Z", {value: 4, writable: false, enumerable: true, configurable: true});
module.exports = SensorCombinedWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int32",
      "name": "RELATIVE_TIMESTAMP_INVALID",
      "value": 2147483647
    },
    {
      "type": "uint8",
      "name": "CLIPPING_X",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "CLIPPING_Y",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "CLIPPING_Z",
      "value": 4
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_rad",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_integral_dt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accelerometer_timestamp_relative",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accelerometer_m_s2",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accelerometer_integral_dt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accelerometer_clipping",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_clipping",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_calibration_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_calibration_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "SensorCombined",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorCombined"
}
*/
