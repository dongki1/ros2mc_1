// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TuneControlRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  tune_id: primitiveTypes.uint8,
  tune_override: primitiveTypes.bool,
  frequency: primitiveTypes.uint16,
  duration: primitiveTypes.uint32,
  silence: primitiveTypes.uint32,
  volume: primitiveTypes.uint8,
});
const TuneControlRefArray = ArrayType(TuneControlRefStruct);
const TuneControlRefStructArray = StructType({
  data: TuneControlRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TuneControlWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TuneControlRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._tune_idIntialized = true;
      this._tune_overrideIntialized = true;
      this._frequencyIntialized = true;
      this._durationIntialized = true;
      this._silenceIntialized = true;
      this._volumeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TuneControlRefStruct();
    this._timestampIntialized = false;
    this._tune_idIntialized = false;
    this._tune_overrideIntialized = false;
    this._frequencyIntialized = false;
    this._durationIntialized = false;
    this._silenceIntialized = false;
    this._volumeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new TuneControlWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TuneControlArrayWrapper;
  }
  static get ArrayType() {
    return TuneControlArrayWrapper;
  }
  static get refObjectArrayType() {
    return TuneControlRefStructArray
  }
  static get refObjectType() {
    return TuneControlRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in TuneControl');
      }
      if (checkConsistency && !this._tune_idIntialized) {
        throw new TypeError('Invalid argument: tune_id in TuneControl');
      }
      if (checkConsistency && !this._tune_overrideIntialized) {
        throw new TypeError('Invalid argument: tune_override in TuneControl');
      }
      if (checkConsistency && !this._frequencyIntialized) {
        throw new TypeError('Invalid argument: frequency in TuneControl');
      }
      if (checkConsistency && !this._durationIntialized) {
        throw new TypeError('Invalid argument: duration in TuneControl');
      }
      if (checkConsistency && !this._silenceIntialized) {
        throw new TypeError('Invalid argument: silence in TuneControl');
      }
      if (checkConsistency && !this._volumeIntialized) {
        throw new TypeError('Invalid argument: volume in TuneControl');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._tune_idIntialized = true;
    this._refObject.tune_id = refObject.tune_id;
    this._tune_overrideIntialized = true;
    this._refObject.tune_override = refObject.tune_override;
    this._frequencyIntialized = true;
    this._refObject.frequency = refObject.frequency;
    this._durationIntialized = true;
    this._refObject.duration = refObject.duration;
    this._silenceIntialized = true;
    this._refObject.silence = refObject.silence;
    this._volumeIntialized = true;
    this._refObject.volume = refObject.volume;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    TuneControlWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'TuneControl'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get tune_id() {
    if (!this._tune_idIntialized) {
      return undefined;
    }
    return this._refObject.tune_id;
  }
  set tune_id(value) {
    this._tune_idIntialized = true;
    this._refObject.tune_id = value;
  }
  get tune_override() {
    if (!this._tune_overrideIntialized) {
      return undefined;
    }
    return this._refObject.tune_override;
  }
  set tune_override(value) {
    this._tune_overrideIntialized = true;
    this._refObject.tune_override = value;
  }
  get frequency() {
    if (!this._frequencyIntialized) {
      return undefined;
    }
    return this._refObject.frequency;
  }
  set frequency(value) {
    this._frequencyIntialized = true;
    this._refObject.frequency = value;
  }
  get duration() {
    if (!this._durationIntialized) {
      return undefined;
    }
    return this._refObject.duration;
  }
  set duration(value) {
    this._durationIntialized = true;
    this._refObject.duration = value;
  }
  get silence() {
    if (!this._silenceIntialized) {
      return undefined;
    }
    return this._refObject.silence;
  }
  set silence(value) {
    this._silenceIntialized = true;
    this._refObject.silence = value;
  }
  get volume() {
    if (!this._volumeIntialized) {
      return undefined;
    }
    return this._refObject.volume;
  }
  set volume(value) {
    this._volumeIntialized = true;
    this._refObject.volume = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TuneControlRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._tune_idIntialized = true;
    this._tune_overrideIntialized = true;
    this._frequencyIntialized = true;
    this._durationIntialized = true;
    this._silenceIntialized = true;
    this._volumeIntialized = true;
  }
  copy(other) {
    this._refObject = new TuneControlRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._tune_idIntialized = true;
    this._tune_overrideIntialized = true;
    this._frequencyIntialized = true;
    this._durationIntialized = true;
    this._silenceIntialized = true;
    this._volumeIntialized = true;
  }
  static get classType() {
    return TuneControlWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"TUNE_ID_STOP","value":0},{"type":"uint8","name":"TUNE_ID_STARTUP","value":1},{"type":"uint8","name":"TUNE_ID_ERROR","value":2},{"type":"uint8","name":"TUNE_ID_NOTIFY_POSITIVE","value":3},{"type":"uint8","name":"TUNE_ID_NOTIFY_NEUTRAL","value":4},{"type":"uint8","name":"TUNE_ID_NOTIFY_NEGATIVE","value":5},{"type":"uint8","name":"TUNE_ID_ARMING_WARNING","value":6},{"type":"uint8","name":"TUNE_ID_BATTERY_WARNING_SLOW","value":7},{"type":"uint8","name":"TUNE_ID_BATTERY_WARNING_FAST","value":8},{"type":"uint8","name":"TUNE_ID_GPS_WARNING","value":9},{"type":"uint8","name":"TUNE_ID_ARMING_FAILURE","value":10},{"type":"uint8","name":"TUNE_ID_PARACHUTE_RELEASE","value":11},{"type":"uint8","name":"TUNE_ID_SINGLE_BEEP","value":12},{"type":"uint8","name":"TUNE_ID_HOME_SET","value":13},{"type":"uint8","name":"TUNE_ID_SD_INIT","value":14},{"type":"uint8","name":"TUNE_ID_SD_ERROR","value":15},{"type":"uint8","name":"TUNE_ID_PROG_PX4IO","value":16},{"type":"uint8","name":"TUNE_ID_PROG_PX4IO_OK","value":17},{"type":"uint8","name":"TUNE_ID_PROG_PX4IO_ERR","value":18},{"type":"uint8","name":"TUNE_ID_POWER_OFF","value":19},{"type":"uint8","name":"NUMBER_OF_TUNES","value":20},{"type":"uint8","name":"VOLUME_LEVEL_MIN","value":0},{"type":"uint8","name":"VOLUME_LEVEL_DEFAULT","value":20},{"type":"uint8","name":"VOLUME_LEVEL_MAX","value":100},{"type":"uint8","name":"ORB_QUEUE_LENGTH","value":4}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tune_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tune_override","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"frequency","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"duration","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"silence","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"volume","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"TuneControl","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TuneControl"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","tune_id","tune_override","frequency","duration","silence","volume"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TuneControlArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TuneControlWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TuneControlWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TuneControlArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TuneControlArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TuneControlRefArray(size);
    this._refObject = new TuneControlRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TuneControlWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TuneControlArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TuneControlArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TuneControlWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TuneControlWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TuneControlArrayWrapper;
  }
}
// Define constants (25 in total)
Object.defineProperty(TuneControlWrapper, "TUNE_ID_STOP", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_STARTUP", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_ERROR", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_NOTIFY_POSITIVE", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_NOTIFY_NEUTRAL", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_NOTIFY_NEGATIVE", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_ARMING_WARNING", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_BATTERY_WARNING_SLOW", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_BATTERY_WARNING_FAST", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_GPS_WARNING", {value: 9, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_ARMING_FAILURE", {value: 10, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_PARACHUTE_RELEASE", {value: 11, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_SINGLE_BEEP", {value: 12, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_HOME_SET", {value: 13, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_SD_INIT", {value: 14, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_SD_ERROR", {value: 15, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_PROG_PX4IO", {value: 16, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_PROG_PX4IO_OK", {value: 17, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_PROG_PX4IO_ERR", {value: 18, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "TUNE_ID_POWER_OFF", {value: 19, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "NUMBER_OF_TUNES", {value: 20, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "VOLUME_LEVEL_MIN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "VOLUME_LEVEL_DEFAULT", {value: 20, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "VOLUME_LEVEL_MAX", {value: 100, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TuneControlWrapper, "ORB_QUEUE_LENGTH", {value: 4, writable: false, enumerable: true, configurable: true});
module.exports = TuneControlWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "TUNE_ID_STOP",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_STARTUP",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_ERROR",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_NOTIFY_POSITIVE",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_NOTIFY_NEUTRAL",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_NOTIFY_NEGATIVE",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_ARMING_WARNING",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_BATTERY_WARNING_SLOW",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_BATTERY_WARNING_FAST",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_GPS_WARNING",
      "value": 9
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_ARMING_FAILURE",
      "value": 10
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_PARACHUTE_RELEASE",
      "value": 11
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_SINGLE_BEEP",
      "value": 12
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_HOME_SET",
      "value": 13
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_SD_INIT",
      "value": 14
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_SD_ERROR",
      "value": 15
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_PROG_PX4IO",
      "value": 16
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_PROG_PX4IO_OK",
      "value": 17
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_PROG_PX4IO_ERR",
      "value": 18
    },
    {
      "type": "uint8",
      "name": "TUNE_ID_POWER_OFF",
      "value": 19
    },
    {
      "type": "uint8",
      "name": "NUMBER_OF_TUNES",
      "value": 20
    },
    {
      "type": "uint8",
      "name": "VOLUME_LEVEL_MIN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "VOLUME_LEVEL_DEFAULT",
      "value": 20
    },
    {
      "type": "uint8",
      "name": "VOLUME_LEVEL_MAX",
      "value": 100
    },
    {
      "type": "uint8",
      "name": "ORB_QUEUE_LENGTH",
      "value": 4
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tune_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tune_override",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "frequency",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "duration",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "silence",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "volume",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "TuneControl",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TuneControl"
}
*/
