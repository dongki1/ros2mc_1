// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const EstimatorGpsStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  timestamp_sample: primitiveTypes.uint64,
  checks_passed: primitiveTypes.bool,
  check_fail_gps_fix: primitiveTypes.bool,
  check_fail_min_sat_count: primitiveTypes.bool,
  check_fail_max_pdop: primitiveTypes.bool,
  check_fail_max_horz_err: primitiveTypes.bool,
  check_fail_max_vert_err: primitiveTypes.bool,
  check_fail_max_spd_err: primitiveTypes.bool,
  check_fail_max_horz_drift: primitiveTypes.bool,
  check_fail_max_vert_drift: primitiveTypes.bool,
  check_fail_max_horz_spd_err: primitiveTypes.bool,
  check_fail_max_vert_spd_err: primitiveTypes.bool,
  position_drift_rate_horizontal_m_s: primitiveTypes.float32,
  position_drift_rate_vertical_m_s: primitiveTypes.float32,
  filtered_horizontal_speed_m_s: primitiveTypes.float32,
});
const EstimatorGpsStatusRefArray = ArrayType(EstimatorGpsStatusRefStruct);
const EstimatorGpsStatusRefStructArray = StructType({
  data: EstimatorGpsStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class EstimatorGpsStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new EstimatorGpsStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._timestamp_sampleIntialized = true;
      this._checks_passedIntialized = true;
      this._check_fail_gps_fixIntialized = true;
      this._check_fail_min_sat_countIntialized = true;
      this._check_fail_max_pdopIntialized = true;
      this._check_fail_max_horz_errIntialized = true;
      this._check_fail_max_vert_errIntialized = true;
      this._check_fail_max_spd_errIntialized = true;
      this._check_fail_max_horz_driftIntialized = true;
      this._check_fail_max_vert_driftIntialized = true;
      this._check_fail_max_horz_spd_errIntialized = true;
      this._check_fail_max_vert_spd_errIntialized = true;
      this._position_drift_rate_horizontal_m_sIntialized = true;
      this._position_drift_rate_vertical_m_sIntialized = true;
      this._filtered_horizontal_speed_m_sIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new EstimatorGpsStatusRefStruct();
    this._timestampIntialized = false;
    this._timestamp_sampleIntialized = false;
    this._checks_passedIntialized = false;
    this._check_fail_gps_fixIntialized = false;
    this._check_fail_min_sat_countIntialized = false;
    this._check_fail_max_pdopIntialized = false;
    this._check_fail_max_horz_errIntialized = false;
    this._check_fail_max_vert_errIntialized = false;
    this._check_fail_max_spd_errIntialized = false;
    this._check_fail_max_horz_driftIntialized = false;
    this._check_fail_max_vert_driftIntialized = false;
    this._check_fail_max_horz_spd_errIntialized = false;
    this._check_fail_max_vert_spd_errIntialized = false;
    this._position_drift_rate_horizontal_m_sIntialized = false;
    this._position_drift_rate_vertical_m_sIntialized = false;
    this._filtered_horizontal_speed_m_sIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new EstimatorGpsStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new EstimatorGpsStatusArrayWrapper;
  }
  static get ArrayType() {
    return EstimatorGpsStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return EstimatorGpsStatusRefStructArray
  }
  static get refObjectType() {
    return EstimatorGpsStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._timestamp_sampleIntialized) {
        throw new TypeError('Invalid argument: timestamp_sample in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._checks_passedIntialized) {
        throw new TypeError('Invalid argument: checks_passed in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_gps_fixIntialized) {
        throw new TypeError('Invalid argument: check_fail_gps_fix in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_min_sat_countIntialized) {
        throw new TypeError('Invalid argument: check_fail_min_sat_count in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_pdopIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_pdop in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_horz_errIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_horz_err in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_vert_errIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_vert_err in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_spd_errIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_spd_err in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_horz_driftIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_horz_drift in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_vert_driftIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_vert_drift in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_horz_spd_errIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_horz_spd_err in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._check_fail_max_vert_spd_errIntialized) {
        throw new TypeError('Invalid argument: check_fail_max_vert_spd_err in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._position_drift_rate_horizontal_m_sIntialized) {
        throw new TypeError('Invalid argument: position_drift_rate_horizontal_m_s in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._position_drift_rate_vertical_m_sIntialized) {
        throw new TypeError('Invalid argument: position_drift_rate_vertical_m_s in EstimatorGpsStatus');
      }
      if (checkConsistency && !this._filtered_horizontal_speed_m_sIntialized) {
        throw new TypeError('Invalid argument: filtered_horizontal_speed_m_s in EstimatorGpsStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = refObject.timestamp_sample;
    this._checks_passedIntialized = true;
    this._refObject.checks_passed = refObject.checks_passed;
    this._check_fail_gps_fixIntialized = true;
    this._refObject.check_fail_gps_fix = refObject.check_fail_gps_fix;
    this._check_fail_min_sat_countIntialized = true;
    this._refObject.check_fail_min_sat_count = refObject.check_fail_min_sat_count;
    this._check_fail_max_pdopIntialized = true;
    this._refObject.check_fail_max_pdop = refObject.check_fail_max_pdop;
    this._check_fail_max_horz_errIntialized = true;
    this._refObject.check_fail_max_horz_err = refObject.check_fail_max_horz_err;
    this._check_fail_max_vert_errIntialized = true;
    this._refObject.check_fail_max_vert_err = refObject.check_fail_max_vert_err;
    this._check_fail_max_spd_errIntialized = true;
    this._refObject.check_fail_max_spd_err = refObject.check_fail_max_spd_err;
    this._check_fail_max_horz_driftIntialized = true;
    this._refObject.check_fail_max_horz_drift = refObject.check_fail_max_horz_drift;
    this._check_fail_max_vert_driftIntialized = true;
    this._refObject.check_fail_max_vert_drift = refObject.check_fail_max_vert_drift;
    this._check_fail_max_horz_spd_errIntialized = true;
    this._refObject.check_fail_max_horz_spd_err = refObject.check_fail_max_horz_spd_err;
    this._check_fail_max_vert_spd_errIntialized = true;
    this._refObject.check_fail_max_vert_spd_err = refObject.check_fail_max_vert_spd_err;
    this._position_drift_rate_horizontal_m_sIntialized = true;
    this._refObject.position_drift_rate_horizontal_m_s = refObject.position_drift_rate_horizontal_m_s;
    this._position_drift_rate_vertical_m_sIntialized = true;
    this._refObject.position_drift_rate_vertical_m_s = refObject.position_drift_rate_vertical_m_s;
    this._filtered_horizontal_speed_m_sIntialized = true;
    this._refObject.filtered_horizontal_speed_m_s = refObject.filtered_horizontal_speed_m_s;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    EstimatorGpsStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'EstimatorGpsStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get timestamp_sample() {
    if (!this._timestamp_sampleIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_sample;
  }
  set timestamp_sample(value) {
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = value;
  }
  get checks_passed() {
    if (!this._checks_passedIntialized) {
      return undefined;
    }
    return this._refObject.checks_passed;
  }
  set checks_passed(value) {
    this._checks_passedIntialized = true;
    this._refObject.checks_passed = value;
  }
  get check_fail_gps_fix() {
    if (!this._check_fail_gps_fixIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_gps_fix;
  }
  set check_fail_gps_fix(value) {
    this._check_fail_gps_fixIntialized = true;
    this._refObject.check_fail_gps_fix = value;
  }
  get check_fail_min_sat_count() {
    if (!this._check_fail_min_sat_countIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_min_sat_count;
  }
  set check_fail_min_sat_count(value) {
    this._check_fail_min_sat_countIntialized = true;
    this._refObject.check_fail_min_sat_count = value;
  }
  get check_fail_max_pdop() {
    if (!this._check_fail_max_pdopIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_pdop;
  }
  set check_fail_max_pdop(value) {
    this._check_fail_max_pdopIntialized = true;
    this._refObject.check_fail_max_pdop = value;
  }
  get check_fail_max_horz_err() {
    if (!this._check_fail_max_horz_errIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_horz_err;
  }
  set check_fail_max_horz_err(value) {
    this._check_fail_max_horz_errIntialized = true;
    this._refObject.check_fail_max_horz_err = value;
  }
  get check_fail_max_vert_err() {
    if (!this._check_fail_max_vert_errIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_vert_err;
  }
  set check_fail_max_vert_err(value) {
    this._check_fail_max_vert_errIntialized = true;
    this._refObject.check_fail_max_vert_err = value;
  }
  get check_fail_max_spd_err() {
    if (!this._check_fail_max_spd_errIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_spd_err;
  }
  set check_fail_max_spd_err(value) {
    this._check_fail_max_spd_errIntialized = true;
    this._refObject.check_fail_max_spd_err = value;
  }
  get check_fail_max_horz_drift() {
    if (!this._check_fail_max_horz_driftIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_horz_drift;
  }
  set check_fail_max_horz_drift(value) {
    this._check_fail_max_horz_driftIntialized = true;
    this._refObject.check_fail_max_horz_drift = value;
  }
  get check_fail_max_vert_drift() {
    if (!this._check_fail_max_vert_driftIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_vert_drift;
  }
  set check_fail_max_vert_drift(value) {
    this._check_fail_max_vert_driftIntialized = true;
    this._refObject.check_fail_max_vert_drift = value;
  }
  get check_fail_max_horz_spd_err() {
    if (!this._check_fail_max_horz_spd_errIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_horz_spd_err;
  }
  set check_fail_max_horz_spd_err(value) {
    this._check_fail_max_horz_spd_errIntialized = true;
    this._refObject.check_fail_max_horz_spd_err = value;
  }
  get check_fail_max_vert_spd_err() {
    if (!this._check_fail_max_vert_spd_errIntialized) {
      return undefined;
    }
    return this._refObject.check_fail_max_vert_spd_err;
  }
  set check_fail_max_vert_spd_err(value) {
    this._check_fail_max_vert_spd_errIntialized = true;
    this._refObject.check_fail_max_vert_spd_err = value;
  }
  get position_drift_rate_horizontal_m_s() {
    if (!this._position_drift_rate_horizontal_m_sIntialized) {
      return undefined;
    }
    return this._refObject.position_drift_rate_horizontal_m_s;
  }
  set position_drift_rate_horizontal_m_s(value) {
    this._position_drift_rate_horizontal_m_sIntialized = true;
    this._refObject.position_drift_rate_horizontal_m_s = value;
  }
  get position_drift_rate_vertical_m_s() {
    if (!this._position_drift_rate_vertical_m_sIntialized) {
      return undefined;
    }
    return this._refObject.position_drift_rate_vertical_m_s;
  }
  set position_drift_rate_vertical_m_s(value) {
    this._position_drift_rate_vertical_m_sIntialized = true;
    this._refObject.position_drift_rate_vertical_m_s = value;
  }
  get filtered_horizontal_speed_m_s() {
    if (!this._filtered_horizontal_speed_m_sIntialized) {
      return undefined;
    }
    return this._refObject.filtered_horizontal_speed_m_s;
  }
  set filtered_horizontal_speed_m_s(value) {
    this._filtered_horizontal_speed_m_sIntialized = true;
    this._refObject.filtered_horizontal_speed_m_s = value;
  }
  copyRefObject(refObject) {
    this._refObject = new EstimatorGpsStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._checks_passedIntialized = true;
    this._check_fail_gps_fixIntialized = true;
    this._check_fail_min_sat_countIntialized = true;
    this._check_fail_max_pdopIntialized = true;
    this._check_fail_max_horz_errIntialized = true;
    this._check_fail_max_vert_errIntialized = true;
    this._check_fail_max_spd_errIntialized = true;
    this._check_fail_max_horz_driftIntialized = true;
    this._check_fail_max_vert_driftIntialized = true;
    this._check_fail_max_horz_spd_errIntialized = true;
    this._check_fail_max_vert_spd_errIntialized = true;
    this._position_drift_rate_horizontal_m_sIntialized = true;
    this._position_drift_rate_vertical_m_sIntialized = true;
    this._filtered_horizontal_speed_m_sIntialized = true;
  }
  copy(other) {
    this._refObject = new EstimatorGpsStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._checks_passedIntialized = true;
    this._check_fail_gps_fixIntialized = true;
    this._check_fail_min_sat_countIntialized = true;
    this._check_fail_max_pdopIntialized = true;
    this._check_fail_max_horz_errIntialized = true;
    this._check_fail_max_vert_errIntialized = true;
    this._check_fail_max_spd_errIntialized = true;
    this._check_fail_max_horz_driftIntialized = true;
    this._check_fail_max_vert_driftIntialized = true;
    this._check_fail_max_horz_spd_errIntialized = true;
    this._check_fail_max_vert_spd_errIntialized = true;
    this._position_drift_rate_horizontal_m_sIntialized = true;
    this._position_drift_rate_vertical_m_sIntialized = true;
    this._filtered_horizontal_speed_m_sIntialized = true;
  }
  static get classType() {
    return EstimatorGpsStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_sample","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"checks_passed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_gps_fix","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_min_sat_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_pdop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_horz_err","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_vert_err","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_spd_err","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_horz_drift","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_vert_drift","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_horz_spd_err","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"check_fail_max_vert_spd_err","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"position_drift_rate_horizontal_m_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"position_drift_rate_vertical_m_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"filtered_horizontal_speed_m_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"EstimatorGpsStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"EstimatorGpsStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","timestamp_sample","checks_passed","check_fail_gps_fix","check_fail_min_sat_count","check_fail_max_pdop","check_fail_max_horz_err","check_fail_max_vert_err","check_fail_max_spd_err","check_fail_max_horz_drift","check_fail_max_vert_drift","check_fail_max_horz_spd_err","check_fail_max_vert_spd_err","position_drift_rate_horizontal_m_s","position_drift_rate_vertical_m_s","filtered_horizontal_speed_m_s"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class EstimatorGpsStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof EstimatorGpsStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new EstimatorGpsStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EstimatorGpsStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EstimatorGpsStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new EstimatorGpsStatusRefArray(size);
    this._refObject = new EstimatorGpsStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new EstimatorGpsStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof EstimatorGpsStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "EstimatorGpsStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      EstimatorGpsStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return EstimatorGpsStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return EstimatorGpsStatusArrayWrapper;
  }
}
module.exports = EstimatorGpsStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_sample",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "checks_passed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_gps_fix",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_min_sat_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_pdop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_horz_err",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_vert_err",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_spd_err",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_horz_drift",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_vert_drift",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_horz_spd_err",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "check_fail_max_vert_spd_err",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "position_drift_rate_horizontal_m_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "position_drift_rate_vertical_m_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "filtered_horizontal_speed_m_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "EstimatorGpsStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "EstimatorGpsStatus"
}
*/
