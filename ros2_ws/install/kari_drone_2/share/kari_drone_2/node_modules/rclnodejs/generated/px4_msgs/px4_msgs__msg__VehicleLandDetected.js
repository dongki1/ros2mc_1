// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const VehicleLandDetectedRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  freefall: primitiveTypes.bool,
  ground_contact: primitiveTypes.bool,
  maybe_landed: primitiveTypes.bool,
  landed: primitiveTypes.bool,
  in_ground_effect: primitiveTypes.bool,
  in_descend: primitiveTypes.bool,
  has_low_throttle: primitiveTypes.bool,
  vertical_movement: primitiveTypes.bool,
  horizontal_movement: primitiveTypes.bool,
  rotational_movement: primitiveTypes.bool,
  close_to_ground_or_skipped_check: primitiveTypes.bool,
  at_rest: primitiveTypes.bool,
});
const VehicleLandDetectedRefArray = ArrayType(VehicleLandDetectedRefStruct);
const VehicleLandDetectedRefStructArray = StructType({
  data: VehicleLandDetectedRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class VehicleLandDetectedWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new VehicleLandDetectedRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._freefallIntialized = true;
      this._ground_contactIntialized = true;
      this._maybe_landedIntialized = true;
      this._landedIntialized = true;
      this._in_ground_effectIntialized = true;
      this._in_descendIntialized = true;
      this._has_low_throttleIntialized = true;
      this._vertical_movementIntialized = true;
      this._horizontal_movementIntialized = true;
      this._rotational_movementIntialized = true;
      this._close_to_ground_or_skipped_checkIntialized = true;
      this._at_restIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new VehicleLandDetectedRefStruct();
    this._timestampIntialized = false;
    this._freefallIntialized = false;
    this._ground_contactIntialized = false;
    this._maybe_landedIntialized = false;
    this._landedIntialized = false;
    this._in_ground_effectIntialized = false;
    this._in_descendIntialized = false;
    this._has_low_throttleIntialized = false;
    this._vertical_movementIntialized = false;
    this._horizontal_movementIntialized = false;
    this._rotational_movementIntialized = false;
    this._close_to_ground_or_skipped_checkIntialized = false;
    this._at_restIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new VehicleLandDetectedWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new VehicleLandDetectedArrayWrapper;
  }
  static get ArrayType() {
    return VehicleLandDetectedArrayWrapper;
  }
  static get refObjectArrayType() {
    return VehicleLandDetectedRefStructArray
  }
  static get refObjectType() {
    return VehicleLandDetectedRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in VehicleLandDetected');
      }
      if (checkConsistency && !this._freefallIntialized) {
        throw new TypeError('Invalid argument: freefall in VehicleLandDetected');
      }
      if (checkConsistency && !this._ground_contactIntialized) {
        throw new TypeError('Invalid argument: ground_contact in VehicleLandDetected');
      }
      if (checkConsistency && !this._maybe_landedIntialized) {
        throw new TypeError('Invalid argument: maybe_landed in VehicleLandDetected');
      }
      if (checkConsistency && !this._landedIntialized) {
        throw new TypeError('Invalid argument: landed in VehicleLandDetected');
      }
      if (checkConsistency && !this._in_ground_effectIntialized) {
        throw new TypeError('Invalid argument: in_ground_effect in VehicleLandDetected');
      }
      if (checkConsistency && !this._in_descendIntialized) {
        throw new TypeError('Invalid argument: in_descend in VehicleLandDetected');
      }
      if (checkConsistency && !this._has_low_throttleIntialized) {
        throw new TypeError('Invalid argument: has_low_throttle in VehicleLandDetected');
      }
      if (checkConsistency && !this._vertical_movementIntialized) {
        throw new TypeError('Invalid argument: vertical_movement in VehicleLandDetected');
      }
      if (checkConsistency && !this._horizontal_movementIntialized) {
        throw new TypeError('Invalid argument: horizontal_movement in VehicleLandDetected');
      }
      if (checkConsistency && !this._rotational_movementIntialized) {
        throw new TypeError('Invalid argument: rotational_movement in VehicleLandDetected');
      }
      if (checkConsistency && !this._close_to_ground_or_skipped_checkIntialized) {
        throw new TypeError('Invalid argument: close_to_ground_or_skipped_check in VehicleLandDetected');
      }
      if (checkConsistency && !this._at_restIntialized) {
        throw new TypeError('Invalid argument: at_rest in VehicleLandDetected');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._freefallIntialized = true;
    this._refObject.freefall = refObject.freefall;
    this._ground_contactIntialized = true;
    this._refObject.ground_contact = refObject.ground_contact;
    this._maybe_landedIntialized = true;
    this._refObject.maybe_landed = refObject.maybe_landed;
    this._landedIntialized = true;
    this._refObject.landed = refObject.landed;
    this._in_ground_effectIntialized = true;
    this._refObject.in_ground_effect = refObject.in_ground_effect;
    this._in_descendIntialized = true;
    this._refObject.in_descend = refObject.in_descend;
    this._has_low_throttleIntialized = true;
    this._refObject.has_low_throttle = refObject.has_low_throttle;
    this._vertical_movementIntialized = true;
    this._refObject.vertical_movement = refObject.vertical_movement;
    this._horizontal_movementIntialized = true;
    this._refObject.horizontal_movement = refObject.horizontal_movement;
    this._rotational_movementIntialized = true;
    this._refObject.rotational_movement = refObject.rotational_movement;
    this._close_to_ground_or_skipped_checkIntialized = true;
    this._refObject.close_to_ground_or_skipped_check = refObject.close_to_ground_or_skipped_check;
    this._at_restIntialized = true;
    this._refObject.at_rest = refObject.at_rest;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    VehicleLandDetectedWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'VehicleLandDetected'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get freefall() {
    if (!this._freefallIntialized) {
      return undefined;
    }
    return this._refObject.freefall;
  }
  set freefall(value) {
    this._freefallIntialized = true;
    this._refObject.freefall = value;
  }
  get ground_contact() {
    if (!this._ground_contactIntialized) {
      return undefined;
    }
    return this._refObject.ground_contact;
  }
  set ground_contact(value) {
    this._ground_contactIntialized = true;
    this._refObject.ground_contact = value;
  }
  get maybe_landed() {
    if (!this._maybe_landedIntialized) {
      return undefined;
    }
    return this._refObject.maybe_landed;
  }
  set maybe_landed(value) {
    this._maybe_landedIntialized = true;
    this._refObject.maybe_landed = value;
  }
  get landed() {
    if (!this._landedIntialized) {
      return undefined;
    }
    return this._refObject.landed;
  }
  set landed(value) {
    this._landedIntialized = true;
    this._refObject.landed = value;
  }
  get in_ground_effect() {
    if (!this._in_ground_effectIntialized) {
      return undefined;
    }
    return this._refObject.in_ground_effect;
  }
  set in_ground_effect(value) {
    this._in_ground_effectIntialized = true;
    this._refObject.in_ground_effect = value;
  }
  get in_descend() {
    if (!this._in_descendIntialized) {
      return undefined;
    }
    return this._refObject.in_descend;
  }
  set in_descend(value) {
    this._in_descendIntialized = true;
    this._refObject.in_descend = value;
  }
  get has_low_throttle() {
    if (!this._has_low_throttleIntialized) {
      return undefined;
    }
    return this._refObject.has_low_throttle;
  }
  set has_low_throttle(value) {
    this._has_low_throttleIntialized = true;
    this._refObject.has_low_throttle = value;
  }
  get vertical_movement() {
    if (!this._vertical_movementIntialized) {
      return undefined;
    }
    return this._refObject.vertical_movement;
  }
  set vertical_movement(value) {
    this._vertical_movementIntialized = true;
    this._refObject.vertical_movement = value;
  }
  get horizontal_movement() {
    if (!this._horizontal_movementIntialized) {
      return undefined;
    }
    return this._refObject.horizontal_movement;
  }
  set horizontal_movement(value) {
    this._horizontal_movementIntialized = true;
    this._refObject.horizontal_movement = value;
  }
  get rotational_movement() {
    if (!this._rotational_movementIntialized) {
      return undefined;
    }
    return this._refObject.rotational_movement;
  }
  set rotational_movement(value) {
    this._rotational_movementIntialized = true;
    this._refObject.rotational_movement = value;
  }
  get close_to_ground_or_skipped_check() {
    if (!this._close_to_ground_or_skipped_checkIntialized) {
      return undefined;
    }
    return this._refObject.close_to_ground_or_skipped_check;
  }
  set close_to_ground_or_skipped_check(value) {
    this._close_to_ground_or_skipped_checkIntialized = true;
    this._refObject.close_to_ground_or_skipped_check = value;
  }
  get at_rest() {
    if (!this._at_restIntialized) {
      return undefined;
    }
    return this._refObject.at_rest;
  }
  set at_rest(value) {
    this._at_restIntialized = true;
    this._refObject.at_rest = value;
  }
  copyRefObject(refObject) {
    this._refObject = new VehicleLandDetectedRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._freefallIntialized = true;
    this._ground_contactIntialized = true;
    this._maybe_landedIntialized = true;
    this._landedIntialized = true;
    this._in_ground_effectIntialized = true;
    this._in_descendIntialized = true;
    this._has_low_throttleIntialized = true;
    this._vertical_movementIntialized = true;
    this._horizontal_movementIntialized = true;
    this._rotational_movementIntialized = true;
    this._close_to_ground_or_skipped_checkIntialized = true;
    this._at_restIntialized = true;
  }
  copy(other) {
    this._refObject = new VehicleLandDetectedRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._freefallIntialized = true;
    this._ground_contactIntialized = true;
    this._maybe_landedIntialized = true;
    this._landedIntialized = true;
    this._in_ground_effectIntialized = true;
    this._in_descendIntialized = true;
    this._has_low_throttleIntialized = true;
    this._vertical_movementIntialized = true;
    this._horizontal_movementIntialized = true;
    this._rotational_movementIntialized = true;
    this._close_to_ground_or_skipped_checkIntialized = true;
    this._at_restIntialized = true;
  }
  static get classType() {
    return VehicleLandDetectedWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"freefall","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ground_contact","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"maybe_landed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"landed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"in_ground_effect","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"in_descend","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"has_low_throttle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vertical_movement","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"horizontal_movement","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rotational_movement","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"close_to_ground_or_skipped_check","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"at_rest","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"VehicleLandDetected","stringUpperBound":null,"isPrimitiveType":false},"msgName":"VehicleLandDetected"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","freefall","ground_contact","maybe_landed","landed","in_ground_effect","in_descend","has_low_throttle","vertical_movement","horizontal_movement","rotational_movement","close_to_ground_or_skipped_check","at_rest"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class VehicleLandDetectedArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof VehicleLandDetectedWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new VehicleLandDetectedWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VehicleLandDetectedArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VehicleLandDetectedArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new VehicleLandDetectedRefArray(size);
    this._refObject = new VehicleLandDetectedRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new VehicleLandDetectedWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof VehicleLandDetectedArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "VehicleLandDetectedArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      VehicleLandDetectedWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return VehicleLandDetectedWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return VehicleLandDetectedArrayWrapper;
  }
}
module.exports = VehicleLandDetectedWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "freefall",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ground_contact",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "maybe_landed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "landed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "in_ground_effect",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "in_descend",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "has_low_throttle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vertical_movement",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "horizontal_movement",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rotational_movement",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "close_to_ground_or_skipped_check",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "at_rest",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "VehicleLandDetected",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "VehicleLandDetected"
}
*/
