// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const Int32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int32.js');
const CharWrapper = require('../../generated/std_msgs/std_msgs__msg__Char.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const RcParameterMapRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  valid: ArrayType(primitiveTypes.bool, 3),
  param_index: ArrayType(primitiveTypes.int32, 3),
  param_id: ArrayType(primitiveTypes.char, 51),
  scale: ArrayType(primitiveTypes.float32, 3),
  value0: ArrayType(primitiveTypes.float32, 3),
  value_min: ArrayType(primitiveTypes.float32, 3),
  value_max: ArrayType(primitiveTypes.float32, 3),
});
const RcParameterMapRefArray = ArrayType(RcParameterMapRefStruct);
const RcParameterMapRefStructArray = StructType({
  data: RcParameterMapRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RcParameterMapWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._validArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RcParameterMapRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._wrapperFields.valid = BoolWrapper.createArray();
      this._wrapperFields.valid.copy(other._wrapperFields.valid);
      this.valid = other.valid;
      this._wrapperFields.param_index = Int32Wrapper.createArray();
      this._wrapperFields.param_index.copy(other._wrapperFields.param_index);
      this._wrapperFields.param_id = CharWrapper.createArray();
      this._wrapperFields.param_id.copy(other._wrapperFields.param_id);
      this._wrapperFields.scale = Float32Wrapper.createArray();
      this._wrapperFields.scale.copy(other._wrapperFields.scale);
      this._wrapperFields.value0 = Float32Wrapper.createArray();
      this._wrapperFields.value0.copy(other._wrapperFields.value0);
      this._wrapperFields.value_min = Float32Wrapper.createArray();
      this._wrapperFields.value_min.copy(other._wrapperFields.value_min);
      this._wrapperFields.value_max = Float32Wrapper.createArray();
      this._wrapperFields.value_max.copy(other._wrapperFields.value_max);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RcParameterMapRefStruct();
    this._timestampIntialized = false;
    this._wrapperFields.valid = BoolWrapper.createArray();
    this._wrapperFields.param_index = Int32Wrapper.createArray();
    this._wrapperFields.param_id = CharWrapper.createArray();
    this._wrapperFields.scale = Float32Wrapper.createArray();
    this._wrapperFields.value0 = Float32Wrapper.createArray();
    this._wrapperFields.value_min = Float32Wrapper.createArray();
    this._wrapperFields.value_max = Float32Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new RcParameterMapWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RcParameterMapArrayWrapper;
  }
  static get ArrayType() {
    return RcParameterMapArrayWrapper;
  }
  static get refObjectArrayType() {
    return RcParameterMapRefStructArray
  }
  static get refObjectType() {
    return RcParameterMapRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in RcParameterMap');
      }
    this._refObject.valid = this._validArray;
    this._refObject.param_index = Array.from(this._wrapperFields.param_index.data);
    this._refObject.param_id = Array.from(this._wrapperFields.param_id.data);
    this._refObject.scale = Array.from(this._wrapperFields.scale.data);
    this._refObject.value0 = Array.from(this._wrapperFields.value0.data);
    this._refObject.value_min = Array.from(this._wrapperFields.value_min.data);
    this._refObject.value_max = Array.from(this._wrapperFields.value_max.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._validArray = refObject.valid.toArray();
    this._wrapperFields.param_index.fill(refObject.param_index.toArray());
    this._wrapperFields.param_id.fill(refObject.param_id.toArray());
    this._wrapperFields.scale.fill(refObject.scale.toArray());
    this._wrapperFields.value0.fill(refObject.value0.toArray());
    this._wrapperFields.value_min.fill(refObject.value_min.toArray());
    this._wrapperFields.value_max.fill(refObject.value_max.toArray());
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    RcParameterMapWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'RcParameterMap'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get valid() {
    return this._validArray;
  }
  set valid(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._validArray = value;
  }
  get param_index() {
    return this._wrapperFields['param_index'].data;
  }
  set param_index(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['param_index'].fill(value);
  }
  get param_id() {
    return this._wrapperFields['param_id'].data;
  }
  set param_id(value) {
    if (value.length !== 51) {
      throw new RangeError('The length of the array must be 51.');
    }
    this._wrapperFields['param_id'].fill(value);
  }
  get scale() {
    return this._wrapperFields['scale'].data;
  }
  set scale(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['scale'].fill(value);
  }
  get value0() {
    return this._wrapperFields['value0'].data;
  }
  set value0(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['value0'].fill(value);
  }
  get value_min() {
    return this._wrapperFields['value_min'].data;
  }
  set value_min(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['value_min'].fill(value);
  }
  get value_max() {
    return this._wrapperFields['value_max'].data;
  }
  set value_max(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['value_max'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new RcParameterMapRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    refObject.valid.data.length = refObject.valid.size;
    for (let index = 0; index < refObject.valid.size; index++) {
      this._validArray[index] = refObject.valid.data[index].data;
    }
    this._wrapperFields.param_index.fill(refObject.param_index.toArray());
    this._wrapperFields.param_id.fill(refObject.param_id.toArray());
    this._wrapperFields.scale.fill(refObject.scale.toArray());
    this._wrapperFields.value0.fill(refObject.value0.toArray());
    this._wrapperFields.value_min.fill(refObject.value_min.toArray());
    this._wrapperFields.value_max.fill(refObject.value_max.toArray());
  }
  copy(other) {
    this._refObject = new RcParameterMapRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._validArray = other._validArray.slice();
    this._wrapperFields.param_index.copy(other._wrapperFields.param_index);
    this._wrapperFields.param_id.copy(other._wrapperFields.param_id);
    this._wrapperFields.scale.copy(other._wrapperFields.scale);
    this._wrapperFields.value0.copy(other._wrapperFields.value0);
    this._wrapperFields.value_min.copy(other._wrapperFields.value_min);
    this._wrapperFields.value_max.copy(other._wrapperFields.value_max);
  }
  static get classType() {
    return RcParameterMapWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"RC_PARAM_MAP_NCHAN","value":3},{"type":"uint8","name":"PARAM_ID_LEN","value":16}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"param_index","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"param_id","type":{"isArray":true,"arraySize":51,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"char","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"scale","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"value0","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"value_min","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"value_max","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"RcParameterMap","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RcParameterMap"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","valid","param_index","param_id","scale","value0","value_min","value_max"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RcParameterMapArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RcParameterMapWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RcParameterMapWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RcParameterMapArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RcParameterMapArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RcParameterMapRefArray(size);
    this._refObject = new RcParameterMapRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RcParameterMapWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RcParameterMapArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RcParameterMapArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RcParameterMapWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RcParameterMapWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RcParameterMapArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(RcParameterMapWrapper, "RC_PARAM_MAP_NCHAN", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(RcParameterMapWrapper, "PARAM_ID_LEN", {value: 16, writable: false, enumerable: true, configurable: true});
module.exports = RcParameterMapWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "RC_PARAM_MAP_NCHAN",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "PARAM_ID_LEN",
      "value": 16
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "param_index",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "param_id",
      "type": {
        "isArray": true,
        "arraySize": 51,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "char",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "scale",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "value0",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "value_min",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "value_max",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "RcParameterMap",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RcParameterMap"
}
*/
