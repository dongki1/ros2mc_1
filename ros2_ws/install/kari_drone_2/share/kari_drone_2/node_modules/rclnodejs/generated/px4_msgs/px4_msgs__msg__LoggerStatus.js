// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const LoggerStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  type: primitiveTypes.uint8,
  backend: primitiveTypes.uint8,
  total_written_kb: primitiveTypes.float32,
  write_rate_kb_s: primitiveTypes.float32,
  dropouts: primitiveTypes.uint32,
  message_gaps: primitiveTypes.uint32,
  buffer_used_bytes: primitiveTypes.uint32,
  buffer_size_bytes: primitiveTypes.uint32,
  num_messages: primitiveTypes.uint8,
});
const LoggerStatusRefArray = ArrayType(LoggerStatusRefStruct);
const LoggerStatusRefStructArray = StructType({
  data: LoggerStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class LoggerStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new LoggerStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._typeIntialized = true;
      this._backendIntialized = true;
      this._total_written_kbIntialized = true;
      this._write_rate_kb_sIntialized = true;
      this._dropoutsIntialized = true;
      this._message_gapsIntialized = true;
      this._buffer_used_bytesIntialized = true;
      this._buffer_size_bytesIntialized = true;
      this._num_messagesIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new LoggerStatusRefStruct();
    this._timestampIntialized = false;
    this._typeIntialized = false;
    this._backendIntialized = false;
    this._total_written_kbIntialized = false;
    this._write_rate_kb_sIntialized = false;
    this._dropoutsIntialized = false;
    this._message_gapsIntialized = false;
    this._buffer_used_bytesIntialized = false;
    this._buffer_size_bytesIntialized = false;
    this._num_messagesIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new LoggerStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new LoggerStatusArrayWrapper;
  }
  static get ArrayType() {
    return LoggerStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return LoggerStatusRefStructArray
  }
  static get refObjectType() {
    return LoggerStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in LoggerStatus');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in LoggerStatus');
      }
      if (checkConsistency && !this._backendIntialized) {
        throw new TypeError('Invalid argument: backend in LoggerStatus');
      }
      if (checkConsistency && !this._total_written_kbIntialized) {
        throw new TypeError('Invalid argument: total_written_kb in LoggerStatus');
      }
      if (checkConsistency && !this._write_rate_kb_sIntialized) {
        throw new TypeError('Invalid argument: write_rate_kb_s in LoggerStatus');
      }
      if (checkConsistency && !this._dropoutsIntialized) {
        throw new TypeError('Invalid argument: dropouts in LoggerStatus');
      }
      if (checkConsistency && !this._message_gapsIntialized) {
        throw new TypeError('Invalid argument: message_gaps in LoggerStatus');
      }
      if (checkConsistency && !this._buffer_used_bytesIntialized) {
        throw new TypeError('Invalid argument: buffer_used_bytes in LoggerStatus');
      }
      if (checkConsistency && !this._buffer_size_bytesIntialized) {
        throw new TypeError('Invalid argument: buffer_size_bytes in LoggerStatus');
      }
      if (checkConsistency && !this._num_messagesIntialized) {
        throw new TypeError('Invalid argument: num_messages in LoggerStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._backendIntialized = true;
    this._refObject.backend = refObject.backend;
    this._total_written_kbIntialized = true;
    this._refObject.total_written_kb = refObject.total_written_kb;
    this._write_rate_kb_sIntialized = true;
    this._refObject.write_rate_kb_s = refObject.write_rate_kb_s;
    this._dropoutsIntialized = true;
    this._refObject.dropouts = refObject.dropouts;
    this._message_gapsIntialized = true;
    this._refObject.message_gaps = refObject.message_gaps;
    this._buffer_used_bytesIntialized = true;
    this._refObject.buffer_used_bytes = refObject.buffer_used_bytes;
    this._buffer_size_bytesIntialized = true;
    this._refObject.buffer_size_bytes = refObject.buffer_size_bytes;
    this._num_messagesIntialized = true;
    this._refObject.num_messages = refObject.num_messages;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    LoggerStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'LoggerStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get backend() {
    if (!this._backendIntialized) {
      return undefined;
    }
    return this._refObject.backend;
  }
  set backend(value) {
    this._backendIntialized = true;
    this._refObject.backend = value;
  }
  get total_written_kb() {
    if (!this._total_written_kbIntialized) {
      return undefined;
    }
    return this._refObject.total_written_kb;
  }
  set total_written_kb(value) {
    this._total_written_kbIntialized = true;
    this._refObject.total_written_kb = value;
  }
  get write_rate_kb_s() {
    if (!this._write_rate_kb_sIntialized) {
      return undefined;
    }
    return this._refObject.write_rate_kb_s;
  }
  set write_rate_kb_s(value) {
    this._write_rate_kb_sIntialized = true;
    this._refObject.write_rate_kb_s = value;
  }
  get dropouts() {
    if (!this._dropoutsIntialized) {
      return undefined;
    }
    return this._refObject.dropouts;
  }
  set dropouts(value) {
    this._dropoutsIntialized = true;
    this._refObject.dropouts = value;
  }
  get message_gaps() {
    if (!this._message_gapsIntialized) {
      return undefined;
    }
    return this._refObject.message_gaps;
  }
  set message_gaps(value) {
    this._message_gapsIntialized = true;
    this._refObject.message_gaps = value;
  }
  get buffer_used_bytes() {
    if (!this._buffer_used_bytesIntialized) {
      return undefined;
    }
    return this._refObject.buffer_used_bytes;
  }
  set buffer_used_bytes(value) {
    this._buffer_used_bytesIntialized = true;
    this._refObject.buffer_used_bytes = value;
  }
  get buffer_size_bytes() {
    if (!this._buffer_size_bytesIntialized) {
      return undefined;
    }
    return this._refObject.buffer_size_bytes;
  }
  set buffer_size_bytes(value) {
    this._buffer_size_bytesIntialized = true;
    this._refObject.buffer_size_bytes = value;
  }
  get num_messages() {
    if (!this._num_messagesIntialized) {
      return undefined;
    }
    return this._refObject.num_messages;
  }
  set num_messages(value) {
    this._num_messagesIntialized = true;
    this._refObject.num_messages = value;
  }
  copyRefObject(refObject) {
    this._refObject = new LoggerStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._typeIntialized = true;
    this._backendIntialized = true;
    this._total_written_kbIntialized = true;
    this._write_rate_kb_sIntialized = true;
    this._dropoutsIntialized = true;
    this._message_gapsIntialized = true;
    this._buffer_used_bytesIntialized = true;
    this._buffer_size_bytesIntialized = true;
    this._num_messagesIntialized = true;
  }
  copy(other) {
    this._refObject = new LoggerStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._typeIntialized = true;
    this._backendIntialized = true;
    this._total_written_kbIntialized = true;
    this._write_rate_kb_sIntialized = true;
    this._dropoutsIntialized = true;
    this._message_gapsIntialized = true;
    this._buffer_used_bytesIntialized = true;
    this._buffer_size_bytesIntialized = true;
    this._num_messagesIntialized = true;
  }
  static get classType() {
    return LoggerStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"LOGGER_TYPE_FULL","value":0},{"type":"uint8","name":"LOGGER_TYPE_MISSION","value":1},{"type":"uint8","name":"BACKEND_FILE","value":1},{"type":"uint8","name":"BACKEND_MAVLINK","value":2},{"type":"uint8","name":"BACKEND_ALL","value":3}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"backend","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"total_written_kb","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"write_rate_kb_s","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dropouts","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"message_gaps","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"buffer_used_bytes","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"buffer_size_bytes","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_messages","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"LoggerStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"LoggerStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","type","backend","total_written_kb","write_rate_kb_s","dropouts","message_gaps","buffer_used_bytes","buffer_size_bytes","num_messages"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class LoggerStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof LoggerStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new LoggerStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LoggerStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to LoggerStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new LoggerStatusRefArray(size);
    this._refObject = new LoggerStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new LoggerStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof LoggerStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "LoggerStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      LoggerStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return LoggerStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return LoggerStatusArrayWrapper;
  }
}
// Define constants (5 in total)
Object.defineProperty(LoggerStatusWrapper, "LOGGER_TYPE_FULL", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LoggerStatusWrapper, "LOGGER_TYPE_MISSION", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LoggerStatusWrapper, "BACKEND_FILE", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LoggerStatusWrapper, "BACKEND_MAVLINK", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(LoggerStatusWrapper, "BACKEND_ALL", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = LoggerStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "LOGGER_TYPE_FULL",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "LOGGER_TYPE_MISSION",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BACKEND_FILE",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "BACKEND_MAVLINK",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "BACKEND_ALL",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "backend",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "total_written_kb",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "write_rate_kb_s",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dropouts",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "message_gaps",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "buffer_used_bytes",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "buffer_size_bytes",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_messages",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "LoggerStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "LoggerStatus"
}
*/
