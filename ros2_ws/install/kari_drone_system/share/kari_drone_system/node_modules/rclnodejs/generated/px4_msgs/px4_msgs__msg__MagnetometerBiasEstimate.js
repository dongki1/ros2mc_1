// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const MagnetometerBiasEstimateRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  bias_x: ArrayType(primitiveTypes.float32, 4),
  bias_y: ArrayType(primitiveTypes.float32, 4),
  bias_z: ArrayType(primitiveTypes.float32, 4),
  valid: ArrayType(primitiveTypes.bool, 4),
  stable: ArrayType(primitiveTypes.bool, 4),
});
const MagnetometerBiasEstimateRefArray = ArrayType(MagnetometerBiasEstimateRefStruct);
const MagnetometerBiasEstimateRefStructArray = StructType({
  data: MagnetometerBiasEstimateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MagnetometerBiasEstimateWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._validArray = [];
    this._stableArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MagnetometerBiasEstimateRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._wrapperFields.bias_x = Float32Wrapper.createArray();
      this._wrapperFields.bias_x.copy(other._wrapperFields.bias_x);
      this._wrapperFields.bias_y = Float32Wrapper.createArray();
      this._wrapperFields.bias_y.copy(other._wrapperFields.bias_y);
      this._wrapperFields.bias_z = Float32Wrapper.createArray();
      this._wrapperFields.bias_z.copy(other._wrapperFields.bias_z);
      this._wrapperFields.valid = BoolWrapper.createArray();
      this._wrapperFields.valid.copy(other._wrapperFields.valid);
      this.valid = other.valid;
      this._wrapperFields.stable = BoolWrapper.createArray();
      this._wrapperFields.stable.copy(other._wrapperFields.stable);
      this.stable = other.stable;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MagnetometerBiasEstimateRefStruct();
    this._timestampIntialized = false;
    this._wrapperFields.bias_x = Float32Wrapper.createArray();
    this._wrapperFields.bias_y = Float32Wrapper.createArray();
    this._wrapperFields.bias_z = Float32Wrapper.createArray();
    this._wrapperFields.valid = BoolWrapper.createArray();
    this._wrapperFields.stable = BoolWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new MagnetometerBiasEstimateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MagnetometerBiasEstimateArrayWrapper;
  }
  static get ArrayType() {
    return MagnetometerBiasEstimateArrayWrapper;
  }
  static get refObjectArrayType() {
    return MagnetometerBiasEstimateRefStructArray
  }
  static get refObjectType() {
    return MagnetometerBiasEstimateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in MagnetometerBiasEstimate');
      }
    this._refObject.bias_x = Array.from(this._wrapperFields.bias_x.data);
    this._refObject.bias_y = Array.from(this._wrapperFields.bias_y.data);
    this._refObject.bias_z = Array.from(this._wrapperFields.bias_z.data);
    this._refObject.valid = this._validArray;
    this._refObject.stable = this._stableArray;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._wrapperFields.bias_x.fill(refObject.bias_x.toArray());
    this._wrapperFields.bias_y.fill(refObject.bias_y.toArray());
    this._wrapperFields.bias_z.fill(refObject.bias_z.toArray());
    this._validArray = refObject.valid.toArray();
    this._stableArray = refObject.stable.toArray();
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    MagnetometerBiasEstimateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'MagnetometerBiasEstimate'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get bias_x() {
    return this._wrapperFields['bias_x'].data;
  }
  set bias_x(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['bias_x'].fill(value);
  }
  get bias_y() {
    return this._wrapperFields['bias_y'].data;
  }
  set bias_y(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['bias_y'].fill(value);
  }
  get bias_z() {
    return this._wrapperFields['bias_z'].data;
  }
  set bias_z(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['bias_z'].fill(value);
  }
  get valid() {
    return this._validArray;
  }
  set valid(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._validArray = value;
  }
  get stable() {
    return this._stableArray;
  }
  set stable(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._stableArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MagnetometerBiasEstimateRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._wrapperFields.bias_x.fill(refObject.bias_x.toArray());
    this._wrapperFields.bias_y.fill(refObject.bias_y.toArray());
    this._wrapperFields.bias_z.fill(refObject.bias_z.toArray());
    refObject.valid.data.length = refObject.valid.size;
    for (let index = 0; index < refObject.valid.size; index++) {
      this._validArray[index] = refObject.valid.data[index].data;
    }
    refObject.stable.data.length = refObject.stable.size;
    for (let index = 0; index < refObject.stable.size; index++) {
      this._stableArray[index] = refObject.stable.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new MagnetometerBiasEstimateRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._wrapperFields.bias_x.copy(other._wrapperFields.bias_x);
    this._wrapperFields.bias_y.copy(other._wrapperFields.bias_y);
    this._wrapperFields.bias_z.copy(other._wrapperFields.bias_z);
    this._validArray = other._validArray.slice();
    this._stableArray = other._stableArray.slice();
  }
  static get classType() {
    return MagnetometerBiasEstimateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bias_x","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bias_y","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bias_z","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stable","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"MagnetometerBiasEstimate","stringUpperBound":null,"isPrimitiveType":false},"msgName":"MagnetometerBiasEstimate"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","bias_x","bias_y","bias_z","valid","stable"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MagnetometerBiasEstimateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MagnetometerBiasEstimateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MagnetometerBiasEstimateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MagnetometerBiasEstimateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MagnetometerBiasEstimateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MagnetometerBiasEstimateRefArray(size);
    this._refObject = new MagnetometerBiasEstimateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MagnetometerBiasEstimateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MagnetometerBiasEstimateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MagnetometerBiasEstimateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MagnetometerBiasEstimateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MagnetometerBiasEstimateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MagnetometerBiasEstimateArrayWrapper;
  }
}
module.exports = MagnetometerBiasEstimateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bias_x",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bias_y",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bias_z",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stable",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "MagnetometerBiasEstimate",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "MagnetometerBiasEstimate"
}
*/
