// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ParameterUpdateRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  instance: primitiveTypes.uint32,
  get_count: primitiveTypes.uint32,
  set_count: primitiveTypes.uint32,
  find_count: primitiveTypes.uint32,
  export_count: primitiveTypes.uint32,
  active: primitiveTypes.uint16,
  changed: primitiveTypes.uint16,
  custom_default: primitiveTypes.uint16,
});
const ParameterUpdateRefArray = ArrayType(ParameterUpdateRefStruct);
const ParameterUpdateRefStructArray = StructType({
  data: ParameterUpdateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ParameterUpdateWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ParameterUpdateRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._instanceIntialized = true;
      this._get_countIntialized = true;
      this._set_countIntialized = true;
      this._find_countIntialized = true;
      this._export_countIntialized = true;
      this._activeIntialized = true;
      this._changedIntialized = true;
      this._custom_defaultIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ParameterUpdateRefStruct();
    this._timestampIntialized = false;
    this._instanceIntialized = false;
    this._get_countIntialized = false;
    this._set_countIntialized = false;
    this._find_countIntialized = false;
    this._export_countIntialized = false;
    this._activeIntialized = false;
    this._changedIntialized = false;
    this._custom_defaultIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ParameterUpdateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ParameterUpdateArrayWrapper;
  }
  static get ArrayType() {
    return ParameterUpdateArrayWrapper;
  }
  static get refObjectArrayType() {
    return ParameterUpdateRefStructArray
  }
  static get refObjectType() {
    return ParameterUpdateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in ParameterUpdate');
      }
      if (checkConsistency && !this._instanceIntialized) {
        throw new TypeError('Invalid argument: instance in ParameterUpdate');
      }
      if (checkConsistency && !this._get_countIntialized) {
        throw new TypeError('Invalid argument: get_count in ParameterUpdate');
      }
      if (checkConsistency && !this._set_countIntialized) {
        throw new TypeError('Invalid argument: set_count in ParameterUpdate');
      }
      if (checkConsistency && !this._find_countIntialized) {
        throw new TypeError('Invalid argument: find_count in ParameterUpdate');
      }
      if (checkConsistency && !this._export_countIntialized) {
        throw new TypeError('Invalid argument: export_count in ParameterUpdate');
      }
      if (checkConsistency && !this._activeIntialized) {
        throw new TypeError('Invalid argument: active in ParameterUpdate');
      }
      if (checkConsistency && !this._changedIntialized) {
        throw new TypeError('Invalid argument: changed in ParameterUpdate');
      }
      if (checkConsistency && !this._custom_defaultIntialized) {
        throw new TypeError('Invalid argument: custom_default in ParameterUpdate');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._instanceIntialized = true;
    this._refObject.instance = refObject.instance;
    this._get_countIntialized = true;
    this._refObject.get_count = refObject.get_count;
    this._set_countIntialized = true;
    this._refObject.set_count = refObject.set_count;
    this._find_countIntialized = true;
    this._refObject.find_count = refObject.find_count;
    this._export_countIntialized = true;
    this._refObject.export_count = refObject.export_count;
    this._activeIntialized = true;
    this._refObject.active = refObject.active;
    this._changedIntialized = true;
    this._refObject.changed = refObject.changed;
    this._custom_defaultIntialized = true;
    this._refObject.custom_default = refObject.custom_default;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ParameterUpdateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'ParameterUpdate'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get instance() {
    if (!this._instanceIntialized) {
      return undefined;
    }
    return this._refObject.instance;
  }
  set instance(value) {
    this._instanceIntialized = true;
    this._refObject.instance = value;
  }
  get get_count() {
    if (!this._get_countIntialized) {
      return undefined;
    }
    return this._refObject.get_count;
  }
  set get_count(value) {
    this._get_countIntialized = true;
    this._refObject.get_count = value;
  }
  get set_count() {
    if (!this._set_countIntialized) {
      return undefined;
    }
    return this._refObject.set_count;
  }
  set set_count(value) {
    this._set_countIntialized = true;
    this._refObject.set_count = value;
  }
  get find_count() {
    if (!this._find_countIntialized) {
      return undefined;
    }
    return this._refObject.find_count;
  }
  set find_count(value) {
    this._find_countIntialized = true;
    this._refObject.find_count = value;
  }
  get export_count() {
    if (!this._export_countIntialized) {
      return undefined;
    }
    return this._refObject.export_count;
  }
  set export_count(value) {
    this._export_countIntialized = true;
    this._refObject.export_count = value;
  }
  get active() {
    if (!this._activeIntialized) {
      return undefined;
    }
    return this._refObject.active;
  }
  set active(value) {
    this._activeIntialized = true;
    this._refObject.active = value;
  }
  get changed() {
    if (!this._changedIntialized) {
      return undefined;
    }
    return this._refObject.changed;
  }
  set changed(value) {
    this._changedIntialized = true;
    this._refObject.changed = value;
  }
  get custom_default() {
    if (!this._custom_defaultIntialized) {
      return undefined;
    }
    return this._refObject.custom_default;
  }
  set custom_default(value) {
    this._custom_defaultIntialized = true;
    this._refObject.custom_default = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ParameterUpdateRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._instanceIntialized = true;
    this._get_countIntialized = true;
    this._set_countIntialized = true;
    this._find_countIntialized = true;
    this._export_countIntialized = true;
    this._activeIntialized = true;
    this._changedIntialized = true;
    this._custom_defaultIntialized = true;
  }
  copy(other) {
    this._refObject = new ParameterUpdateRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._instanceIntialized = true;
    this._get_countIntialized = true;
    this._set_countIntialized = true;
    this._find_countIntialized = true;
    this._export_countIntialized = true;
    this._activeIntialized = true;
    this._changedIntialized = true;
    this._custom_defaultIntialized = true;
  }
  static get classType() {
    return ParameterUpdateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"instance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"get_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"set_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"find_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"export_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"active","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"changed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"custom_default","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"ParameterUpdate","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ParameterUpdate"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","instance","get_count","set_count","find_count","export_count","active","changed","custom_default"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ParameterUpdateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ParameterUpdateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ParameterUpdateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterUpdateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ParameterUpdateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ParameterUpdateRefArray(size);
    this._refObject = new ParameterUpdateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ParameterUpdateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ParameterUpdateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ParameterUpdateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ParameterUpdateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ParameterUpdateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ParameterUpdateArrayWrapper;
  }
}
module.exports = ParameterUpdateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "instance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "get_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "set_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "find_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "export_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "active",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "changed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "custom_default",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "ParameterUpdate",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ParameterUpdate"
}
*/
