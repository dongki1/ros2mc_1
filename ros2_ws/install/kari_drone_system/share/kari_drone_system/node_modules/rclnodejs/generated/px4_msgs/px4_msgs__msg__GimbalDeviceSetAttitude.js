// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const GimbalDeviceSetAttitudeRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  target_system: primitiveTypes.uint8,
  target_component: primitiveTypes.uint8,
  flags: primitiveTypes.uint16,
  q: ArrayType(primitiveTypes.float32, 4),
  angular_velocity_x: primitiveTypes.float32,
  angular_velocity_y: primitiveTypes.float32,
  angular_velocity_z: primitiveTypes.float32,
});
const GimbalDeviceSetAttitudeRefArray = ArrayType(GimbalDeviceSetAttitudeRefStruct);
const GimbalDeviceSetAttitudeRefStructArray = StructType({
  data: GimbalDeviceSetAttitudeRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GimbalDeviceSetAttitudeWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GimbalDeviceSetAttitudeRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._target_systemIntialized = true;
      this._target_componentIntialized = true;
      this._flagsIntialized = true;
      this._wrapperFields.q = Float32Wrapper.createArray();
      this._wrapperFields.q.copy(other._wrapperFields.q);
      this._angular_velocity_xIntialized = true;
      this._angular_velocity_yIntialized = true;
      this._angular_velocity_zIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GimbalDeviceSetAttitudeRefStruct();
    this._timestampIntialized = false;
    this._target_systemIntialized = false;
    this._target_componentIntialized = false;
    this._flagsIntialized = false;
    this._wrapperFields.q = Float32Wrapper.createArray();
    this._angular_velocity_xIntialized = false;
    this._angular_velocity_yIntialized = false;
    this._angular_velocity_zIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new GimbalDeviceSetAttitudeWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GimbalDeviceSetAttitudeArrayWrapper;
  }
  static get ArrayType() {
    return GimbalDeviceSetAttitudeArrayWrapper;
  }
  static get refObjectArrayType() {
    return GimbalDeviceSetAttitudeRefStructArray
  }
  static get refObjectType() {
    return GimbalDeviceSetAttitudeRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._target_systemIntialized) {
        throw new TypeError('Invalid argument: target_system in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._target_componentIntialized) {
        throw new TypeError('Invalid argument: target_component in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._flagsIntialized) {
        throw new TypeError('Invalid argument: flags in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._angular_velocity_xIntialized) {
        throw new TypeError('Invalid argument: angular_velocity_x in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._angular_velocity_yIntialized) {
        throw new TypeError('Invalid argument: angular_velocity_y in GimbalDeviceSetAttitude');
      }
      if (checkConsistency && !this._angular_velocity_zIntialized) {
        throw new TypeError('Invalid argument: angular_velocity_z in GimbalDeviceSetAttitude');
      }
    this._refObject.q = Array.from(this._wrapperFields.q.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._target_systemIntialized = true;
    this._refObject.target_system = refObject.target_system;
    this._target_componentIntialized = true;
    this._refObject.target_component = refObject.target_component;
    this._flagsIntialized = true;
    this._refObject.flags = refObject.flags;
    this._wrapperFields.q.fill(refObject.q.toArray());
    this._angular_velocity_xIntialized = true;
    this._refObject.angular_velocity_x = refObject.angular_velocity_x;
    this._angular_velocity_yIntialized = true;
    this._refObject.angular_velocity_y = refObject.angular_velocity_y;
    this._angular_velocity_zIntialized = true;
    this._refObject.angular_velocity_z = refObject.angular_velocity_z;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    GimbalDeviceSetAttitudeWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'GimbalDeviceSetAttitude'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get target_system() {
    if (!this._target_systemIntialized) {
      return undefined;
    }
    return this._refObject.target_system;
  }
  set target_system(value) {
    this._target_systemIntialized = true;
    this._refObject.target_system = value;
  }
  get target_component() {
    if (!this._target_componentIntialized) {
      return undefined;
    }
    return this._refObject.target_component;
  }
  set target_component(value) {
    this._target_componentIntialized = true;
    this._refObject.target_component = value;
  }
  get flags() {
    if (!this._flagsIntialized) {
      return undefined;
    }
    return this._refObject.flags;
  }
  set flags(value) {
    this._flagsIntialized = true;
    this._refObject.flags = value;
  }
  get q() {
    return this._wrapperFields['q'].data;
  }
  set q(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['q'].fill(value);
  }
  get angular_velocity_x() {
    if (!this._angular_velocity_xIntialized) {
      return undefined;
    }
    return this._refObject.angular_velocity_x;
  }
  set angular_velocity_x(value) {
    this._angular_velocity_xIntialized = true;
    this._refObject.angular_velocity_x = value;
  }
  get angular_velocity_y() {
    if (!this._angular_velocity_yIntialized) {
      return undefined;
    }
    return this._refObject.angular_velocity_y;
  }
  set angular_velocity_y(value) {
    this._angular_velocity_yIntialized = true;
    this._refObject.angular_velocity_y = value;
  }
  get angular_velocity_z() {
    if (!this._angular_velocity_zIntialized) {
      return undefined;
    }
    return this._refObject.angular_velocity_z;
  }
  set angular_velocity_z(value) {
    this._angular_velocity_zIntialized = true;
    this._refObject.angular_velocity_z = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GimbalDeviceSetAttitudeRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._target_systemIntialized = true;
    this._target_componentIntialized = true;
    this._flagsIntialized = true;
    this._wrapperFields.q.fill(refObject.q.toArray());
    this._angular_velocity_xIntialized = true;
    this._angular_velocity_yIntialized = true;
    this._angular_velocity_zIntialized = true;
  }
  copy(other) {
    this._refObject = new GimbalDeviceSetAttitudeRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._target_systemIntialized = true;
    this._target_componentIntialized = true;
    this._flagsIntialized = true;
    this._wrapperFields.q.copy(other._wrapperFields.q);
    this._angular_velocity_xIntialized = true;
    this._angular_velocity_yIntialized = true;
    this._angular_velocity_zIntialized = true;
  }
  static get classType() {
    return GimbalDeviceSetAttitudeWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint32","name":"GIMBAL_DEVICE_FLAGS_RETRACT","value":1},{"type":"uint32","name":"GIMBAL_DEVICE_FLAGS_NEUTRAL","value":2},{"type":"uint32","name":"GIMBAL_DEVICE_FLAGS_ROLL_LOCK","value":4},{"type":"uint32","name":"GIMBAL_DEVICE_FLAGS_PITCH_LOCK","value":8},{"type":"uint32","name":"GIMBAL_DEVICE_FLAGS_YAW_LOCK","value":16}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"target_system","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"target_component","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"flags","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"q","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"angular_velocity_x","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"angular_velocity_y","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"angular_velocity_z","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"GimbalDeviceSetAttitude","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GimbalDeviceSetAttitude"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","target_system","target_component","flags","q","angular_velocity_x","angular_velocity_y","angular_velocity_z"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GimbalDeviceSetAttitudeArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GimbalDeviceSetAttitudeWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GimbalDeviceSetAttitudeWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GimbalDeviceSetAttitudeArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GimbalDeviceSetAttitudeArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GimbalDeviceSetAttitudeRefArray(size);
    this._refObject = new GimbalDeviceSetAttitudeRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GimbalDeviceSetAttitudeWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GimbalDeviceSetAttitudeArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GimbalDeviceSetAttitudeArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GimbalDeviceSetAttitudeWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GimbalDeviceSetAttitudeWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GimbalDeviceSetAttitudeArrayWrapper;
  }
}
// Define constants (5 in total)
Object.defineProperty(GimbalDeviceSetAttitudeWrapper, "GIMBAL_DEVICE_FLAGS_RETRACT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalDeviceSetAttitudeWrapper, "GIMBAL_DEVICE_FLAGS_NEUTRAL", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalDeviceSetAttitudeWrapper, "GIMBAL_DEVICE_FLAGS_ROLL_LOCK", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalDeviceSetAttitudeWrapper, "GIMBAL_DEVICE_FLAGS_PITCH_LOCK", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalDeviceSetAttitudeWrapper, "GIMBAL_DEVICE_FLAGS_YAW_LOCK", {value: 16, writable: false, enumerable: true, configurable: true});
module.exports = GimbalDeviceSetAttitudeWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint32",
      "name": "GIMBAL_DEVICE_FLAGS_RETRACT",
      "value": 1
    },
    {
      "type": "uint32",
      "name": "GIMBAL_DEVICE_FLAGS_NEUTRAL",
      "value": 2
    },
    {
      "type": "uint32",
      "name": "GIMBAL_DEVICE_FLAGS_ROLL_LOCK",
      "value": 4
    },
    {
      "type": "uint32",
      "name": "GIMBAL_DEVICE_FLAGS_PITCH_LOCK",
      "value": 8
    },
    {
      "type": "uint32",
      "name": "GIMBAL_DEVICE_FLAGS_YAW_LOCK",
      "value": 16
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "target_system",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "target_component",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "flags",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "q",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "angular_velocity_x",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "angular_velocity_y",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "angular_velocity_z",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "GimbalDeviceSetAttitude",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GimbalDeviceSetAttitude"
}
*/
