// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const UInt32Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt32.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const SensorsStatusImuRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  accel_device_id_primary: primitiveTypes.uint32,
  accel_device_ids: ArrayType(primitiveTypes.uint32, 4),
  accel_inconsistency_m_s_s: ArrayType(primitiveTypes.float32, 4),
  accel_healthy: ArrayType(primitiveTypes.bool, 4),
  accel_priority: ArrayType(primitiveTypes.uint8, 4),
  gyro_device_id_primary: primitiveTypes.uint32,
  gyro_device_ids: ArrayType(primitiveTypes.uint32, 4),
  gyro_inconsistency_rad_s: ArrayType(primitiveTypes.float32, 4),
  gyro_healthy: ArrayType(primitiveTypes.bool, 4),
  gyro_priority: ArrayType(primitiveTypes.uint8, 4),
});
const SensorsStatusImuRefArray = ArrayType(SensorsStatusImuRefStruct);
const SensorsStatusImuRefStructArray = StructType({
  data: SensorsStatusImuRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorsStatusImuWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._accel_healthyArray = [];
    this._gyro_healthyArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorsStatusImuRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._accel_device_id_primaryIntialized = true;
      this._wrapperFields.accel_device_ids = UInt32Wrapper.createArray();
      this._wrapperFields.accel_device_ids.copy(other._wrapperFields.accel_device_ids);
      this._wrapperFields.accel_inconsistency_m_s_s = Float32Wrapper.createArray();
      this._wrapperFields.accel_inconsistency_m_s_s.copy(other._wrapperFields.accel_inconsistency_m_s_s);
      this._wrapperFields.accel_healthy = BoolWrapper.createArray();
      this._wrapperFields.accel_healthy.copy(other._wrapperFields.accel_healthy);
      this.accel_healthy = other.accel_healthy;
      this._wrapperFields.accel_priority = UInt8Wrapper.createArray();
      this._wrapperFields.accel_priority.copy(other._wrapperFields.accel_priority);
      this._gyro_device_id_primaryIntialized = true;
      this._wrapperFields.gyro_device_ids = UInt32Wrapper.createArray();
      this._wrapperFields.gyro_device_ids.copy(other._wrapperFields.gyro_device_ids);
      this._wrapperFields.gyro_inconsistency_rad_s = Float32Wrapper.createArray();
      this._wrapperFields.gyro_inconsistency_rad_s.copy(other._wrapperFields.gyro_inconsistency_rad_s);
      this._wrapperFields.gyro_healthy = BoolWrapper.createArray();
      this._wrapperFields.gyro_healthy.copy(other._wrapperFields.gyro_healthy);
      this.gyro_healthy = other.gyro_healthy;
      this._wrapperFields.gyro_priority = UInt8Wrapper.createArray();
      this._wrapperFields.gyro_priority.copy(other._wrapperFields.gyro_priority);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorsStatusImuRefStruct();
    this._timestampIntialized = false;
    this._accel_device_id_primaryIntialized = false;
    this._wrapperFields.accel_device_ids = UInt32Wrapper.createArray();
    this._wrapperFields.accel_inconsistency_m_s_s = Float32Wrapper.createArray();
    this._wrapperFields.accel_healthy = BoolWrapper.createArray();
    this._wrapperFields.accel_priority = UInt8Wrapper.createArray();
    this._gyro_device_id_primaryIntialized = false;
    this._wrapperFields.gyro_device_ids = UInt32Wrapper.createArray();
    this._wrapperFields.gyro_inconsistency_rad_s = Float32Wrapper.createArray();
    this._wrapperFields.gyro_healthy = BoolWrapper.createArray();
    this._wrapperFields.gyro_priority = UInt8Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new SensorsStatusImuWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorsStatusImuArrayWrapper;
  }
  static get ArrayType() {
    return SensorsStatusImuArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorsStatusImuRefStructArray
  }
  static get refObjectType() {
    return SensorsStatusImuRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in SensorsStatusImu');
      }
      if (checkConsistency && !this._accel_device_id_primaryIntialized) {
        throw new TypeError('Invalid argument: accel_device_id_primary in SensorsStatusImu');
      }
      if (checkConsistency && !this._gyro_device_id_primaryIntialized) {
        throw new TypeError('Invalid argument: gyro_device_id_primary in SensorsStatusImu');
      }
    this._refObject.accel_device_ids = Array.from(this._wrapperFields.accel_device_ids.data);
    this._refObject.accel_inconsistency_m_s_s = Array.from(this._wrapperFields.accel_inconsistency_m_s_s.data);
    this._refObject.accel_healthy = this._accel_healthyArray;
    this._refObject.accel_priority = Array.from(this._wrapperFields.accel_priority.data);
    this._refObject.gyro_device_ids = Array.from(this._wrapperFields.gyro_device_ids.data);
    this._refObject.gyro_inconsistency_rad_s = Array.from(this._wrapperFields.gyro_inconsistency_rad_s.data);
    this._refObject.gyro_healthy = this._gyro_healthyArray;
    this._refObject.gyro_priority = Array.from(this._wrapperFields.gyro_priority.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._accel_device_id_primaryIntialized = true;
    this._refObject.accel_device_id_primary = refObject.accel_device_id_primary;
    this._wrapperFields.accel_device_ids.fill(refObject.accel_device_ids.toArray());
    this._wrapperFields.accel_inconsistency_m_s_s.fill(refObject.accel_inconsistency_m_s_s.toArray());
    this._accel_healthyArray = refObject.accel_healthy.toArray();
    this._wrapperFields.accel_priority.fill(refObject.accel_priority.toArray());
    this._gyro_device_id_primaryIntialized = true;
    this._refObject.gyro_device_id_primary = refObject.gyro_device_id_primary;
    this._wrapperFields.gyro_device_ids.fill(refObject.gyro_device_ids.toArray());
    this._wrapperFields.gyro_inconsistency_rad_s.fill(refObject.gyro_inconsistency_rad_s.toArray());
    this._gyro_healthyArray = refObject.gyro_healthy.toArray();
    this._wrapperFields.gyro_priority.fill(refObject.gyro_priority.toArray());
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    SensorsStatusImuWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'SensorsStatusImu'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get accel_device_id_primary() {
    if (!this._accel_device_id_primaryIntialized) {
      return undefined;
    }
    return this._refObject.accel_device_id_primary;
  }
  set accel_device_id_primary(value) {
    this._accel_device_id_primaryIntialized = true;
    this._refObject.accel_device_id_primary = value;
  }
  get accel_device_ids() {
    return this._wrapperFields['accel_device_ids'].data;
  }
  set accel_device_ids(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['accel_device_ids'].fill(value);
  }
  get accel_inconsistency_m_s_s() {
    return this._wrapperFields['accel_inconsistency_m_s_s'].data;
  }
  set accel_inconsistency_m_s_s(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['accel_inconsistency_m_s_s'].fill(value);
  }
  get accel_healthy() {
    return this._accel_healthyArray;
  }
  set accel_healthy(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._accel_healthyArray = value;
  }
  get accel_priority() {
    return this._wrapperFields['accel_priority'].data;
  }
  set accel_priority(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['accel_priority'].fill(value);
  }
  get gyro_device_id_primary() {
    if (!this._gyro_device_id_primaryIntialized) {
      return undefined;
    }
    return this._refObject.gyro_device_id_primary;
  }
  set gyro_device_id_primary(value) {
    this._gyro_device_id_primaryIntialized = true;
    this._refObject.gyro_device_id_primary = value;
  }
  get gyro_device_ids() {
    return this._wrapperFields['gyro_device_ids'].data;
  }
  set gyro_device_ids(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['gyro_device_ids'].fill(value);
  }
  get gyro_inconsistency_rad_s() {
    return this._wrapperFields['gyro_inconsistency_rad_s'].data;
  }
  set gyro_inconsistency_rad_s(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['gyro_inconsistency_rad_s'].fill(value);
  }
  get gyro_healthy() {
    return this._gyro_healthyArray;
  }
  set gyro_healthy(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._gyro_healthyArray = value;
  }
  get gyro_priority() {
    return this._wrapperFields['gyro_priority'].data;
  }
  set gyro_priority(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['gyro_priority'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new SensorsStatusImuRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._accel_device_id_primaryIntialized = true;
    this._wrapperFields.accel_device_ids.fill(refObject.accel_device_ids.toArray());
    this._wrapperFields.accel_inconsistency_m_s_s.fill(refObject.accel_inconsistency_m_s_s.toArray());
    refObject.accel_healthy.data.length = refObject.accel_healthy.size;
    for (let index = 0; index < refObject.accel_healthy.size; index++) {
      this._accel_healthyArray[index] = refObject.accel_healthy.data[index].data;
    }
    this._wrapperFields.accel_priority.fill(refObject.accel_priority.toArray());
    this._gyro_device_id_primaryIntialized = true;
    this._wrapperFields.gyro_device_ids.fill(refObject.gyro_device_ids.toArray());
    this._wrapperFields.gyro_inconsistency_rad_s.fill(refObject.gyro_inconsistency_rad_s.toArray());
    refObject.gyro_healthy.data.length = refObject.gyro_healthy.size;
    for (let index = 0; index < refObject.gyro_healthy.size; index++) {
      this._gyro_healthyArray[index] = refObject.gyro_healthy.data[index].data;
    }
    this._wrapperFields.gyro_priority.fill(refObject.gyro_priority.toArray());
  }
  copy(other) {
    this._refObject = new SensorsStatusImuRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._accel_device_id_primaryIntialized = true;
    this._wrapperFields.accel_device_ids.copy(other._wrapperFields.accel_device_ids);
    this._wrapperFields.accel_inconsistency_m_s_s.copy(other._wrapperFields.accel_inconsistency_m_s_s);
    this._accel_healthyArray = other._accel_healthyArray.slice();
    this._wrapperFields.accel_priority.copy(other._wrapperFields.accel_priority);
    this._gyro_device_id_primaryIntialized = true;
    this._wrapperFields.gyro_device_ids.copy(other._wrapperFields.gyro_device_ids);
    this._wrapperFields.gyro_inconsistency_rad_s.copy(other._wrapperFields.gyro_inconsistency_rad_s);
    this._gyro_healthyArray = other._gyro_healthyArray.slice();
    this._wrapperFields.gyro_priority.copy(other._wrapperFields.gyro_priority);
  }
  static get classType() {
    return SensorsStatusImuWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_device_id_primary","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_device_ids","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_inconsistency_m_s_s","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_healthy","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"accel_priority","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_device_id_primary","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_device_ids","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_inconsistency_rad_s","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_healthy","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gyro_priority","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"SensorsStatusImu","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorsStatusImu"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","accel_device_id_primary","accel_device_ids","accel_inconsistency_m_s_s","accel_healthy","accel_priority","gyro_device_id_primary","gyro_device_ids","gyro_inconsistency_rad_s","gyro_healthy","gyro_priority"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorsStatusImuArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorsStatusImuWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorsStatusImuWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorsStatusImuArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorsStatusImuArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorsStatusImuRefArray(size);
    this._refObject = new SensorsStatusImuRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorsStatusImuWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorsStatusImuArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorsStatusImuArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorsStatusImuWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorsStatusImuWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorsStatusImuArrayWrapper;
  }
}
module.exports = SensorsStatusImuWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_device_id_primary",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_device_ids",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_inconsistency_m_s_s",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_healthy",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "accel_priority",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_device_id_primary",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_device_ids",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_inconsistency_rad_s",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_healthy",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gyro_priority",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "SensorsStatusImu",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorsStatusImu"
}
*/
