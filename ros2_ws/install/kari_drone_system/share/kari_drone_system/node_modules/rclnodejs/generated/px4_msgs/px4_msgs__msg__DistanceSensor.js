// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const DistanceSensorRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  device_id: primitiveTypes.uint32,
  min_distance: primitiveTypes.float32,
  max_distance: primitiveTypes.float32,
  current_distance: primitiveTypes.float32,
  variance: primitiveTypes.float32,
  signal_quality: primitiveTypes.int8,
  type: primitiveTypes.uint8,
  h_fov: primitiveTypes.float32,
  v_fov: primitiveTypes.float32,
  q: ArrayType(primitiveTypes.float32, 4),
  orientation: primitiveTypes.uint8,
});
const DistanceSensorRefArray = ArrayType(DistanceSensorRefStruct);
const DistanceSensorRefStructArray = StructType({
  data: DistanceSensorRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DistanceSensorWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DistanceSensorRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._device_idIntialized = true;
      this._min_distanceIntialized = true;
      this._max_distanceIntialized = true;
      this._current_distanceIntialized = true;
      this._varianceIntialized = true;
      this._signal_qualityIntialized = true;
      this._typeIntialized = true;
      this._h_fovIntialized = true;
      this._v_fovIntialized = true;
      this._wrapperFields.q = Float32Wrapper.createArray();
      this._wrapperFields.q.copy(other._wrapperFields.q);
      this._orientationIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DistanceSensorRefStruct();
    this._timestampIntialized = false;
    this._device_idIntialized = false;
    this._min_distanceIntialized = false;
    this._max_distanceIntialized = false;
    this._current_distanceIntialized = false;
    this._varianceIntialized = false;
    this._signal_qualityIntialized = false;
    this._typeIntialized = false;
    this._h_fovIntialized = false;
    this._v_fovIntialized = false;
    this._wrapperFields.q = Float32Wrapper.createArray();
    this._orientationIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new DistanceSensorWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DistanceSensorArrayWrapper;
  }
  static get ArrayType() {
    return DistanceSensorArrayWrapper;
  }
  static get refObjectArrayType() {
    return DistanceSensorRefStructArray
  }
  static get refObjectType() {
    return DistanceSensorRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in DistanceSensor');
      }
      if (checkConsistency && !this._device_idIntialized) {
        throw new TypeError('Invalid argument: device_id in DistanceSensor');
      }
      if (checkConsistency && !this._min_distanceIntialized) {
        throw new TypeError('Invalid argument: min_distance in DistanceSensor');
      }
      if (checkConsistency && !this._max_distanceIntialized) {
        throw new TypeError('Invalid argument: max_distance in DistanceSensor');
      }
      if (checkConsistency && !this._current_distanceIntialized) {
        throw new TypeError('Invalid argument: current_distance in DistanceSensor');
      }
      if (checkConsistency && !this._varianceIntialized) {
        throw new TypeError('Invalid argument: variance in DistanceSensor');
      }
      if (checkConsistency && !this._signal_qualityIntialized) {
        throw new TypeError('Invalid argument: signal_quality in DistanceSensor');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in DistanceSensor');
      }
      if (checkConsistency && !this._h_fovIntialized) {
        throw new TypeError('Invalid argument: h_fov in DistanceSensor');
      }
      if (checkConsistency && !this._v_fovIntialized) {
        throw new TypeError('Invalid argument: v_fov in DistanceSensor');
      }
      if (checkConsistency && !this._orientationIntialized) {
        throw new TypeError('Invalid argument: orientation in DistanceSensor');
      }
    this._refObject.q = Array.from(this._wrapperFields.q.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._device_idIntialized = true;
    this._refObject.device_id = refObject.device_id;
    this._min_distanceIntialized = true;
    this._refObject.min_distance = refObject.min_distance;
    this._max_distanceIntialized = true;
    this._refObject.max_distance = refObject.max_distance;
    this._current_distanceIntialized = true;
    this._refObject.current_distance = refObject.current_distance;
    this._varianceIntialized = true;
    this._refObject.variance = refObject.variance;
    this._signal_qualityIntialized = true;
    this._refObject.signal_quality = refObject.signal_quality;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._h_fovIntialized = true;
    this._refObject.h_fov = refObject.h_fov;
    this._v_fovIntialized = true;
    this._refObject.v_fov = refObject.v_fov;
    this._wrapperFields.q.fill(refObject.q.toArray());
    this._orientationIntialized = true;
    this._refObject.orientation = refObject.orientation;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    DistanceSensorWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'DistanceSensor'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get device_id() {
    if (!this._device_idIntialized) {
      return undefined;
    }
    return this._refObject.device_id;
  }
  set device_id(value) {
    this._device_idIntialized = true;
    this._refObject.device_id = value;
  }
  get min_distance() {
    if (!this._min_distanceIntialized) {
      return undefined;
    }
    return this._refObject.min_distance;
  }
  set min_distance(value) {
    this._min_distanceIntialized = true;
    this._refObject.min_distance = value;
  }
  get max_distance() {
    if (!this._max_distanceIntialized) {
      return undefined;
    }
    return this._refObject.max_distance;
  }
  set max_distance(value) {
    this._max_distanceIntialized = true;
    this._refObject.max_distance = value;
  }
  get current_distance() {
    if (!this._current_distanceIntialized) {
      return undefined;
    }
    return this._refObject.current_distance;
  }
  set current_distance(value) {
    this._current_distanceIntialized = true;
    this._refObject.current_distance = value;
  }
  get variance() {
    if (!this._varianceIntialized) {
      return undefined;
    }
    return this._refObject.variance;
  }
  set variance(value) {
    this._varianceIntialized = true;
    this._refObject.variance = value;
  }
  get signal_quality() {
    if (!this._signal_qualityIntialized) {
      return undefined;
    }
    return this._refObject.signal_quality;
  }
  set signal_quality(value) {
    this._signal_qualityIntialized = true;
    this._refObject.signal_quality = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get h_fov() {
    if (!this._h_fovIntialized) {
      return undefined;
    }
    return this._refObject.h_fov;
  }
  set h_fov(value) {
    this._h_fovIntialized = true;
    this._refObject.h_fov = value;
  }
  get v_fov() {
    if (!this._v_fovIntialized) {
      return undefined;
    }
    return this._refObject.v_fov;
  }
  set v_fov(value) {
    this._v_fovIntialized = true;
    this._refObject.v_fov = value;
  }
  get q() {
    return this._wrapperFields['q'].data;
  }
  set q(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['q'].fill(value);
  }
  get orientation() {
    if (!this._orientationIntialized) {
      return undefined;
    }
    return this._refObject.orientation;
  }
  set orientation(value) {
    this._orientationIntialized = true;
    this._refObject.orientation = value;
  }
  copyRefObject(refObject) {
    this._refObject = new DistanceSensorRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._device_idIntialized = true;
    this._min_distanceIntialized = true;
    this._max_distanceIntialized = true;
    this._current_distanceIntialized = true;
    this._varianceIntialized = true;
    this._signal_qualityIntialized = true;
    this._typeIntialized = true;
    this._h_fovIntialized = true;
    this._v_fovIntialized = true;
    this._wrapperFields.q.fill(refObject.q.toArray());
    this._orientationIntialized = true;
  }
  copy(other) {
    this._refObject = new DistanceSensorRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._device_idIntialized = true;
    this._min_distanceIntialized = true;
    this._max_distanceIntialized = true;
    this._current_distanceIntialized = true;
    this._varianceIntialized = true;
    this._signal_qualityIntialized = true;
    this._typeIntialized = true;
    this._h_fovIntialized = true;
    this._v_fovIntialized = true;
    this._wrapperFields.q.copy(other._wrapperFields.q);
    this._orientationIntialized = true;
  }
  static get classType() {
    return DistanceSensorWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"MAV_DISTANCE_SENSOR_LASER","value":0},{"type":"uint8","name":"MAV_DISTANCE_SENSOR_ULTRASOUND","value":1},{"type":"uint8","name":"MAV_DISTANCE_SENSOR_INFRARED","value":2},{"type":"uint8","name":"MAV_DISTANCE_SENSOR_RADAR","value":3},{"type":"uint8","name":"ROTATION_YAW_0","value":0},{"type":"uint8","name":"ROTATION_YAW_45","value":1},{"type":"uint8","name":"ROTATION_YAW_90","value":2},{"type":"uint8","name":"ROTATION_YAW_135","value":3},{"type":"uint8","name":"ROTATION_YAW_180","value":4},{"type":"uint8","name":"ROTATION_YAW_225","value":5},{"type":"uint8","name":"ROTATION_YAW_270","value":6},{"type":"uint8","name":"ROTATION_YAW_315","value":7},{"type":"uint8","name":"ROTATION_FORWARD_FACING","value":0},{"type":"uint8","name":"ROTATION_RIGHT_FACING","value":2},{"type":"uint8","name":"ROTATION_BACKWARD_FACING","value":4},{"type":"uint8","name":"ROTATION_LEFT_FACING","value":6},{"type":"uint8","name":"ROTATION_UPWARD_FACING","value":24},{"type":"uint8","name":"ROTATION_DOWNWARD_FACING","value":25},{"type":"uint8","name":"ROTATION_CUSTOM","value":100}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"device_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"min_distance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"max_distance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"current_distance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"variance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"signal_quality","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"h_fov","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"v_fov","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"q","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"orientation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"DistanceSensor","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DistanceSensor"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","device_id","min_distance","max_distance","current_distance","variance","signal_quality","type","h_fov","v_fov","q","orientation"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DistanceSensorArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DistanceSensorWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DistanceSensorWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DistanceSensorArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DistanceSensorArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DistanceSensorRefArray(size);
    this._refObject = new DistanceSensorRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DistanceSensorWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DistanceSensorArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DistanceSensorArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DistanceSensorWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DistanceSensorWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DistanceSensorArrayWrapper;
  }
}
// Define constants (19 in total)
Object.defineProperty(DistanceSensorWrapper, "MAV_DISTANCE_SENSOR_LASER", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "MAV_DISTANCE_SENSOR_ULTRASOUND", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "MAV_DISTANCE_SENSOR_INFRARED", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "MAV_DISTANCE_SENSOR_RADAR", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_0", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_45", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_90", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_135", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_180", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_225", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_270", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_YAW_315", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_FORWARD_FACING", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_RIGHT_FACING", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_BACKWARD_FACING", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_LEFT_FACING", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_UPWARD_FACING", {value: 24, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_DOWNWARD_FACING", {value: 25, writable: false, enumerable: true, configurable: true});
Object.defineProperty(DistanceSensorWrapper, "ROTATION_CUSTOM", {value: 100, writable: false, enumerable: true, configurable: true});
module.exports = DistanceSensorWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "MAV_DISTANCE_SENSOR_LASER",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "MAV_DISTANCE_SENSOR_ULTRASOUND",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "MAV_DISTANCE_SENSOR_INFRARED",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "MAV_DISTANCE_SENSOR_RADAR",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_0",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_45",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_90",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_135",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_180",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_225",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_270",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "ROTATION_YAW_315",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "ROTATION_FORWARD_FACING",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "ROTATION_RIGHT_FACING",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "ROTATION_BACKWARD_FACING",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "ROTATION_LEFT_FACING",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "ROTATION_UPWARD_FACING",
      "value": 24
    },
    {
      "type": "uint8",
      "name": "ROTATION_DOWNWARD_FACING",
      "value": 25
    },
    {
      "type": "uint8",
      "name": "ROTATION_CUSTOM",
      "value": 100
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "device_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "min_distance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "max_distance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "current_distance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "variance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "signal_quality",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "h_fov",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "v_fov",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "q",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "orientation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "DistanceSensor",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DistanceSensor"
}
*/
