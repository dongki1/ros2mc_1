// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const Int8Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int8.js');
const Int16Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int16.js');
const UInt32Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt32.js');
const OnboardComputerStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  uptime: primitiveTypes.uint32,
  type: primitiveTypes.uint8,
  cpu_cores: ArrayType(primitiveTypes.uint8, 8),
  cpu_combined: ArrayType(primitiveTypes.uint8, 10),
  gpu_cores: ArrayType(primitiveTypes.uint8, 4),
  gpu_combined: ArrayType(primitiveTypes.uint8, 10),
  temperature_board: primitiveTypes.int8,
  temperature_core: ArrayType(primitiveTypes.int8, 8),
  fan_speed: ArrayType(primitiveTypes.int16, 4),
  ram_usage: primitiveTypes.uint32,
  ram_total: primitiveTypes.uint32,
  storage_type: ArrayType(primitiveTypes.uint32, 4),
  storage_usage: ArrayType(primitiveTypes.uint32, 4),
  storage_total: ArrayType(primitiveTypes.uint32, 4),
  link_type: ArrayType(primitiveTypes.uint32, 6),
  link_tx_rate: ArrayType(primitiveTypes.uint32, 6),
  link_rx_rate: ArrayType(primitiveTypes.uint32, 6),
  link_tx_max: ArrayType(primitiveTypes.uint32, 6),
  link_rx_max: ArrayType(primitiveTypes.uint32, 6),
});
const OnboardComputerStatusRefArray = ArrayType(OnboardComputerStatusRefStruct);
const OnboardComputerStatusRefStructArray = StructType({
  data: OnboardComputerStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class OnboardComputerStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new OnboardComputerStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._uptimeIntialized = true;
      this._typeIntialized = true;
      this._wrapperFields.cpu_cores = UInt8Wrapper.createArray();
      this._wrapperFields.cpu_cores.copy(other._wrapperFields.cpu_cores);
      this._wrapperFields.cpu_combined = UInt8Wrapper.createArray();
      this._wrapperFields.cpu_combined.copy(other._wrapperFields.cpu_combined);
      this._wrapperFields.gpu_cores = UInt8Wrapper.createArray();
      this._wrapperFields.gpu_cores.copy(other._wrapperFields.gpu_cores);
      this._wrapperFields.gpu_combined = UInt8Wrapper.createArray();
      this._wrapperFields.gpu_combined.copy(other._wrapperFields.gpu_combined);
      this._temperature_boardIntialized = true;
      this._wrapperFields.temperature_core = Int8Wrapper.createArray();
      this._wrapperFields.temperature_core.copy(other._wrapperFields.temperature_core);
      this._wrapperFields.fan_speed = Int16Wrapper.createArray();
      this._wrapperFields.fan_speed.copy(other._wrapperFields.fan_speed);
      this._ram_usageIntialized = true;
      this._ram_totalIntialized = true;
      this._wrapperFields.storage_type = UInt32Wrapper.createArray();
      this._wrapperFields.storage_type.copy(other._wrapperFields.storage_type);
      this._wrapperFields.storage_usage = UInt32Wrapper.createArray();
      this._wrapperFields.storage_usage.copy(other._wrapperFields.storage_usage);
      this._wrapperFields.storage_total = UInt32Wrapper.createArray();
      this._wrapperFields.storage_total.copy(other._wrapperFields.storage_total);
      this._wrapperFields.link_type = UInt32Wrapper.createArray();
      this._wrapperFields.link_type.copy(other._wrapperFields.link_type);
      this._wrapperFields.link_tx_rate = UInt32Wrapper.createArray();
      this._wrapperFields.link_tx_rate.copy(other._wrapperFields.link_tx_rate);
      this._wrapperFields.link_rx_rate = UInt32Wrapper.createArray();
      this._wrapperFields.link_rx_rate.copy(other._wrapperFields.link_rx_rate);
      this._wrapperFields.link_tx_max = UInt32Wrapper.createArray();
      this._wrapperFields.link_tx_max.copy(other._wrapperFields.link_tx_max);
      this._wrapperFields.link_rx_max = UInt32Wrapper.createArray();
      this._wrapperFields.link_rx_max.copy(other._wrapperFields.link_rx_max);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new OnboardComputerStatusRefStruct();
    this._timestampIntialized = false;
    this._uptimeIntialized = false;
    this._typeIntialized = false;
    this._wrapperFields.cpu_cores = UInt8Wrapper.createArray();
    this._wrapperFields.cpu_combined = UInt8Wrapper.createArray();
    this._wrapperFields.gpu_cores = UInt8Wrapper.createArray();
    this._wrapperFields.gpu_combined = UInt8Wrapper.createArray();
    this._temperature_boardIntialized = false;
    this._wrapperFields.temperature_core = Int8Wrapper.createArray();
    this._wrapperFields.fan_speed = Int16Wrapper.createArray();
    this._ram_usageIntialized = false;
    this._ram_totalIntialized = false;
    this._wrapperFields.storage_type = UInt32Wrapper.createArray();
    this._wrapperFields.storage_usage = UInt32Wrapper.createArray();
    this._wrapperFields.storage_total = UInt32Wrapper.createArray();
    this._wrapperFields.link_type = UInt32Wrapper.createArray();
    this._wrapperFields.link_tx_rate = UInt32Wrapper.createArray();
    this._wrapperFields.link_rx_rate = UInt32Wrapper.createArray();
    this._wrapperFields.link_tx_max = UInt32Wrapper.createArray();
    this._wrapperFields.link_rx_max = UInt32Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new OnboardComputerStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new OnboardComputerStatusArrayWrapper;
  }
  static get ArrayType() {
    return OnboardComputerStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return OnboardComputerStatusRefStructArray
  }
  static get refObjectType() {
    return OnboardComputerStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in OnboardComputerStatus');
      }
      if (checkConsistency && !this._uptimeIntialized) {
        throw new TypeError('Invalid argument: uptime in OnboardComputerStatus');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in OnboardComputerStatus');
      }
      if (checkConsistency && !this._temperature_boardIntialized) {
        throw new TypeError('Invalid argument: temperature_board in OnboardComputerStatus');
      }
      if (checkConsistency && !this._ram_usageIntialized) {
        throw new TypeError('Invalid argument: ram_usage in OnboardComputerStatus');
      }
      if (checkConsistency && !this._ram_totalIntialized) {
        throw new TypeError('Invalid argument: ram_total in OnboardComputerStatus');
      }
    this._refObject.cpu_cores = Array.from(this._wrapperFields.cpu_cores.data);
    this._refObject.cpu_combined = Array.from(this._wrapperFields.cpu_combined.data);
    this._refObject.gpu_cores = Array.from(this._wrapperFields.gpu_cores.data);
    this._refObject.gpu_combined = Array.from(this._wrapperFields.gpu_combined.data);
    this._refObject.temperature_core = Array.from(this._wrapperFields.temperature_core.data);
    this._refObject.fan_speed = Array.from(this._wrapperFields.fan_speed.data);
    this._refObject.storage_type = Array.from(this._wrapperFields.storage_type.data);
    this._refObject.storage_usage = Array.from(this._wrapperFields.storage_usage.data);
    this._refObject.storage_total = Array.from(this._wrapperFields.storage_total.data);
    this._refObject.link_type = Array.from(this._wrapperFields.link_type.data);
    this._refObject.link_tx_rate = Array.from(this._wrapperFields.link_tx_rate.data);
    this._refObject.link_rx_rate = Array.from(this._wrapperFields.link_rx_rate.data);
    this._refObject.link_tx_max = Array.from(this._wrapperFields.link_tx_max.data);
    this._refObject.link_rx_max = Array.from(this._wrapperFields.link_rx_max.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._uptimeIntialized = true;
    this._refObject.uptime = refObject.uptime;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._wrapperFields.cpu_cores.fill(refObject.cpu_cores.toArray());
    this._wrapperFields.cpu_combined.fill(refObject.cpu_combined.toArray());
    this._wrapperFields.gpu_cores.fill(refObject.gpu_cores.toArray());
    this._wrapperFields.gpu_combined.fill(refObject.gpu_combined.toArray());
    this._temperature_boardIntialized = true;
    this._refObject.temperature_board = refObject.temperature_board;
    this._wrapperFields.temperature_core.fill(refObject.temperature_core.toArray());
    this._wrapperFields.fan_speed.fill(refObject.fan_speed.toArray());
    this._ram_usageIntialized = true;
    this._refObject.ram_usage = refObject.ram_usage;
    this._ram_totalIntialized = true;
    this._refObject.ram_total = refObject.ram_total;
    this._wrapperFields.storage_type.fill(refObject.storage_type.toArray());
    this._wrapperFields.storage_usage.fill(refObject.storage_usage.toArray());
    this._wrapperFields.storage_total.fill(refObject.storage_total.toArray());
    this._wrapperFields.link_type.fill(refObject.link_type.toArray());
    this._wrapperFields.link_tx_rate.fill(refObject.link_tx_rate.toArray());
    this._wrapperFields.link_rx_rate.fill(refObject.link_rx_rate.toArray());
    this._wrapperFields.link_tx_max.fill(refObject.link_tx_max.toArray());
    this._wrapperFields.link_rx_max.fill(refObject.link_rx_max.toArray());
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    OnboardComputerStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'OnboardComputerStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get uptime() {
    if (!this._uptimeIntialized) {
      return undefined;
    }
    return this._refObject.uptime;
  }
  set uptime(value) {
    this._uptimeIntialized = true;
    this._refObject.uptime = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get cpu_cores() {
    return this._wrapperFields['cpu_cores'].data;
  }
  set cpu_cores(value) {
    if (value.length !== 8) {
      throw new RangeError('The length of the array must be 8.');
    }
    this._wrapperFields['cpu_cores'].fill(value);
  }
  get cpu_combined() {
    return this._wrapperFields['cpu_combined'].data;
  }
  set cpu_combined(value) {
    if (value.length !== 10) {
      throw new RangeError('The length of the array must be 10.');
    }
    this._wrapperFields['cpu_combined'].fill(value);
  }
  get gpu_cores() {
    return this._wrapperFields['gpu_cores'].data;
  }
  set gpu_cores(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['gpu_cores'].fill(value);
  }
  get gpu_combined() {
    return this._wrapperFields['gpu_combined'].data;
  }
  set gpu_combined(value) {
    if (value.length !== 10) {
      throw new RangeError('The length of the array must be 10.');
    }
    this._wrapperFields['gpu_combined'].fill(value);
  }
  get temperature_board() {
    if (!this._temperature_boardIntialized) {
      return undefined;
    }
    return this._refObject.temperature_board;
  }
  set temperature_board(value) {
    this._temperature_boardIntialized = true;
    this._refObject.temperature_board = value;
  }
  get temperature_core() {
    return this._wrapperFields['temperature_core'].data;
  }
  set temperature_core(value) {
    if (value.length !== 8) {
      throw new RangeError('The length of the array must be 8.');
    }
    this._wrapperFields['temperature_core'].fill(value);
  }
  get fan_speed() {
    return this._wrapperFields['fan_speed'].data;
  }
  set fan_speed(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['fan_speed'].fill(value);
  }
  get ram_usage() {
    if (!this._ram_usageIntialized) {
      return undefined;
    }
    return this._refObject.ram_usage;
  }
  set ram_usage(value) {
    this._ram_usageIntialized = true;
    this._refObject.ram_usage = value;
  }
  get ram_total() {
    if (!this._ram_totalIntialized) {
      return undefined;
    }
    return this._refObject.ram_total;
  }
  set ram_total(value) {
    this._ram_totalIntialized = true;
    this._refObject.ram_total = value;
  }
  get storage_type() {
    return this._wrapperFields['storage_type'].data;
  }
  set storage_type(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['storage_type'].fill(value);
  }
  get storage_usage() {
    return this._wrapperFields['storage_usage'].data;
  }
  set storage_usage(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['storage_usage'].fill(value);
  }
  get storage_total() {
    return this._wrapperFields['storage_total'].data;
  }
  set storage_total(value) {
    if (value.length !== 4) {
      throw new RangeError('The length of the array must be 4.');
    }
    this._wrapperFields['storage_total'].fill(value);
  }
  get link_type() {
    return this._wrapperFields['link_type'].data;
  }
  set link_type(value) {
    if (value.length !== 6) {
      throw new RangeError('The length of the array must be 6.');
    }
    this._wrapperFields['link_type'].fill(value);
  }
  get link_tx_rate() {
    return this._wrapperFields['link_tx_rate'].data;
  }
  set link_tx_rate(value) {
    if (value.length !== 6) {
      throw new RangeError('The length of the array must be 6.');
    }
    this._wrapperFields['link_tx_rate'].fill(value);
  }
  get link_rx_rate() {
    return this._wrapperFields['link_rx_rate'].data;
  }
  set link_rx_rate(value) {
    if (value.length !== 6) {
      throw new RangeError('The length of the array must be 6.');
    }
    this._wrapperFields['link_rx_rate'].fill(value);
  }
  get link_tx_max() {
    return this._wrapperFields['link_tx_max'].data;
  }
  set link_tx_max(value) {
    if (value.length !== 6) {
      throw new RangeError('The length of the array must be 6.');
    }
    this._wrapperFields['link_tx_max'].fill(value);
  }
  get link_rx_max() {
    return this._wrapperFields['link_rx_max'].data;
  }
  set link_rx_max(value) {
    if (value.length !== 6) {
      throw new RangeError('The length of the array must be 6.');
    }
    this._wrapperFields['link_rx_max'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new OnboardComputerStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._uptimeIntialized = true;
    this._typeIntialized = true;
    this._wrapperFields.cpu_cores.fill(refObject.cpu_cores.toArray());
    this._wrapperFields.cpu_combined.fill(refObject.cpu_combined.toArray());
    this._wrapperFields.gpu_cores.fill(refObject.gpu_cores.toArray());
    this._wrapperFields.gpu_combined.fill(refObject.gpu_combined.toArray());
    this._temperature_boardIntialized = true;
    this._wrapperFields.temperature_core.fill(refObject.temperature_core.toArray());
    this._wrapperFields.fan_speed.fill(refObject.fan_speed.toArray());
    this._ram_usageIntialized = true;
    this._ram_totalIntialized = true;
    this._wrapperFields.storage_type.fill(refObject.storage_type.toArray());
    this._wrapperFields.storage_usage.fill(refObject.storage_usage.toArray());
    this._wrapperFields.storage_total.fill(refObject.storage_total.toArray());
    this._wrapperFields.link_type.fill(refObject.link_type.toArray());
    this._wrapperFields.link_tx_rate.fill(refObject.link_tx_rate.toArray());
    this._wrapperFields.link_rx_rate.fill(refObject.link_rx_rate.toArray());
    this._wrapperFields.link_tx_max.fill(refObject.link_tx_max.toArray());
    this._wrapperFields.link_rx_max.fill(refObject.link_rx_max.toArray());
  }
  copy(other) {
    this._refObject = new OnboardComputerStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._uptimeIntialized = true;
    this._typeIntialized = true;
    this._wrapperFields.cpu_cores.copy(other._wrapperFields.cpu_cores);
    this._wrapperFields.cpu_combined.copy(other._wrapperFields.cpu_combined);
    this._wrapperFields.gpu_cores.copy(other._wrapperFields.gpu_cores);
    this._wrapperFields.gpu_combined.copy(other._wrapperFields.gpu_combined);
    this._temperature_boardIntialized = true;
    this._wrapperFields.temperature_core.copy(other._wrapperFields.temperature_core);
    this._wrapperFields.fan_speed.copy(other._wrapperFields.fan_speed);
    this._ram_usageIntialized = true;
    this._ram_totalIntialized = true;
    this._wrapperFields.storage_type.copy(other._wrapperFields.storage_type);
    this._wrapperFields.storage_usage.copy(other._wrapperFields.storage_usage);
    this._wrapperFields.storage_total.copy(other._wrapperFields.storage_total);
    this._wrapperFields.link_type.copy(other._wrapperFields.link_type);
    this._wrapperFields.link_tx_rate.copy(other._wrapperFields.link_tx_rate);
    this._wrapperFields.link_rx_rate.copy(other._wrapperFields.link_rx_rate);
    this._wrapperFields.link_tx_max.copy(other._wrapperFields.link_tx_max);
    this._wrapperFields.link_rx_max.copy(other._wrapperFields.link_rx_max);
  }
  static get classType() {
    return OnboardComputerStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"uptime","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cpu_cores","type":{"isArray":true,"arraySize":8,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cpu_combined","type":{"isArray":true,"arraySize":10,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gpu_cores","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gpu_combined","type":{"isArray":true,"arraySize":10,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature_board","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature_core","type":{"isArray":true,"arraySize":8,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fan_speed","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ram_usage","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ram_total","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"storage_type","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"storage_usage","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"storage_total","type":{"isArray":true,"arraySize":4,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"link_type","type":{"isArray":true,"arraySize":6,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"link_tx_rate","type":{"isArray":true,"arraySize":6,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"link_rx_rate","type":{"isArray":true,"arraySize":6,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"link_tx_max","type":{"isArray":true,"arraySize":6,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"link_rx_max","type":{"isArray":true,"arraySize":6,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"OnboardComputerStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"OnboardComputerStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","uptime","type","cpu_cores","cpu_combined","gpu_cores","gpu_combined","temperature_board","temperature_core","fan_speed","ram_usage","ram_total","storage_type","storage_usage","storage_total","link_type","link_tx_rate","link_rx_rate","link_tx_max","link_rx_max"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class OnboardComputerStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof OnboardComputerStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new OnboardComputerStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OnboardComputerStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OnboardComputerStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new OnboardComputerStatusRefArray(size);
    this._refObject = new OnboardComputerStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new OnboardComputerStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof OnboardComputerStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "OnboardComputerStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      OnboardComputerStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return OnboardComputerStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return OnboardComputerStatusArrayWrapper;
  }
}
module.exports = OnboardComputerStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "uptime",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cpu_cores",
      "type": {
        "isArray": true,
        "arraySize": 8,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cpu_combined",
      "type": {
        "isArray": true,
        "arraySize": 10,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gpu_cores",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gpu_combined",
      "type": {
        "isArray": true,
        "arraySize": 10,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature_board",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature_core",
      "type": {
        "isArray": true,
        "arraySize": 8,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fan_speed",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ram_usage",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ram_total",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "storage_type",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "storage_usage",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "storage_total",
      "type": {
        "isArray": true,
        "arraySize": 4,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "link_type",
      "type": {
        "isArray": true,
        "arraySize": 6,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "link_tx_rate",
      "type": {
        "isArray": true,
        "arraySize": 6,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "link_rx_rate",
      "type": {
        "isArray": true,
        "arraySize": 6,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "link_tx_max",
      "type": {
        "isArray": true,
        "arraySize": 6,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "link_rx_max",
      "type": {
        "isArray": true,
        "arraySize": 6,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "OnboardComputerStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "OnboardComputerStatus"
}
*/
