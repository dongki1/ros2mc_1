// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TimesyncStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  source_protocol: primitiveTypes.uint8,
  remote_timestamp: primitiveTypes.uint64,
  observed_offset: primitiveTypes.int64,
  estimated_offset: primitiveTypes.int64,
  round_trip_time: primitiveTypes.uint32,
});
const TimesyncStatusRefArray = ArrayType(TimesyncStatusRefStruct);
const TimesyncStatusRefStructArray = StructType({
  data: TimesyncStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TimesyncStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TimesyncStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._source_protocolIntialized = true;
      this._remote_timestampIntialized = true;
      this._observed_offsetIntialized = true;
      this._estimated_offsetIntialized = true;
      this._round_trip_timeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TimesyncStatusRefStruct();
    this._timestampIntialized = false;
    this._source_protocolIntialized = false;
    this._remote_timestampIntialized = false;
    this._observed_offsetIntialized = false;
    this._estimated_offsetIntialized = false;
    this._round_trip_timeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new TimesyncStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TimesyncStatusArrayWrapper;
  }
  static get ArrayType() {
    return TimesyncStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return TimesyncStatusRefStructArray
  }
  static get refObjectType() {
    return TimesyncStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in TimesyncStatus');
      }
      if (checkConsistency && !this._source_protocolIntialized) {
        throw new TypeError('Invalid argument: source_protocol in TimesyncStatus');
      }
      if (checkConsistency && !this._remote_timestampIntialized) {
        throw new TypeError('Invalid argument: remote_timestamp in TimesyncStatus');
      }
      if (checkConsistency && !this._observed_offsetIntialized) {
        throw new TypeError('Invalid argument: observed_offset in TimesyncStatus');
      }
      if (checkConsistency && !this._estimated_offsetIntialized) {
        throw new TypeError('Invalid argument: estimated_offset in TimesyncStatus');
      }
      if (checkConsistency && !this._round_trip_timeIntialized) {
        throw new TypeError('Invalid argument: round_trip_time in TimesyncStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._source_protocolIntialized = true;
    this._refObject.source_protocol = refObject.source_protocol;
    this._remote_timestampIntialized = true;
    this._refObject.remote_timestamp = refObject.remote_timestamp;
    this._observed_offsetIntialized = true;
    this._refObject.observed_offset = refObject.observed_offset;
    this._estimated_offsetIntialized = true;
    this._refObject.estimated_offset = refObject.estimated_offset;
    this._round_trip_timeIntialized = true;
    this._refObject.round_trip_time = refObject.round_trip_time;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    TimesyncStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'TimesyncStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get source_protocol() {
    if (!this._source_protocolIntialized) {
      return undefined;
    }
    return this._refObject.source_protocol;
  }
  set source_protocol(value) {
    this._source_protocolIntialized = true;
    this._refObject.source_protocol = value;
  }
  get remote_timestamp() {
    if (!this._remote_timestampIntialized) {
      return undefined;
    }
    return this._refObject.remote_timestamp;
  }
  set remote_timestamp(value) {
    this._remote_timestampIntialized = true;
    this._refObject.remote_timestamp = value;
  }
  get observed_offset() {
    if (!this._observed_offsetIntialized) {
      return undefined;
    }
    return this._refObject.observed_offset;
  }
  set observed_offset(value) {
    this._observed_offsetIntialized = true;
    this._refObject.observed_offset = value;
  }
  get estimated_offset() {
    if (!this._estimated_offsetIntialized) {
      return undefined;
    }
    return this._refObject.estimated_offset;
  }
  set estimated_offset(value) {
    this._estimated_offsetIntialized = true;
    this._refObject.estimated_offset = value;
  }
  get round_trip_time() {
    if (!this._round_trip_timeIntialized) {
      return undefined;
    }
    return this._refObject.round_trip_time;
  }
  set round_trip_time(value) {
    this._round_trip_timeIntialized = true;
    this._refObject.round_trip_time = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TimesyncStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._source_protocolIntialized = true;
    this._remote_timestampIntialized = true;
    this._observed_offsetIntialized = true;
    this._estimated_offsetIntialized = true;
    this._round_trip_timeIntialized = true;
  }
  copy(other) {
    this._refObject = new TimesyncStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._source_protocolIntialized = true;
    this._remote_timestampIntialized = true;
    this._observed_offsetIntialized = true;
    this._estimated_offsetIntialized = true;
    this._round_trip_timeIntialized = true;
  }
  static get classType() {
    return TimesyncStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"SOURCE_PROTOCOL_UNKNOWN","value":0},{"type":"uint8","name":"SOURCE_PROTOCOL_MAVLINK","value":1},{"type":"uint8","name":"SOURCE_PROTOCOL_DDS","value":2}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"source_protocol","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"remote_timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"observed_offset","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"estimated_offset","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"round_trip_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"TimesyncStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TimesyncStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","source_protocol","remote_timestamp","observed_offset","estimated_offset","round_trip_time"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TimesyncStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TimesyncStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TimesyncStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TimesyncStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TimesyncStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TimesyncStatusRefArray(size);
    this._refObject = new TimesyncStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TimesyncStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TimesyncStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TimesyncStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TimesyncStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TimesyncStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TimesyncStatusArrayWrapper;
  }
}
// Define constants (3 in total)
Object.defineProperty(TimesyncStatusWrapper, "SOURCE_PROTOCOL_UNKNOWN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TimesyncStatusWrapper, "SOURCE_PROTOCOL_MAVLINK", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TimesyncStatusWrapper, "SOURCE_PROTOCOL_DDS", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = TimesyncStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "SOURCE_PROTOCOL_UNKNOWN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "SOURCE_PROTOCOL_MAVLINK",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "SOURCE_PROTOCOL_DDS",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "source_protocol",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "remote_timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "observed_offset",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "estimated_offset",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "round_trip_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "TimesyncStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TimesyncStatus"
}
*/
