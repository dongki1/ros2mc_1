// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const GimbalManagerInformationRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  cap_flags: primitiveTypes.uint32,
  gimbal_device_id: primitiveTypes.uint8,
  roll_min: primitiveTypes.float32,
  roll_max: primitiveTypes.float32,
  pitch_min: primitiveTypes.float32,
  pitch_max: primitiveTypes.float32,
  yaw_min: primitiveTypes.float32,
  yaw_max: primitiveTypes.float32,
});
const GimbalManagerInformationRefArray = ArrayType(GimbalManagerInformationRefStruct);
const GimbalManagerInformationRefStructArray = StructType({
  data: GimbalManagerInformationRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GimbalManagerInformationWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GimbalManagerInformationRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._cap_flagsIntialized = true;
      this._gimbal_device_idIntialized = true;
      this._roll_minIntialized = true;
      this._roll_maxIntialized = true;
      this._pitch_minIntialized = true;
      this._pitch_maxIntialized = true;
      this._yaw_minIntialized = true;
      this._yaw_maxIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GimbalManagerInformationRefStruct();
    this._timestampIntialized = false;
    this._cap_flagsIntialized = false;
    this._gimbal_device_idIntialized = false;
    this._roll_minIntialized = false;
    this._roll_maxIntialized = false;
    this._pitch_minIntialized = false;
    this._pitch_maxIntialized = false;
    this._yaw_minIntialized = false;
    this._yaw_maxIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new GimbalManagerInformationWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GimbalManagerInformationArrayWrapper;
  }
  static get ArrayType() {
    return GimbalManagerInformationArrayWrapper;
  }
  static get refObjectArrayType() {
    return GimbalManagerInformationRefStructArray
  }
  static get refObjectType() {
    return GimbalManagerInformationRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in GimbalManagerInformation');
      }
      if (checkConsistency && !this._cap_flagsIntialized) {
        throw new TypeError('Invalid argument: cap_flags in GimbalManagerInformation');
      }
      if (checkConsistency && !this._gimbal_device_idIntialized) {
        throw new TypeError('Invalid argument: gimbal_device_id in GimbalManagerInformation');
      }
      if (checkConsistency && !this._roll_minIntialized) {
        throw new TypeError('Invalid argument: roll_min in GimbalManagerInformation');
      }
      if (checkConsistency && !this._roll_maxIntialized) {
        throw new TypeError('Invalid argument: roll_max in GimbalManagerInformation');
      }
      if (checkConsistency && !this._pitch_minIntialized) {
        throw new TypeError('Invalid argument: pitch_min in GimbalManagerInformation');
      }
      if (checkConsistency && !this._pitch_maxIntialized) {
        throw new TypeError('Invalid argument: pitch_max in GimbalManagerInformation');
      }
      if (checkConsistency && !this._yaw_minIntialized) {
        throw new TypeError('Invalid argument: yaw_min in GimbalManagerInformation');
      }
      if (checkConsistency && !this._yaw_maxIntialized) {
        throw new TypeError('Invalid argument: yaw_max in GimbalManagerInformation');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._cap_flagsIntialized = true;
    this._refObject.cap_flags = refObject.cap_flags;
    this._gimbal_device_idIntialized = true;
    this._refObject.gimbal_device_id = refObject.gimbal_device_id;
    this._roll_minIntialized = true;
    this._refObject.roll_min = refObject.roll_min;
    this._roll_maxIntialized = true;
    this._refObject.roll_max = refObject.roll_max;
    this._pitch_minIntialized = true;
    this._refObject.pitch_min = refObject.pitch_min;
    this._pitch_maxIntialized = true;
    this._refObject.pitch_max = refObject.pitch_max;
    this._yaw_minIntialized = true;
    this._refObject.yaw_min = refObject.yaw_min;
    this._yaw_maxIntialized = true;
    this._refObject.yaw_max = refObject.yaw_max;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    GimbalManagerInformationWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'GimbalManagerInformation'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get cap_flags() {
    if (!this._cap_flagsIntialized) {
      return undefined;
    }
    return this._refObject.cap_flags;
  }
  set cap_flags(value) {
    this._cap_flagsIntialized = true;
    this._refObject.cap_flags = value;
  }
  get gimbal_device_id() {
    if (!this._gimbal_device_idIntialized) {
      return undefined;
    }
    return this._refObject.gimbal_device_id;
  }
  set gimbal_device_id(value) {
    this._gimbal_device_idIntialized = true;
    this._refObject.gimbal_device_id = value;
  }
  get roll_min() {
    if (!this._roll_minIntialized) {
      return undefined;
    }
    return this._refObject.roll_min;
  }
  set roll_min(value) {
    this._roll_minIntialized = true;
    this._refObject.roll_min = value;
  }
  get roll_max() {
    if (!this._roll_maxIntialized) {
      return undefined;
    }
    return this._refObject.roll_max;
  }
  set roll_max(value) {
    this._roll_maxIntialized = true;
    this._refObject.roll_max = value;
  }
  get pitch_min() {
    if (!this._pitch_minIntialized) {
      return undefined;
    }
    return this._refObject.pitch_min;
  }
  set pitch_min(value) {
    this._pitch_minIntialized = true;
    this._refObject.pitch_min = value;
  }
  get pitch_max() {
    if (!this._pitch_maxIntialized) {
      return undefined;
    }
    return this._refObject.pitch_max;
  }
  set pitch_max(value) {
    this._pitch_maxIntialized = true;
    this._refObject.pitch_max = value;
  }
  get yaw_min() {
    if (!this._yaw_minIntialized) {
      return undefined;
    }
    return this._refObject.yaw_min;
  }
  set yaw_min(value) {
    this._yaw_minIntialized = true;
    this._refObject.yaw_min = value;
  }
  get yaw_max() {
    if (!this._yaw_maxIntialized) {
      return undefined;
    }
    return this._refObject.yaw_max;
  }
  set yaw_max(value) {
    this._yaw_maxIntialized = true;
    this._refObject.yaw_max = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GimbalManagerInformationRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._cap_flagsIntialized = true;
    this._gimbal_device_idIntialized = true;
    this._roll_minIntialized = true;
    this._roll_maxIntialized = true;
    this._pitch_minIntialized = true;
    this._pitch_maxIntialized = true;
    this._yaw_minIntialized = true;
    this._yaw_maxIntialized = true;
  }
  copy(other) {
    this._refObject = new GimbalManagerInformationRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._cap_flagsIntialized = true;
    this._gimbal_device_idIntialized = true;
    this._roll_minIntialized = true;
    this._roll_maxIntialized = true;
    this._pitch_minIntialized = true;
    this._pitch_maxIntialized = true;
    this._yaw_minIntialized = true;
    this._yaw_maxIntialized = true;
  }
  static get classType() {
    return GimbalManagerInformationWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT","value":1},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL","value":2},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS","value":4},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW","value":8},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK","value":16},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS","value":32},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW","value":64},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK","value":128},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS","value":256},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW","value":512},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK","value":1024},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW","value":2048},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL","value":65536},{"type":"uint32","name":"GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL","value":131072}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cap_flags","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gimbal_device_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"roll_min","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"roll_max","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pitch_min","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pitch_max","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw_min","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw_max","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"GimbalManagerInformation","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GimbalManagerInformation"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","cap_flags","gimbal_device_id","roll_min","roll_max","pitch_min","pitch_max","yaw_min","yaw_max"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GimbalManagerInformationArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GimbalManagerInformationWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GimbalManagerInformationWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GimbalManagerInformationArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GimbalManagerInformationArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GimbalManagerInformationRefArray(size);
    this._refObject = new GimbalManagerInformationRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GimbalManagerInformationWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GimbalManagerInformationArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GimbalManagerInformationArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GimbalManagerInformationWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GimbalManagerInformationWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GimbalManagerInformationArrayWrapper;
  }
}
// Define constants (14 in total)
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK", {value: 16, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS", {value: 32, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW", {value: 64, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK", {value: 128, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS", {value: 256, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW", {value: 512, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK", {value: 1024, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW", {value: 2048, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL", {value: 65536, writable: false, enumerable: true, configurable: true});
Object.defineProperty(GimbalManagerInformationWrapper, "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL", {value: 131072, writable: false, enumerable: true, configurable: true});
module.exports = GimbalManagerInformationWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_RETRACT",
      "value": 1
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_NEUTRAL",
      "value": 2
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_AXIS",
      "value": 4
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_FOLLOW",
      "value": 8
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_ROLL_LOCK",
      "value": 16
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_AXIS",
      "value": 32
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_FOLLOW",
      "value": 64
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_PITCH_LOCK",
      "value": 128
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_AXIS",
      "value": 256
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_FOLLOW",
      "value": 512
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_HAS_YAW_LOCK",
      "value": 1024
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_SUPPORTS_INFINITE_YAW",
      "value": 2048
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_LOCAL",
      "value": 65536
    },
    {
      "type": "uint32",
      "name": "GIMBAL_MANAGER_CAP_FLAGS_CAN_POINT_LOCATION_GLOBAL",
      "value": 131072
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cap_flags",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gimbal_device_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "roll_min",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "roll_max",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pitch_min",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pitch_max",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw_min",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw_max",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "GimbalManagerInformation",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GimbalManagerInformation"
}
*/
