// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const CharWrapper = require('../../generated/std_msgs/std_msgs__msg__Char.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const DebugArrayRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  id: primitiveTypes.uint16,
  name: ArrayType(primitiveTypes.char, 10),
  data: ArrayType(primitiveTypes.float32, 58),
});
const DebugArrayRefArray = ArrayType(DebugArrayRefStruct);
const DebugArrayRefStructArray = StructType({
  data: DebugArrayRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DebugArrayWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DebugArrayRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._idIntialized = true;
      this._wrapperFields.name = CharWrapper.createArray();
      this._wrapperFields.name.copy(other._wrapperFields.name);
      this._wrapperFields.data = Float32Wrapper.createArray();
      this._wrapperFields.data.copy(other._wrapperFields.data);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DebugArrayRefStruct();
    this._timestampIntialized = false;
    this._idIntialized = false;
    this._wrapperFields.name = CharWrapper.createArray();
    this._wrapperFields.data = Float32Wrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new DebugArrayWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DebugArrayArrayWrapper;
  }
  static get ArrayType() {
    return DebugArrayArrayWrapper;
  }
  static get refObjectArrayType() {
    return DebugArrayRefStructArray
  }
  static get refObjectType() {
    return DebugArrayRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in DebugArray');
      }
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in DebugArray');
      }
    this._refObject.name = Array.from(this._wrapperFields.name.data);
    this._refObject.data = Array.from(this._wrapperFields.data.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._idIntialized = true;
    this._refObject.id = refObject.id;
    this._wrapperFields.name.fill(refObject.name.toArray());
    this._wrapperFields.data.fill(refObject.data.toArray());
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    DebugArrayWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'DebugArray'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._refObject.id;
  }
  set id(value) {
    this._idIntialized = true;
    this._refObject.id = value;
  }
  get name() {
    return this._wrapperFields['name'].data;
  }
  set name(value) {
    if (value.length !== 10) {
      throw new RangeError('The length of the array must be 10.');
    }
    this._wrapperFields['name'].fill(value);
  }
  get data() {
    return this._wrapperFields['data'].data;
  }
  set data(value) {
    if (value.length !== 58) {
      throw new RangeError('The length of the array must be 58.');
    }
    this._wrapperFields['data'].fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new DebugArrayRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._idIntialized = true;
    this._wrapperFields.name.fill(refObject.name.toArray());
    this._wrapperFields.data.fill(refObject.data.toArray());
  }
  copy(other) {
    this._refObject = new DebugArrayRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._idIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._wrapperFields.data.copy(other._wrapperFields.data);
  }
  static get classType() {
    return DebugArrayWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"ARRAY_SIZE","value":58}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"name","type":{"isArray":true,"arraySize":10,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"char","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"data","type":{"isArray":true,"arraySize":58,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"DebugArray","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DebugArray"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","id","name","data"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DebugArrayArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DebugArrayWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DebugArrayWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DebugArrayArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DebugArrayArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DebugArrayRefArray(size);
    this._refObject = new DebugArrayRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DebugArrayWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DebugArrayArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DebugArrayArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DebugArrayWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DebugArrayWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DebugArrayArrayWrapper;
  }
}
// Define constants (1 in total)
Object.defineProperty(DebugArrayWrapper, "ARRAY_SIZE", {value: 58, writable: false, enumerable: true, configurable: true});
module.exports = DebugArrayWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "ARRAY_SIZE",
      "value": 58
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": true,
        "arraySize": 10,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "char",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "data",
      "type": {
        "isArray": true,
        "arraySize": 58,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "DebugArray",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DebugArray"
}
*/
