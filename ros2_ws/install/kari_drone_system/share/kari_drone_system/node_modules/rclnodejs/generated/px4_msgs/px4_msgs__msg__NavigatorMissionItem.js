// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const NavigatorMissionItemRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  instance_count: primitiveTypes.uint32,
  sequence_current: primitiveTypes.uint16,
  nav_cmd: primitiveTypes.uint16,
  latitude: primitiveTypes.float32,
  longitude: primitiveTypes.float32,
  time_inside: primitiveTypes.float32,
  acceptance_radius: primitiveTypes.float32,
  loiter_radius: primitiveTypes.float32,
  yaw: primitiveTypes.float32,
  altitude: primitiveTypes.float32,
  frame: primitiveTypes.uint8,
  origin: primitiveTypes.uint8,
  loiter_exit_xtrack: primitiveTypes.bool,
  force_heading: primitiveTypes.bool,
  altitude_is_relative: primitiveTypes.bool,
  autocontinue: primitiveTypes.bool,
  vtol_back_transition: primitiveTypes.bool,
});
const NavigatorMissionItemRefArray = ArrayType(NavigatorMissionItemRefStruct);
const NavigatorMissionItemRefStructArray = StructType({
  data: NavigatorMissionItemRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class NavigatorMissionItemWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new NavigatorMissionItemRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._instance_countIntialized = true;
      this._sequence_currentIntialized = true;
      this._nav_cmdIntialized = true;
      this._latitudeIntialized = true;
      this._longitudeIntialized = true;
      this._time_insideIntialized = true;
      this._acceptance_radiusIntialized = true;
      this._loiter_radiusIntialized = true;
      this._yawIntialized = true;
      this._altitudeIntialized = true;
      this._frameIntialized = true;
      this._originIntialized = true;
      this._loiter_exit_xtrackIntialized = true;
      this._force_headingIntialized = true;
      this._altitude_is_relativeIntialized = true;
      this._autocontinueIntialized = true;
      this._vtol_back_transitionIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new NavigatorMissionItemRefStruct();
    this._timestampIntialized = false;
    this._instance_countIntialized = false;
    this._sequence_currentIntialized = false;
    this._nav_cmdIntialized = false;
    this._latitudeIntialized = false;
    this._longitudeIntialized = false;
    this._time_insideIntialized = false;
    this._acceptance_radiusIntialized = false;
    this._loiter_radiusIntialized = false;
    this._yawIntialized = false;
    this._altitudeIntialized = false;
    this._frameIntialized = false;
    this._originIntialized = false;
    this._loiter_exit_xtrackIntialized = false;
    this._force_headingIntialized = false;
    this._altitude_is_relativeIntialized = false;
    this._autocontinueIntialized = false;
    this._vtol_back_transitionIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new NavigatorMissionItemWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new NavigatorMissionItemArrayWrapper;
  }
  static get ArrayType() {
    return NavigatorMissionItemArrayWrapper;
  }
  static get refObjectArrayType() {
    return NavigatorMissionItemRefStructArray
  }
  static get refObjectType() {
    return NavigatorMissionItemRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in NavigatorMissionItem');
      }
      if (checkConsistency && !this._instance_countIntialized) {
        throw new TypeError('Invalid argument: instance_count in NavigatorMissionItem');
      }
      if (checkConsistency && !this._sequence_currentIntialized) {
        throw new TypeError('Invalid argument: sequence_current in NavigatorMissionItem');
      }
      if (checkConsistency && !this._nav_cmdIntialized) {
        throw new TypeError('Invalid argument: nav_cmd in NavigatorMissionItem');
      }
      if (checkConsistency && !this._latitudeIntialized) {
        throw new TypeError('Invalid argument: latitude in NavigatorMissionItem');
      }
      if (checkConsistency && !this._longitudeIntialized) {
        throw new TypeError('Invalid argument: longitude in NavigatorMissionItem');
      }
      if (checkConsistency && !this._time_insideIntialized) {
        throw new TypeError('Invalid argument: time_inside in NavigatorMissionItem');
      }
      if (checkConsistency && !this._acceptance_radiusIntialized) {
        throw new TypeError('Invalid argument: acceptance_radius in NavigatorMissionItem');
      }
      if (checkConsistency && !this._loiter_radiusIntialized) {
        throw new TypeError('Invalid argument: loiter_radius in NavigatorMissionItem');
      }
      if (checkConsistency && !this._yawIntialized) {
        throw new TypeError('Invalid argument: yaw in NavigatorMissionItem');
      }
      if (checkConsistency && !this._altitudeIntialized) {
        throw new TypeError('Invalid argument: altitude in NavigatorMissionItem');
      }
      if (checkConsistency && !this._frameIntialized) {
        throw new TypeError('Invalid argument: frame in NavigatorMissionItem');
      }
      if (checkConsistency && !this._originIntialized) {
        throw new TypeError('Invalid argument: origin in NavigatorMissionItem');
      }
      if (checkConsistency && !this._loiter_exit_xtrackIntialized) {
        throw new TypeError('Invalid argument: loiter_exit_xtrack in NavigatorMissionItem');
      }
      if (checkConsistency && !this._force_headingIntialized) {
        throw new TypeError('Invalid argument: force_heading in NavigatorMissionItem');
      }
      if (checkConsistency && !this._altitude_is_relativeIntialized) {
        throw new TypeError('Invalid argument: altitude_is_relative in NavigatorMissionItem');
      }
      if (checkConsistency && !this._autocontinueIntialized) {
        throw new TypeError('Invalid argument: autocontinue in NavigatorMissionItem');
      }
      if (checkConsistency && !this._vtol_back_transitionIntialized) {
        throw new TypeError('Invalid argument: vtol_back_transition in NavigatorMissionItem');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._instance_countIntialized = true;
    this._refObject.instance_count = refObject.instance_count;
    this._sequence_currentIntialized = true;
    this._refObject.sequence_current = refObject.sequence_current;
    this._nav_cmdIntialized = true;
    this._refObject.nav_cmd = refObject.nav_cmd;
    this._latitudeIntialized = true;
    this._refObject.latitude = refObject.latitude;
    this._longitudeIntialized = true;
    this._refObject.longitude = refObject.longitude;
    this._time_insideIntialized = true;
    this._refObject.time_inside = refObject.time_inside;
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = refObject.acceptance_radius;
    this._loiter_radiusIntialized = true;
    this._refObject.loiter_radius = refObject.loiter_radius;
    this._yawIntialized = true;
    this._refObject.yaw = refObject.yaw;
    this._altitudeIntialized = true;
    this._refObject.altitude = refObject.altitude;
    this._frameIntialized = true;
    this._refObject.frame = refObject.frame;
    this._originIntialized = true;
    this._refObject.origin = refObject.origin;
    this._loiter_exit_xtrackIntialized = true;
    this._refObject.loiter_exit_xtrack = refObject.loiter_exit_xtrack;
    this._force_headingIntialized = true;
    this._refObject.force_heading = refObject.force_heading;
    this._altitude_is_relativeIntialized = true;
    this._refObject.altitude_is_relative = refObject.altitude_is_relative;
    this._autocontinueIntialized = true;
    this._refObject.autocontinue = refObject.autocontinue;
    this._vtol_back_transitionIntialized = true;
    this._refObject.vtol_back_transition = refObject.vtol_back_transition;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    NavigatorMissionItemWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'NavigatorMissionItem'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get instance_count() {
    if (!this._instance_countIntialized) {
      return undefined;
    }
    return this._refObject.instance_count;
  }
  set instance_count(value) {
    this._instance_countIntialized = true;
    this._refObject.instance_count = value;
  }
  get sequence_current() {
    if (!this._sequence_currentIntialized) {
      return undefined;
    }
    return this._refObject.sequence_current;
  }
  set sequence_current(value) {
    this._sequence_currentIntialized = true;
    this._refObject.sequence_current = value;
  }
  get nav_cmd() {
    if (!this._nav_cmdIntialized) {
      return undefined;
    }
    return this._refObject.nav_cmd;
  }
  set nav_cmd(value) {
    this._nav_cmdIntialized = true;
    this._refObject.nav_cmd = value;
  }
  get latitude() {
    if (!this._latitudeIntialized) {
      return undefined;
    }
    return this._refObject.latitude;
  }
  set latitude(value) {
    this._latitudeIntialized = true;
    this._refObject.latitude = value;
  }
  get longitude() {
    if (!this._longitudeIntialized) {
      return undefined;
    }
    return this._refObject.longitude;
  }
  set longitude(value) {
    this._longitudeIntialized = true;
    this._refObject.longitude = value;
  }
  get time_inside() {
    if (!this._time_insideIntialized) {
      return undefined;
    }
    return this._refObject.time_inside;
  }
  set time_inside(value) {
    this._time_insideIntialized = true;
    this._refObject.time_inside = value;
  }
  get acceptance_radius() {
    if (!this._acceptance_radiusIntialized) {
      return undefined;
    }
    return this._refObject.acceptance_radius;
  }
  set acceptance_radius(value) {
    this._acceptance_radiusIntialized = true;
    this._refObject.acceptance_radius = value;
  }
  get loiter_radius() {
    if (!this._loiter_radiusIntialized) {
      return undefined;
    }
    return this._refObject.loiter_radius;
  }
  set loiter_radius(value) {
    this._loiter_radiusIntialized = true;
    this._refObject.loiter_radius = value;
  }
  get yaw() {
    if (!this._yawIntialized) {
      return undefined;
    }
    return this._refObject.yaw;
  }
  set yaw(value) {
    this._yawIntialized = true;
    this._refObject.yaw = value;
  }
  get altitude() {
    if (!this._altitudeIntialized) {
      return undefined;
    }
    return this._refObject.altitude;
  }
  set altitude(value) {
    this._altitudeIntialized = true;
    this._refObject.altitude = value;
  }
  get frame() {
    if (!this._frameIntialized) {
      return undefined;
    }
    return this._refObject.frame;
  }
  set frame(value) {
    this._frameIntialized = true;
    this._refObject.frame = value;
  }
  get origin() {
    if (!this._originIntialized) {
      return undefined;
    }
    return this._refObject.origin;
  }
  set origin(value) {
    this._originIntialized = true;
    this._refObject.origin = value;
  }
  get loiter_exit_xtrack() {
    if (!this._loiter_exit_xtrackIntialized) {
      return undefined;
    }
    return this._refObject.loiter_exit_xtrack;
  }
  set loiter_exit_xtrack(value) {
    this._loiter_exit_xtrackIntialized = true;
    this._refObject.loiter_exit_xtrack = value;
  }
  get force_heading() {
    if (!this._force_headingIntialized) {
      return undefined;
    }
    return this._refObject.force_heading;
  }
  set force_heading(value) {
    this._force_headingIntialized = true;
    this._refObject.force_heading = value;
  }
  get altitude_is_relative() {
    if (!this._altitude_is_relativeIntialized) {
      return undefined;
    }
    return this._refObject.altitude_is_relative;
  }
  set altitude_is_relative(value) {
    this._altitude_is_relativeIntialized = true;
    this._refObject.altitude_is_relative = value;
  }
  get autocontinue() {
    if (!this._autocontinueIntialized) {
      return undefined;
    }
    return this._refObject.autocontinue;
  }
  set autocontinue(value) {
    this._autocontinueIntialized = true;
    this._refObject.autocontinue = value;
  }
  get vtol_back_transition() {
    if (!this._vtol_back_transitionIntialized) {
      return undefined;
    }
    return this._refObject.vtol_back_transition;
  }
  set vtol_back_transition(value) {
    this._vtol_back_transitionIntialized = true;
    this._refObject.vtol_back_transition = value;
  }
  copyRefObject(refObject) {
    this._refObject = new NavigatorMissionItemRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._instance_countIntialized = true;
    this._sequence_currentIntialized = true;
    this._nav_cmdIntialized = true;
    this._latitudeIntialized = true;
    this._longitudeIntialized = true;
    this._time_insideIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._loiter_radiusIntialized = true;
    this._yawIntialized = true;
    this._altitudeIntialized = true;
    this._frameIntialized = true;
    this._originIntialized = true;
    this._loiter_exit_xtrackIntialized = true;
    this._force_headingIntialized = true;
    this._altitude_is_relativeIntialized = true;
    this._autocontinueIntialized = true;
    this._vtol_back_transitionIntialized = true;
  }
  copy(other) {
    this._refObject = new NavigatorMissionItemRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._instance_countIntialized = true;
    this._sequence_currentIntialized = true;
    this._nav_cmdIntialized = true;
    this._latitudeIntialized = true;
    this._longitudeIntialized = true;
    this._time_insideIntialized = true;
    this._acceptance_radiusIntialized = true;
    this._loiter_radiusIntialized = true;
    this._yawIntialized = true;
    this._altitudeIntialized = true;
    this._frameIntialized = true;
    this._originIntialized = true;
    this._loiter_exit_xtrackIntialized = true;
    this._force_headingIntialized = true;
    this._altitude_is_relativeIntialized = true;
    this._autocontinueIntialized = true;
    this._vtol_back_transitionIntialized = true;
  }
  static get classType() {
    return NavigatorMissionItemWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"instance_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sequence_current","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"nav_cmd","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"latitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"longitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"time_inside","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"acceptance_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loiter_radius","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"yaw","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"altitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"frame","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"origin","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loiter_exit_xtrack","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"force_heading","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"altitude_is_relative","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"autocontinue","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vtol_back_transition","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"NavigatorMissionItem","stringUpperBound":null,"isPrimitiveType":false},"msgName":"NavigatorMissionItem"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","instance_count","sequence_current","nav_cmd","latitude","longitude","time_inside","acceptance_radius","loiter_radius","yaw","altitude","frame","origin","loiter_exit_xtrack","force_heading","altitude_is_relative","autocontinue","vtol_back_transition"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class NavigatorMissionItemArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof NavigatorMissionItemWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new NavigatorMissionItemWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NavigatorMissionItemArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NavigatorMissionItemArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new NavigatorMissionItemRefArray(size);
    this._refObject = new NavigatorMissionItemRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new NavigatorMissionItemWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof NavigatorMissionItemArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "NavigatorMissionItemArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      NavigatorMissionItemWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return NavigatorMissionItemWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return NavigatorMissionItemArrayWrapper;
  }
}
module.exports = NavigatorMissionItemWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "instance_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sequence_current",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "nav_cmd",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "latitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "longitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "time_inside",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "acceptance_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loiter_radius",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "yaw",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "altitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "frame",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "origin",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loiter_exit_xtrack",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "force_heading",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "altitude_is_relative",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "autocontinue",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vtol_back_transition",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "NavigatorMissionItem",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "NavigatorMissionItem"
}
*/
