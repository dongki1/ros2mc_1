// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TelemetryStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  type: primitiveTypes.uint8,
  mode: primitiveTypes.uint8,
  flow_control: primitiveTypes.bool,
  forwarding: primitiveTypes.bool,
  mavlink_v2: primitiveTypes.bool,
  ftp: primitiveTypes.bool,
  streams: primitiveTypes.uint8,
  data_rate: primitiveTypes.float32,
  rate_multiplier: primitiveTypes.float32,
  tx_rate_avg: primitiveTypes.float32,
  tx_error_rate_avg: primitiveTypes.float32,
  tx_message_count: primitiveTypes.uint32,
  tx_buffer_overruns: primitiveTypes.uint32,
  rx_rate_avg: primitiveTypes.float32,
  rx_message_count: primitiveTypes.uint32,
  rx_message_lost_count: primitiveTypes.uint32,
  rx_buffer_overruns: primitiveTypes.uint32,
  rx_parse_errors: primitiveTypes.uint32,
  rx_packet_drop_count: primitiveTypes.uint32,
  rx_message_lost_rate: primitiveTypes.float32,
  heartbeat_type_antenna_tracker: primitiveTypes.bool,
  heartbeat_type_gcs: primitiveTypes.bool,
  heartbeat_type_onboard_controller: primitiveTypes.bool,
  heartbeat_type_gimbal: primitiveTypes.bool,
  heartbeat_type_adsb: primitiveTypes.bool,
  heartbeat_type_camera: primitiveTypes.bool,
  heartbeat_type_parachute: primitiveTypes.bool,
  heartbeat_type_open_drone_id: primitiveTypes.bool,
  heartbeat_component_telemetry_radio: primitiveTypes.bool,
  heartbeat_component_log: primitiveTypes.bool,
  heartbeat_component_osd: primitiveTypes.bool,
  heartbeat_component_obstacle_avoidance: primitiveTypes.bool,
  heartbeat_component_vio: primitiveTypes.bool,
  heartbeat_component_pairing_manager: primitiveTypes.bool,
  heartbeat_component_udp_bridge: primitiveTypes.bool,
  heartbeat_component_uart_bridge: primitiveTypes.bool,
  avoidance_system_healthy: primitiveTypes.bool,
  open_drone_id_system_healthy: primitiveTypes.bool,
  parachute_system_healthy: primitiveTypes.bool,
});
const TelemetryStatusRefArray = ArrayType(TelemetryStatusRefStruct);
const TelemetryStatusRefStructArray = StructType({
  data: TelemetryStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class TelemetryStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new TelemetryStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._typeIntialized = true;
      this._modeIntialized = true;
      this._flow_controlIntialized = true;
      this._forwardingIntialized = true;
      this._mavlink_v2Intialized = true;
      this._ftpIntialized = true;
      this._streamsIntialized = true;
      this._data_rateIntialized = true;
      this._rate_multiplierIntialized = true;
      this._tx_rate_avgIntialized = true;
      this._tx_error_rate_avgIntialized = true;
      this._tx_message_countIntialized = true;
      this._tx_buffer_overrunsIntialized = true;
      this._rx_rate_avgIntialized = true;
      this._rx_message_countIntialized = true;
      this._rx_message_lost_countIntialized = true;
      this._rx_buffer_overrunsIntialized = true;
      this._rx_parse_errorsIntialized = true;
      this._rx_packet_drop_countIntialized = true;
      this._rx_message_lost_rateIntialized = true;
      this._heartbeat_type_antenna_trackerIntialized = true;
      this._heartbeat_type_gcsIntialized = true;
      this._heartbeat_type_onboard_controllerIntialized = true;
      this._heartbeat_type_gimbalIntialized = true;
      this._heartbeat_type_adsbIntialized = true;
      this._heartbeat_type_cameraIntialized = true;
      this._heartbeat_type_parachuteIntialized = true;
      this._heartbeat_type_open_drone_idIntialized = true;
      this._heartbeat_component_telemetry_radioIntialized = true;
      this._heartbeat_component_logIntialized = true;
      this._heartbeat_component_osdIntialized = true;
      this._heartbeat_component_obstacle_avoidanceIntialized = true;
      this._heartbeat_component_vioIntialized = true;
      this._heartbeat_component_pairing_managerIntialized = true;
      this._heartbeat_component_udp_bridgeIntialized = true;
      this._heartbeat_component_uart_bridgeIntialized = true;
      this._avoidance_system_healthyIntialized = true;
      this._open_drone_id_system_healthyIntialized = true;
      this._parachute_system_healthyIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new TelemetryStatusRefStruct();
    this._timestampIntialized = false;
    this._typeIntialized = false;
    this._modeIntialized = false;
    this._flow_controlIntialized = false;
    this._forwardingIntialized = false;
    this._mavlink_v2Intialized = false;
    this._ftpIntialized = false;
    this._streamsIntialized = false;
    this._data_rateIntialized = false;
    this._rate_multiplierIntialized = false;
    this._tx_rate_avgIntialized = false;
    this._tx_error_rate_avgIntialized = false;
    this._tx_message_countIntialized = false;
    this._tx_buffer_overrunsIntialized = false;
    this._rx_rate_avgIntialized = false;
    this._rx_message_countIntialized = false;
    this._rx_message_lost_countIntialized = false;
    this._rx_buffer_overrunsIntialized = false;
    this._rx_parse_errorsIntialized = false;
    this._rx_packet_drop_countIntialized = false;
    this._rx_message_lost_rateIntialized = false;
    this._heartbeat_type_antenna_trackerIntialized = false;
    this._heartbeat_type_gcsIntialized = false;
    this._heartbeat_type_onboard_controllerIntialized = false;
    this._heartbeat_type_gimbalIntialized = false;
    this._heartbeat_type_adsbIntialized = false;
    this._heartbeat_type_cameraIntialized = false;
    this._heartbeat_type_parachuteIntialized = false;
    this._heartbeat_type_open_drone_idIntialized = false;
    this._heartbeat_component_telemetry_radioIntialized = false;
    this._heartbeat_component_logIntialized = false;
    this._heartbeat_component_osdIntialized = false;
    this._heartbeat_component_obstacle_avoidanceIntialized = false;
    this._heartbeat_component_vioIntialized = false;
    this._heartbeat_component_pairing_managerIntialized = false;
    this._heartbeat_component_udp_bridgeIntialized = false;
    this._heartbeat_component_uart_bridgeIntialized = false;
    this._avoidance_system_healthyIntialized = false;
    this._open_drone_id_system_healthyIntialized = false;
    this._parachute_system_healthyIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new TelemetryStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new TelemetryStatusArrayWrapper;
  }
  static get ArrayType() {
    return TelemetryStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return TelemetryStatusRefStructArray
  }
  static get refObjectType() {
    return TelemetryStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in TelemetryStatus');
      }
      if (checkConsistency && !this._typeIntialized) {
        throw new TypeError('Invalid argument: type in TelemetryStatus');
      }
      if (checkConsistency && !this._modeIntialized) {
        throw new TypeError('Invalid argument: mode in TelemetryStatus');
      }
      if (checkConsistency && !this._flow_controlIntialized) {
        throw new TypeError('Invalid argument: flow_control in TelemetryStatus');
      }
      if (checkConsistency && !this._forwardingIntialized) {
        throw new TypeError('Invalid argument: forwarding in TelemetryStatus');
      }
      if (checkConsistency && !this._mavlink_v2Intialized) {
        throw new TypeError('Invalid argument: mavlink_v2 in TelemetryStatus');
      }
      if (checkConsistency && !this._ftpIntialized) {
        throw new TypeError('Invalid argument: ftp in TelemetryStatus');
      }
      if (checkConsistency && !this._streamsIntialized) {
        throw new TypeError('Invalid argument: streams in TelemetryStatus');
      }
      if (checkConsistency && !this._data_rateIntialized) {
        throw new TypeError('Invalid argument: data_rate in TelemetryStatus');
      }
      if (checkConsistency && !this._rate_multiplierIntialized) {
        throw new TypeError('Invalid argument: rate_multiplier in TelemetryStatus');
      }
      if (checkConsistency && !this._tx_rate_avgIntialized) {
        throw new TypeError('Invalid argument: tx_rate_avg in TelemetryStatus');
      }
      if (checkConsistency && !this._tx_error_rate_avgIntialized) {
        throw new TypeError('Invalid argument: tx_error_rate_avg in TelemetryStatus');
      }
      if (checkConsistency && !this._tx_message_countIntialized) {
        throw new TypeError('Invalid argument: tx_message_count in TelemetryStatus');
      }
      if (checkConsistency && !this._tx_buffer_overrunsIntialized) {
        throw new TypeError('Invalid argument: tx_buffer_overruns in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_rate_avgIntialized) {
        throw new TypeError('Invalid argument: rx_rate_avg in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_message_countIntialized) {
        throw new TypeError('Invalid argument: rx_message_count in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_message_lost_countIntialized) {
        throw new TypeError('Invalid argument: rx_message_lost_count in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_buffer_overrunsIntialized) {
        throw new TypeError('Invalid argument: rx_buffer_overruns in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_parse_errorsIntialized) {
        throw new TypeError('Invalid argument: rx_parse_errors in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_packet_drop_countIntialized) {
        throw new TypeError('Invalid argument: rx_packet_drop_count in TelemetryStatus');
      }
      if (checkConsistency && !this._rx_message_lost_rateIntialized) {
        throw new TypeError('Invalid argument: rx_message_lost_rate in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_antenna_trackerIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_antenna_tracker in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_gcsIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_gcs in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_onboard_controllerIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_onboard_controller in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_gimbalIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_gimbal in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_adsbIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_adsb in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_cameraIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_camera in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_parachuteIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_parachute in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_type_open_drone_idIntialized) {
        throw new TypeError('Invalid argument: heartbeat_type_open_drone_id in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_telemetry_radioIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_telemetry_radio in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_logIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_log in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_osdIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_osd in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_obstacle_avoidanceIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_obstacle_avoidance in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_vioIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_vio in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_pairing_managerIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_pairing_manager in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_udp_bridgeIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_udp_bridge in TelemetryStatus');
      }
      if (checkConsistency && !this._heartbeat_component_uart_bridgeIntialized) {
        throw new TypeError('Invalid argument: heartbeat_component_uart_bridge in TelemetryStatus');
      }
      if (checkConsistency && !this._avoidance_system_healthyIntialized) {
        throw new TypeError('Invalid argument: avoidance_system_healthy in TelemetryStatus');
      }
      if (checkConsistency && !this._open_drone_id_system_healthyIntialized) {
        throw new TypeError('Invalid argument: open_drone_id_system_healthy in TelemetryStatus');
      }
      if (checkConsistency && !this._parachute_system_healthyIntialized) {
        throw new TypeError('Invalid argument: parachute_system_healthy in TelemetryStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._typeIntialized = true;
    this._refObject.type = refObject.type;
    this._modeIntialized = true;
    this._refObject.mode = refObject.mode;
    this._flow_controlIntialized = true;
    this._refObject.flow_control = refObject.flow_control;
    this._forwardingIntialized = true;
    this._refObject.forwarding = refObject.forwarding;
    this._mavlink_v2Intialized = true;
    this._refObject.mavlink_v2 = refObject.mavlink_v2;
    this._ftpIntialized = true;
    this._refObject.ftp = refObject.ftp;
    this._streamsIntialized = true;
    this._refObject.streams = refObject.streams;
    this._data_rateIntialized = true;
    this._refObject.data_rate = refObject.data_rate;
    this._rate_multiplierIntialized = true;
    this._refObject.rate_multiplier = refObject.rate_multiplier;
    this._tx_rate_avgIntialized = true;
    this._refObject.tx_rate_avg = refObject.tx_rate_avg;
    this._tx_error_rate_avgIntialized = true;
    this._refObject.tx_error_rate_avg = refObject.tx_error_rate_avg;
    this._tx_message_countIntialized = true;
    this._refObject.tx_message_count = refObject.tx_message_count;
    this._tx_buffer_overrunsIntialized = true;
    this._refObject.tx_buffer_overruns = refObject.tx_buffer_overruns;
    this._rx_rate_avgIntialized = true;
    this._refObject.rx_rate_avg = refObject.rx_rate_avg;
    this._rx_message_countIntialized = true;
    this._refObject.rx_message_count = refObject.rx_message_count;
    this._rx_message_lost_countIntialized = true;
    this._refObject.rx_message_lost_count = refObject.rx_message_lost_count;
    this._rx_buffer_overrunsIntialized = true;
    this._refObject.rx_buffer_overruns = refObject.rx_buffer_overruns;
    this._rx_parse_errorsIntialized = true;
    this._refObject.rx_parse_errors = refObject.rx_parse_errors;
    this._rx_packet_drop_countIntialized = true;
    this._refObject.rx_packet_drop_count = refObject.rx_packet_drop_count;
    this._rx_message_lost_rateIntialized = true;
    this._refObject.rx_message_lost_rate = refObject.rx_message_lost_rate;
    this._heartbeat_type_antenna_trackerIntialized = true;
    this._refObject.heartbeat_type_antenna_tracker = refObject.heartbeat_type_antenna_tracker;
    this._heartbeat_type_gcsIntialized = true;
    this._refObject.heartbeat_type_gcs = refObject.heartbeat_type_gcs;
    this._heartbeat_type_onboard_controllerIntialized = true;
    this._refObject.heartbeat_type_onboard_controller = refObject.heartbeat_type_onboard_controller;
    this._heartbeat_type_gimbalIntialized = true;
    this._refObject.heartbeat_type_gimbal = refObject.heartbeat_type_gimbal;
    this._heartbeat_type_adsbIntialized = true;
    this._refObject.heartbeat_type_adsb = refObject.heartbeat_type_adsb;
    this._heartbeat_type_cameraIntialized = true;
    this._refObject.heartbeat_type_camera = refObject.heartbeat_type_camera;
    this._heartbeat_type_parachuteIntialized = true;
    this._refObject.heartbeat_type_parachute = refObject.heartbeat_type_parachute;
    this._heartbeat_type_open_drone_idIntialized = true;
    this._refObject.heartbeat_type_open_drone_id = refObject.heartbeat_type_open_drone_id;
    this._heartbeat_component_telemetry_radioIntialized = true;
    this._refObject.heartbeat_component_telemetry_radio = refObject.heartbeat_component_telemetry_radio;
    this._heartbeat_component_logIntialized = true;
    this._refObject.heartbeat_component_log = refObject.heartbeat_component_log;
    this._heartbeat_component_osdIntialized = true;
    this._refObject.heartbeat_component_osd = refObject.heartbeat_component_osd;
    this._heartbeat_component_obstacle_avoidanceIntialized = true;
    this._refObject.heartbeat_component_obstacle_avoidance = refObject.heartbeat_component_obstacle_avoidance;
    this._heartbeat_component_vioIntialized = true;
    this._refObject.heartbeat_component_vio = refObject.heartbeat_component_vio;
    this._heartbeat_component_pairing_managerIntialized = true;
    this._refObject.heartbeat_component_pairing_manager = refObject.heartbeat_component_pairing_manager;
    this._heartbeat_component_udp_bridgeIntialized = true;
    this._refObject.heartbeat_component_udp_bridge = refObject.heartbeat_component_udp_bridge;
    this._heartbeat_component_uart_bridgeIntialized = true;
    this._refObject.heartbeat_component_uart_bridge = refObject.heartbeat_component_uart_bridge;
    this._avoidance_system_healthyIntialized = true;
    this._refObject.avoidance_system_healthy = refObject.avoidance_system_healthy;
    this._open_drone_id_system_healthyIntialized = true;
    this._refObject.open_drone_id_system_healthy = refObject.open_drone_id_system_healthy;
    this._parachute_system_healthyIntialized = true;
    this._refObject.parachute_system_healthy = refObject.parachute_system_healthy;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    TelemetryStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'TelemetryStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get type() {
    if (!this._typeIntialized) {
      return undefined;
    }
    return this._refObject.type;
  }
  set type(value) {
    this._typeIntialized = true;
    this._refObject.type = value;
  }
  get mode() {
    if (!this._modeIntialized) {
      return undefined;
    }
    return this._refObject.mode;
  }
  set mode(value) {
    this._modeIntialized = true;
    this._refObject.mode = value;
  }
  get flow_control() {
    if (!this._flow_controlIntialized) {
      return undefined;
    }
    return this._refObject.flow_control;
  }
  set flow_control(value) {
    this._flow_controlIntialized = true;
    this._refObject.flow_control = value;
  }
  get forwarding() {
    if (!this._forwardingIntialized) {
      return undefined;
    }
    return this._refObject.forwarding;
  }
  set forwarding(value) {
    this._forwardingIntialized = true;
    this._refObject.forwarding = value;
  }
  get mavlink_v2() {
    if (!this._mavlink_v2Intialized) {
      return undefined;
    }
    return this._refObject.mavlink_v2;
  }
  set mavlink_v2(value) {
    this._mavlink_v2Intialized = true;
    this._refObject.mavlink_v2 = value;
  }
  get ftp() {
    if (!this._ftpIntialized) {
      return undefined;
    }
    return this._refObject.ftp;
  }
  set ftp(value) {
    this._ftpIntialized = true;
    this._refObject.ftp = value;
  }
  get streams() {
    if (!this._streamsIntialized) {
      return undefined;
    }
    return this._refObject.streams;
  }
  set streams(value) {
    this._streamsIntialized = true;
    this._refObject.streams = value;
  }
  get data_rate() {
    if (!this._data_rateIntialized) {
      return undefined;
    }
    return this._refObject.data_rate;
  }
  set data_rate(value) {
    this._data_rateIntialized = true;
    this._refObject.data_rate = value;
  }
  get rate_multiplier() {
    if (!this._rate_multiplierIntialized) {
      return undefined;
    }
    return this._refObject.rate_multiplier;
  }
  set rate_multiplier(value) {
    this._rate_multiplierIntialized = true;
    this._refObject.rate_multiplier = value;
  }
  get tx_rate_avg() {
    if (!this._tx_rate_avgIntialized) {
      return undefined;
    }
    return this._refObject.tx_rate_avg;
  }
  set tx_rate_avg(value) {
    this._tx_rate_avgIntialized = true;
    this._refObject.tx_rate_avg = value;
  }
  get tx_error_rate_avg() {
    if (!this._tx_error_rate_avgIntialized) {
      return undefined;
    }
    return this._refObject.tx_error_rate_avg;
  }
  set tx_error_rate_avg(value) {
    this._tx_error_rate_avgIntialized = true;
    this._refObject.tx_error_rate_avg = value;
  }
  get tx_message_count() {
    if (!this._tx_message_countIntialized) {
      return undefined;
    }
    return this._refObject.tx_message_count;
  }
  set tx_message_count(value) {
    this._tx_message_countIntialized = true;
    this._refObject.tx_message_count = value;
  }
  get tx_buffer_overruns() {
    if (!this._tx_buffer_overrunsIntialized) {
      return undefined;
    }
    return this._refObject.tx_buffer_overruns;
  }
  set tx_buffer_overruns(value) {
    this._tx_buffer_overrunsIntialized = true;
    this._refObject.tx_buffer_overruns = value;
  }
  get rx_rate_avg() {
    if (!this._rx_rate_avgIntialized) {
      return undefined;
    }
    return this._refObject.rx_rate_avg;
  }
  set rx_rate_avg(value) {
    this._rx_rate_avgIntialized = true;
    this._refObject.rx_rate_avg = value;
  }
  get rx_message_count() {
    if (!this._rx_message_countIntialized) {
      return undefined;
    }
    return this._refObject.rx_message_count;
  }
  set rx_message_count(value) {
    this._rx_message_countIntialized = true;
    this._refObject.rx_message_count = value;
  }
  get rx_message_lost_count() {
    if (!this._rx_message_lost_countIntialized) {
      return undefined;
    }
    return this._refObject.rx_message_lost_count;
  }
  set rx_message_lost_count(value) {
    this._rx_message_lost_countIntialized = true;
    this._refObject.rx_message_lost_count = value;
  }
  get rx_buffer_overruns() {
    if (!this._rx_buffer_overrunsIntialized) {
      return undefined;
    }
    return this._refObject.rx_buffer_overruns;
  }
  set rx_buffer_overruns(value) {
    this._rx_buffer_overrunsIntialized = true;
    this._refObject.rx_buffer_overruns = value;
  }
  get rx_parse_errors() {
    if (!this._rx_parse_errorsIntialized) {
      return undefined;
    }
    return this._refObject.rx_parse_errors;
  }
  set rx_parse_errors(value) {
    this._rx_parse_errorsIntialized = true;
    this._refObject.rx_parse_errors = value;
  }
  get rx_packet_drop_count() {
    if (!this._rx_packet_drop_countIntialized) {
      return undefined;
    }
    return this._refObject.rx_packet_drop_count;
  }
  set rx_packet_drop_count(value) {
    this._rx_packet_drop_countIntialized = true;
    this._refObject.rx_packet_drop_count = value;
  }
  get rx_message_lost_rate() {
    if (!this._rx_message_lost_rateIntialized) {
      return undefined;
    }
    return this._refObject.rx_message_lost_rate;
  }
  set rx_message_lost_rate(value) {
    this._rx_message_lost_rateIntialized = true;
    this._refObject.rx_message_lost_rate = value;
  }
  get heartbeat_type_antenna_tracker() {
    if (!this._heartbeat_type_antenna_trackerIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_antenna_tracker;
  }
  set heartbeat_type_antenna_tracker(value) {
    this._heartbeat_type_antenna_trackerIntialized = true;
    this._refObject.heartbeat_type_antenna_tracker = value;
  }
  get heartbeat_type_gcs() {
    if (!this._heartbeat_type_gcsIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_gcs;
  }
  set heartbeat_type_gcs(value) {
    this._heartbeat_type_gcsIntialized = true;
    this._refObject.heartbeat_type_gcs = value;
  }
  get heartbeat_type_onboard_controller() {
    if (!this._heartbeat_type_onboard_controllerIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_onboard_controller;
  }
  set heartbeat_type_onboard_controller(value) {
    this._heartbeat_type_onboard_controllerIntialized = true;
    this._refObject.heartbeat_type_onboard_controller = value;
  }
  get heartbeat_type_gimbal() {
    if (!this._heartbeat_type_gimbalIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_gimbal;
  }
  set heartbeat_type_gimbal(value) {
    this._heartbeat_type_gimbalIntialized = true;
    this._refObject.heartbeat_type_gimbal = value;
  }
  get heartbeat_type_adsb() {
    if (!this._heartbeat_type_adsbIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_adsb;
  }
  set heartbeat_type_adsb(value) {
    this._heartbeat_type_adsbIntialized = true;
    this._refObject.heartbeat_type_adsb = value;
  }
  get heartbeat_type_camera() {
    if (!this._heartbeat_type_cameraIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_camera;
  }
  set heartbeat_type_camera(value) {
    this._heartbeat_type_cameraIntialized = true;
    this._refObject.heartbeat_type_camera = value;
  }
  get heartbeat_type_parachute() {
    if (!this._heartbeat_type_parachuteIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_parachute;
  }
  set heartbeat_type_parachute(value) {
    this._heartbeat_type_parachuteIntialized = true;
    this._refObject.heartbeat_type_parachute = value;
  }
  get heartbeat_type_open_drone_id() {
    if (!this._heartbeat_type_open_drone_idIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_type_open_drone_id;
  }
  set heartbeat_type_open_drone_id(value) {
    this._heartbeat_type_open_drone_idIntialized = true;
    this._refObject.heartbeat_type_open_drone_id = value;
  }
  get heartbeat_component_telemetry_radio() {
    if (!this._heartbeat_component_telemetry_radioIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_telemetry_radio;
  }
  set heartbeat_component_telemetry_radio(value) {
    this._heartbeat_component_telemetry_radioIntialized = true;
    this._refObject.heartbeat_component_telemetry_radio = value;
  }
  get heartbeat_component_log() {
    if (!this._heartbeat_component_logIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_log;
  }
  set heartbeat_component_log(value) {
    this._heartbeat_component_logIntialized = true;
    this._refObject.heartbeat_component_log = value;
  }
  get heartbeat_component_osd() {
    if (!this._heartbeat_component_osdIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_osd;
  }
  set heartbeat_component_osd(value) {
    this._heartbeat_component_osdIntialized = true;
    this._refObject.heartbeat_component_osd = value;
  }
  get heartbeat_component_obstacle_avoidance() {
    if (!this._heartbeat_component_obstacle_avoidanceIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_obstacle_avoidance;
  }
  set heartbeat_component_obstacle_avoidance(value) {
    this._heartbeat_component_obstacle_avoidanceIntialized = true;
    this._refObject.heartbeat_component_obstacle_avoidance = value;
  }
  get heartbeat_component_vio() {
    if (!this._heartbeat_component_vioIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_vio;
  }
  set heartbeat_component_vio(value) {
    this._heartbeat_component_vioIntialized = true;
    this._refObject.heartbeat_component_vio = value;
  }
  get heartbeat_component_pairing_manager() {
    if (!this._heartbeat_component_pairing_managerIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_pairing_manager;
  }
  set heartbeat_component_pairing_manager(value) {
    this._heartbeat_component_pairing_managerIntialized = true;
    this._refObject.heartbeat_component_pairing_manager = value;
  }
  get heartbeat_component_udp_bridge() {
    if (!this._heartbeat_component_udp_bridgeIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_udp_bridge;
  }
  set heartbeat_component_udp_bridge(value) {
    this._heartbeat_component_udp_bridgeIntialized = true;
    this._refObject.heartbeat_component_udp_bridge = value;
  }
  get heartbeat_component_uart_bridge() {
    if (!this._heartbeat_component_uart_bridgeIntialized) {
      return undefined;
    }
    return this._refObject.heartbeat_component_uart_bridge;
  }
  set heartbeat_component_uart_bridge(value) {
    this._heartbeat_component_uart_bridgeIntialized = true;
    this._refObject.heartbeat_component_uart_bridge = value;
  }
  get avoidance_system_healthy() {
    if (!this._avoidance_system_healthyIntialized) {
      return undefined;
    }
    return this._refObject.avoidance_system_healthy;
  }
  set avoidance_system_healthy(value) {
    this._avoidance_system_healthyIntialized = true;
    this._refObject.avoidance_system_healthy = value;
  }
  get open_drone_id_system_healthy() {
    if (!this._open_drone_id_system_healthyIntialized) {
      return undefined;
    }
    return this._refObject.open_drone_id_system_healthy;
  }
  set open_drone_id_system_healthy(value) {
    this._open_drone_id_system_healthyIntialized = true;
    this._refObject.open_drone_id_system_healthy = value;
  }
  get parachute_system_healthy() {
    if (!this._parachute_system_healthyIntialized) {
      return undefined;
    }
    return this._refObject.parachute_system_healthy;
  }
  set parachute_system_healthy(value) {
    this._parachute_system_healthyIntialized = true;
    this._refObject.parachute_system_healthy = value;
  }
  copyRefObject(refObject) {
    this._refObject = new TelemetryStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._typeIntialized = true;
    this._modeIntialized = true;
    this._flow_controlIntialized = true;
    this._forwardingIntialized = true;
    this._mavlink_v2Intialized = true;
    this._ftpIntialized = true;
    this._streamsIntialized = true;
    this._data_rateIntialized = true;
    this._rate_multiplierIntialized = true;
    this._tx_rate_avgIntialized = true;
    this._tx_error_rate_avgIntialized = true;
    this._tx_message_countIntialized = true;
    this._tx_buffer_overrunsIntialized = true;
    this._rx_rate_avgIntialized = true;
    this._rx_message_countIntialized = true;
    this._rx_message_lost_countIntialized = true;
    this._rx_buffer_overrunsIntialized = true;
    this._rx_parse_errorsIntialized = true;
    this._rx_packet_drop_countIntialized = true;
    this._rx_message_lost_rateIntialized = true;
    this._heartbeat_type_antenna_trackerIntialized = true;
    this._heartbeat_type_gcsIntialized = true;
    this._heartbeat_type_onboard_controllerIntialized = true;
    this._heartbeat_type_gimbalIntialized = true;
    this._heartbeat_type_adsbIntialized = true;
    this._heartbeat_type_cameraIntialized = true;
    this._heartbeat_type_parachuteIntialized = true;
    this._heartbeat_type_open_drone_idIntialized = true;
    this._heartbeat_component_telemetry_radioIntialized = true;
    this._heartbeat_component_logIntialized = true;
    this._heartbeat_component_osdIntialized = true;
    this._heartbeat_component_obstacle_avoidanceIntialized = true;
    this._heartbeat_component_vioIntialized = true;
    this._heartbeat_component_pairing_managerIntialized = true;
    this._heartbeat_component_udp_bridgeIntialized = true;
    this._heartbeat_component_uart_bridgeIntialized = true;
    this._avoidance_system_healthyIntialized = true;
    this._open_drone_id_system_healthyIntialized = true;
    this._parachute_system_healthyIntialized = true;
  }
  copy(other) {
    this._refObject = new TelemetryStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._typeIntialized = true;
    this._modeIntialized = true;
    this._flow_controlIntialized = true;
    this._forwardingIntialized = true;
    this._mavlink_v2Intialized = true;
    this._ftpIntialized = true;
    this._streamsIntialized = true;
    this._data_rateIntialized = true;
    this._rate_multiplierIntialized = true;
    this._tx_rate_avgIntialized = true;
    this._tx_error_rate_avgIntialized = true;
    this._tx_message_countIntialized = true;
    this._tx_buffer_overrunsIntialized = true;
    this._rx_rate_avgIntialized = true;
    this._rx_message_countIntialized = true;
    this._rx_message_lost_countIntialized = true;
    this._rx_buffer_overrunsIntialized = true;
    this._rx_parse_errorsIntialized = true;
    this._rx_packet_drop_countIntialized = true;
    this._rx_message_lost_rateIntialized = true;
    this._heartbeat_type_antenna_trackerIntialized = true;
    this._heartbeat_type_gcsIntialized = true;
    this._heartbeat_type_onboard_controllerIntialized = true;
    this._heartbeat_type_gimbalIntialized = true;
    this._heartbeat_type_adsbIntialized = true;
    this._heartbeat_type_cameraIntialized = true;
    this._heartbeat_type_parachuteIntialized = true;
    this._heartbeat_type_open_drone_idIntialized = true;
    this._heartbeat_component_telemetry_radioIntialized = true;
    this._heartbeat_component_logIntialized = true;
    this._heartbeat_component_osdIntialized = true;
    this._heartbeat_component_obstacle_avoidanceIntialized = true;
    this._heartbeat_component_vioIntialized = true;
    this._heartbeat_component_pairing_managerIntialized = true;
    this._heartbeat_component_udp_bridgeIntialized = true;
    this._heartbeat_component_uart_bridgeIntialized = true;
    this._avoidance_system_healthyIntialized = true;
    this._open_drone_id_system_healthyIntialized = true;
    this._parachute_system_healthyIntialized = true;
  }
  static get classType() {
    return TelemetryStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"LINK_TYPE_GENERIC","value":0},{"type":"uint8","name":"LINK_TYPE_UBIQUITY_BULLET","value":1},{"type":"uint8","name":"LINK_TYPE_WIRE","value":2},{"type":"uint8","name":"LINK_TYPE_USB","value":3},{"type":"uint8","name":"LINK_TYPE_IRIDIUM","value":4},{"type":"uint64","name":"HEARTBEAT_TIMEOUT_US","value":2500000}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"flow_control","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"forwarding","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mavlink_v2","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"ftp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"streams","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"data_rate","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rate_multiplier","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tx_rate_avg","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tx_error_rate_avg","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tx_message_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"tx_buffer_overruns","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_rate_avg","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_message_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_message_lost_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_buffer_overruns","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_parse_errors","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_packet_drop_count","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"rx_message_lost_rate","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_antenna_tracker","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_gcs","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_onboard_controller","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_gimbal","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_adsb","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_camera","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_parachute","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_type_open_drone_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_telemetry_radio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_log","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_osd","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_obstacle_avoidance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_vio","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_pairing_manager","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_udp_bridge","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heartbeat_component_uart_bridge","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"avoidance_system_healthy","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"open_drone_id_system_healthy","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"parachute_system_healthy","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"TelemetryStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"TelemetryStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","type","mode","flow_control","forwarding","mavlink_v2","ftp","streams","data_rate","rate_multiplier","tx_rate_avg","tx_error_rate_avg","tx_message_count","tx_buffer_overruns","rx_rate_avg","rx_message_count","rx_message_lost_count","rx_buffer_overruns","rx_parse_errors","rx_packet_drop_count","rx_message_lost_rate","heartbeat_type_antenna_tracker","heartbeat_type_gcs","heartbeat_type_onboard_controller","heartbeat_type_gimbal","heartbeat_type_adsb","heartbeat_type_camera","heartbeat_type_parachute","heartbeat_type_open_drone_id","heartbeat_component_telemetry_radio","heartbeat_component_log","heartbeat_component_osd","heartbeat_component_obstacle_avoidance","heartbeat_component_vio","heartbeat_component_pairing_manager","heartbeat_component_udp_bridge","heartbeat_component_uart_bridge","avoidance_system_healthy","open_drone_id_system_healthy","parachute_system_healthy"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class TelemetryStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof TelemetryStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new TelemetryStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TelemetryStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to TelemetryStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new TelemetryStatusRefArray(size);
    this._refObject = new TelemetryStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new TelemetryStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof TelemetryStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "TelemetryStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      TelemetryStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return TelemetryStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return TelemetryStatusArrayWrapper;
  }
}
// Define constants (6 in total)
Object.defineProperty(TelemetryStatusWrapper, "LINK_TYPE_GENERIC", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TelemetryStatusWrapper, "LINK_TYPE_UBIQUITY_BULLET", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TelemetryStatusWrapper, "LINK_TYPE_WIRE", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TelemetryStatusWrapper, "LINK_TYPE_USB", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TelemetryStatusWrapper, "LINK_TYPE_IRIDIUM", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(TelemetryStatusWrapper, "HEARTBEAT_TIMEOUT_US", {value: 2500000, writable: false, enumerable: true, configurable: true});
module.exports = TelemetryStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "LINK_TYPE_GENERIC",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "LINK_TYPE_UBIQUITY_BULLET",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "LINK_TYPE_WIRE",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "LINK_TYPE_USB",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "LINK_TYPE_IRIDIUM",
      "value": 4
    },
    {
      "type": "uint64",
      "name": "HEARTBEAT_TIMEOUT_US",
      "value": 2500000
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "flow_control",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "forwarding",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mavlink_v2",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "ftp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "streams",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "data_rate",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rate_multiplier",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tx_rate_avg",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tx_error_rate_avg",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tx_message_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "tx_buffer_overruns",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_rate_avg",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_message_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_message_lost_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_buffer_overruns",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_parse_errors",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_packet_drop_count",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "rx_message_lost_rate",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_antenna_tracker",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_gcs",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_onboard_controller",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_gimbal",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_adsb",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_camera",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_parachute",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_type_open_drone_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_telemetry_radio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_log",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_osd",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_obstacle_avoidance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_vio",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_pairing_manager",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_udp_bridge",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heartbeat_component_uart_bridge",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "avoidance_system_healthy",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "open_drone_id_system_healthy",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "parachute_system_healthy",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "TelemetryStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "TelemetryStatus"
}
*/
