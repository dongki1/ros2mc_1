// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const Int8Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int8.js');
const ControlAllocatorStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  torque_setpoint_achieved: primitiveTypes.bool,
  unallocated_torque: ArrayType(primitiveTypes.float32, 3),
  thrust_setpoint_achieved: primitiveTypes.bool,
  unallocated_thrust: ArrayType(primitiveTypes.float32, 3),
  actuator_saturation: ArrayType(primitiveTypes.int8, 16),
  handled_motor_failure_mask: primitiveTypes.uint16,
});
const ControlAllocatorStatusRefArray = ArrayType(ControlAllocatorStatusRefStruct);
const ControlAllocatorStatusRefStructArray = StructType({
  data: ControlAllocatorStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ControlAllocatorStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ControlAllocatorStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._torque_setpoint_achievedIntialized = true;
      this._wrapperFields.unallocated_torque = Float32Wrapper.createArray();
      this._wrapperFields.unallocated_torque.copy(other._wrapperFields.unallocated_torque);
      this._thrust_setpoint_achievedIntialized = true;
      this._wrapperFields.unallocated_thrust = Float32Wrapper.createArray();
      this._wrapperFields.unallocated_thrust.copy(other._wrapperFields.unallocated_thrust);
      this._wrapperFields.actuator_saturation = Int8Wrapper.createArray();
      this._wrapperFields.actuator_saturation.copy(other._wrapperFields.actuator_saturation);
      this._handled_motor_failure_maskIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ControlAllocatorStatusRefStruct();
    this._timestampIntialized = false;
    this._torque_setpoint_achievedIntialized = false;
    this._wrapperFields.unallocated_torque = Float32Wrapper.createArray();
    this._thrust_setpoint_achievedIntialized = false;
    this._wrapperFields.unallocated_thrust = Float32Wrapper.createArray();
    this._wrapperFields.actuator_saturation = Int8Wrapper.createArray();
    this._handled_motor_failure_maskIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ControlAllocatorStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ControlAllocatorStatusArrayWrapper;
  }
  static get ArrayType() {
    return ControlAllocatorStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return ControlAllocatorStatusRefStructArray
  }
  static get refObjectType() {
    return ControlAllocatorStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in ControlAllocatorStatus');
      }
      if (checkConsistency && !this._torque_setpoint_achievedIntialized) {
        throw new TypeError('Invalid argument: torque_setpoint_achieved in ControlAllocatorStatus');
      }
      if (checkConsistency && !this._thrust_setpoint_achievedIntialized) {
        throw new TypeError('Invalid argument: thrust_setpoint_achieved in ControlAllocatorStatus');
      }
      if (checkConsistency && !this._handled_motor_failure_maskIntialized) {
        throw new TypeError('Invalid argument: handled_motor_failure_mask in ControlAllocatorStatus');
      }
    this._refObject.unallocated_torque = Array.from(this._wrapperFields.unallocated_torque.data);
    this._refObject.unallocated_thrust = Array.from(this._wrapperFields.unallocated_thrust.data);
    this._refObject.actuator_saturation = Array.from(this._wrapperFields.actuator_saturation.data);
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._torque_setpoint_achievedIntialized = true;
    this._refObject.torque_setpoint_achieved = refObject.torque_setpoint_achieved;
    this._wrapperFields.unallocated_torque.fill(refObject.unallocated_torque.toArray());
    this._thrust_setpoint_achievedIntialized = true;
    this._refObject.thrust_setpoint_achieved = refObject.thrust_setpoint_achieved;
    this._wrapperFields.unallocated_thrust.fill(refObject.unallocated_thrust.toArray());
    this._wrapperFields.actuator_saturation.fill(refObject.actuator_saturation.toArray());
    this._handled_motor_failure_maskIntialized = true;
    this._refObject.handled_motor_failure_mask = refObject.handled_motor_failure_mask;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ControlAllocatorStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'ControlAllocatorStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get torque_setpoint_achieved() {
    if (!this._torque_setpoint_achievedIntialized) {
      return undefined;
    }
    return this._refObject.torque_setpoint_achieved;
  }
  set torque_setpoint_achieved(value) {
    this._torque_setpoint_achievedIntialized = true;
    this._refObject.torque_setpoint_achieved = value;
  }
  get unallocated_torque() {
    return this._wrapperFields['unallocated_torque'].data;
  }
  set unallocated_torque(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['unallocated_torque'].fill(value);
  }
  get thrust_setpoint_achieved() {
    if (!this._thrust_setpoint_achievedIntialized) {
      return undefined;
    }
    return this._refObject.thrust_setpoint_achieved;
  }
  set thrust_setpoint_achieved(value) {
    this._thrust_setpoint_achievedIntialized = true;
    this._refObject.thrust_setpoint_achieved = value;
  }
  get unallocated_thrust() {
    return this._wrapperFields['unallocated_thrust'].data;
  }
  set unallocated_thrust(value) {
    if (value.length !== 3) {
      throw new RangeError('The length of the array must be 3.');
    }
    this._wrapperFields['unallocated_thrust'].fill(value);
  }
  get actuator_saturation() {
    return this._wrapperFields['actuator_saturation'].data;
  }
  set actuator_saturation(value) {
    if (value.length !== 16) {
      throw new RangeError('The length of the array must be 16.');
    }
    this._wrapperFields['actuator_saturation'].fill(value);
  }
  get handled_motor_failure_mask() {
    if (!this._handled_motor_failure_maskIntialized) {
      return undefined;
    }
    return this._refObject.handled_motor_failure_mask;
  }
  set handled_motor_failure_mask(value) {
    this._handled_motor_failure_maskIntialized = true;
    this._refObject.handled_motor_failure_mask = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ControlAllocatorStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._torque_setpoint_achievedIntialized = true;
    this._wrapperFields.unallocated_torque.fill(refObject.unallocated_torque.toArray());
    this._thrust_setpoint_achievedIntialized = true;
    this._wrapperFields.unallocated_thrust.fill(refObject.unallocated_thrust.toArray());
    this._wrapperFields.actuator_saturation.fill(refObject.actuator_saturation.toArray());
    this._handled_motor_failure_maskIntialized = true;
  }
  copy(other) {
    this._refObject = new ControlAllocatorStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._torque_setpoint_achievedIntialized = true;
    this._wrapperFields.unallocated_torque.copy(other._wrapperFields.unallocated_torque);
    this._thrust_setpoint_achievedIntialized = true;
    this._wrapperFields.unallocated_thrust.copy(other._wrapperFields.unallocated_thrust);
    this._wrapperFields.actuator_saturation.copy(other._wrapperFields.actuator_saturation);
    this._handled_motor_failure_maskIntialized = true;
  }
  static get classType() {
    return ControlAllocatorStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"int8","name":"ACTUATOR_SATURATION_OK","value":0},{"type":"int8","name":"ACTUATOR_SATURATION_UPPER_DYN","value":1},{"type":"int8","name":"ACTUATOR_SATURATION_UPPER","value":2},{"type":"int8","name":"ACTUATOR_SATURATION_LOWER_DYN","value":-1},{"type":"int8","name":"ACTUATOR_SATURATION_LOWER","value":-2}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"torque_setpoint_achieved","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"unallocated_torque","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"thrust_setpoint_achieved","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"unallocated_thrust","type":{"isArray":true,"arraySize":3,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"actuator_saturation","type":{"isArray":true,"arraySize":16,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":true,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"handled_motor_failure_mask","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"ControlAllocatorStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ControlAllocatorStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","torque_setpoint_achieved","unallocated_torque","thrust_setpoint_achieved","unallocated_thrust","actuator_saturation","handled_motor_failure_mask"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ControlAllocatorStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ControlAllocatorStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ControlAllocatorStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControlAllocatorStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ControlAllocatorStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ControlAllocatorStatusRefArray(size);
    this._refObject = new ControlAllocatorStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ControlAllocatorStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ControlAllocatorStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ControlAllocatorStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ControlAllocatorStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ControlAllocatorStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ControlAllocatorStatusArrayWrapper;
  }
}
// Define constants (5 in total)
Object.defineProperty(ControlAllocatorStatusWrapper, "ACTUATOR_SATURATION_OK", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlAllocatorStatusWrapper, "ACTUATOR_SATURATION_UPPER_DYN", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlAllocatorStatusWrapper, "ACTUATOR_SATURATION_UPPER", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlAllocatorStatusWrapper, "ACTUATOR_SATURATION_LOWER_DYN", {value: -1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ControlAllocatorStatusWrapper, "ACTUATOR_SATURATION_LOWER", {value: -2, writable: false, enumerable: true, configurable: true});
module.exports = ControlAllocatorStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "int8",
      "name": "ACTUATOR_SATURATION_OK",
      "value": 0
    },
    {
      "type": "int8",
      "name": "ACTUATOR_SATURATION_UPPER_DYN",
      "value": 1
    },
    {
      "type": "int8",
      "name": "ACTUATOR_SATURATION_UPPER",
      "value": 2
    },
    {
      "type": "int8",
      "name": "ACTUATOR_SATURATION_LOWER_DYN",
      "value": -1
    },
    {
      "type": "int8",
      "name": "ACTUATOR_SATURATION_LOWER",
      "value": -2
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "torque_setpoint_achieved",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "unallocated_torque",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "thrust_setpoint_achieved",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "unallocated_thrust",
      "type": {
        "isArray": true,
        "arraySize": 3,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "actuator_saturation",
      "type": {
        "isArray": true,
        "arraySize": 16,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": true,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "handled_motor_failure_mask",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "ControlAllocatorStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ControlAllocatorStatus"
}
*/
