// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const VehicleGlobalPositionRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  timestamp_sample: primitiveTypes.uint64,
  lat: primitiveTypes.float64,
  lon: primitiveTypes.float64,
  alt: primitiveTypes.float32,
  alt_ellipsoid: primitiveTypes.float32,
  delta_alt: primitiveTypes.float32,
  lat_lon_reset_counter: primitiveTypes.uint8,
  alt_reset_counter: primitiveTypes.uint8,
  eph: primitiveTypes.float32,
  epv: primitiveTypes.float32,
  terrain_alt: primitiveTypes.float32,
  terrain_alt_valid: primitiveTypes.bool,
  dead_reckoning: primitiveTypes.bool,
});
const VehicleGlobalPositionRefArray = ArrayType(VehicleGlobalPositionRefStruct);
const VehicleGlobalPositionRefStructArray = StructType({
  data: VehicleGlobalPositionRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class VehicleGlobalPositionWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new VehicleGlobalPositionRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._timestamp_sampleIntialized = true;
      this._latIntialized = true;
      this._lonIntialized = true;
      this._altIntialized = true;
      this._alt_ellipsoidIntialized = true;
      this._delta_altIntialized = true;
      this._lat_lon_reset_counterIntialized = true;
      this._alt_reset_counterIntialized = true;
      this._ephIntialized = true;
      this._epvIntialized = true;
      this._terrain_altIntialized = true;
      this._terrain_alt_validIntialized = true;
      this._dead_reckoningIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new VehicleGlobalPositionRefStruct();
    this._timestampIntialized = false;
    this._timestamp_sampleIntialized = false;
    this._latIntialized = false;
    this._lonIntialized = false;
    this._altIntialized = false;
    this._alt_ellipsoidIntialized = false;
    this._delta_altIntialized = false;
    this._lat_lon_reset_counterIntialized = false;
    this._alt_reset_counterIntialized = false;
    this._ephIntialized = false;
    this._epvIntialized = false;
    this._terrain_altIntialized = false;
    this._terrain_alt_validIntialized = false;
    this._dead_reckoningIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new VehicleGlobalPositionWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new VehicleGlobalPositionArrayWrapper;
  }
  static get ArrayType() {
    return VehicleGlobalPositionArrayWrapper;
  }
  static get refObjectArrayType() {
    return VehicleGlobalPositionRefStructArray
  }
  static get refObjectType() {
    return VehicleGlobalPositionRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._timestamp_sampleIntialized) {
        throw new TypeError('Invalid argument: timestamp_sample in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._latIntialized) {
        throw new TypeError('Invalid argument: lat in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._lonIntialized) {
        throw new TypeError('Invalid argument: lon in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._altIntialized) {
        throw new TypeError('Invalid argument: alt in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._alt_ellipsoidIntialized) {
        throw new TypeError('Invalid argument: alt_ellipsoid in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._delta_altIntialized) {
        throw new TypeError('Invalid argument: delta_alt in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._lat_lon_reset_counterIntialized) {
        throw new TypeError('Invalid argument: lat_lon_reset_counter in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._alt_reset_counterIntialized) {
        throw new TypeError('Invalid argument: alt_reset_counter in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._ephIntialized) {
        throw new TypeError('Invalid argument: eph in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._epvIntialized) {
        throw new TypeError('Invalid argument: epv in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._terrain_altIntialized) {
        throw new TypeError('Invalid argument: terrain_alt in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._terrain_alt_validIntialized) {
        throw new TypeError('Invalid argument: terrain_alt_valid in VehicleGlobalPosition');
      }
      if (checkConsistency && !this._dead_reckoningIntialized) {
        throw new TypeError('Invalid argument: dead_reckoning in VehicleGlobalPosition');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = refObject.timestamp_sample;
    this._latIntialized = true;
    this._refObject.lat = refObject.lat;
    this._lonIntialized = true;
    this._refObject.lon = refObject.lon;
    this._altIntialized = true;
    this._refObject.alt = refObject.alt;
    this._alt_ellipsoidIntialized = true;
    this._refObject.alt_ellipsoid = refObject.alt_ellipsoid;
    this._delta_altIntialized = true;
    this._refObject.delta_alt = refObject.delta_alt;
    this._lat_lon_reset_counterIntialized = true;
    this._refObject.lat_lon_reset_counter = refObject.lat_lon_reset_counter;
    this._alt_reset_counterIntialized = true;
    this._refObject.alt_reset_counter = refObject.alt_reset_counter;
    this._ephIntialized = true;
    this._refObject.eph = refObject.eph;
    this._epvIntialized = true;
    this._refObject.epv = refObject.epv;
    this._terrain_altIntialized = true;
    this._refObject.terrain_alt = refObject.terrain_alt;
    this._terrain_alt_validIntialized = true;
    this._refObject.terrain_alt_valid = refObject.terrain_alt_valid;
    this._dead_reckoningIntialized = true;
    this._refObject.dead_reckoning = refObject.dead_reckoning;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    VehicleGlobalPositionWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'VehicleGlobalPosition'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get timestamp_sample() {
    if (!this._timestamp_sampleIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_sample;
  }
  set timestamp_sample(value) {
    this._timestamp_sampleIntialized = true;
    this._refObject.timestamp_sample = value;
  }
  get lat() {
    if (!this._latIntialized) {
      return undefined;
    }
    return this._refObject.lat;
  }
  set lat(value) {
    this._latIntialized = true;
    this._refObject.lat = value;
  }
  get lon() {
    if (!this._lonIntialized) {
      return undefined;
    }
    return this._refObject.lon;
  }
  set lon(value) {
    this._lonIntialized = true;
    this._refObject.lon = value;
  }
  get alt() {
    if (!this._altIntialized) {
      return undefined;
    }
    return this._refObject.alt;
  }
  set alt(value) {
    this._altIntialized = true;
    this._refObject.alt = value;
  }
  get alt_ellipsoid() {
    if (!this._alt_ellipsoidIntialized) {
      return undefined;
    }
    return this._refObject.alt_ellipsoid;
  }
  set alt_ellipsoid(value) {
    this._alt_ellipsoidIntialized = true;
    this._refObject.alt_ellipsoid = value;
  }
  get delta_alt() {
    if (!this._delta_altIntialized) {
      return undefined;
    }
    return this._refObject.delta_alt;
  }
  set delta_alt(value) {
    this._delta_altIntialized = true;
    this._refObject.delta_alt = value;
  }
  get lat_lon_reset_counter() {
    if (!this._lat_lon_reset_counterIntialized) {
      return undefined;
    }
    return this._refObject.lat_lon_reset_counter;
  }
  set lat_lon_reset_counter(value) {
    this._lat_lon_reset_counterIntialized = true;
    this._refObject.lat_lon_reset_counter = value;
  }
  get alt_reset_counter() {
    if (!this._alt_reset_counterIntialized) {
      return undefined;
    }
    return this._refObject.alt_reset_counter;
  }
  set alt_reset_counter(value) {
    this._alt_reset_counterIntialized = true;
    this._refObject.alt_reset_counter = value;
  }
  get eph() {
    if (!this._ephIntialized) {
      return undefined;
    }
    return this._refObject.eph;
  }
  set eph(value) {
    this._ephIntialized = true;
    this._refObject.eph = value;
  }
  get epv() {
    if (!this._epvIntialized) {
      return undefined;
    }
    return this._refObject.epv;
  }
  set epv(value) {
    this._epvIntialized = true;
    this._refObject.epv = value;
  }
  get terrain_alt() {
    if (!this._terrain_altIntialized) {
      return undefined;
    }
    return this._refObject.terrain_alt;
  }
  set terrain_alt(value) {
    this._terrain_altIntialized = true;
    this._refObject.terrain_alt = value;
  }
  get terrain_alt_valid() {
    if (!this._terrain_alt_validIntialized) {
      return undefined;
    }
    return this._refObject.terrain_alt_valid;
  }
  set terrain_alt_valid(value) {
    this._terrain_alt_validIntialized = true;
    this._refObject.terrain_alt_valid = value;
  }
  get dead_reckoning() {
    if (!this._dead_reckoningIntialized) {
      return undefined;
    }
    return this._refObject.dead_reckoning;
  }
  set dead_reckoning(value) {
    this._dead_reckoningIntialized = true;
    this._refObject.dead_reckoning = value;
  }
  copyRefObject(refObject) {
    this._refObject = new VehicleGlobalPositionRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._altIntialized = true;
    this._alt_ellipsoidIntialized = true;
    this._delta_altIntialized = true;
    this._lat_lon_reset_counterIntialized = true;
    this._alt_reset_counterIntialized = true;
    this._ephIntialized = true;
    this._epvIntialized = true;
    this._terrain_altIntialized = true;
    this._terrain_alt_validIntialized = true;
    this._dead_reckoningIntialized = true;
  }
  copy(other) {
    this._refObject = new VehicleGlobalPositionRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._timestamp_sampleIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._altIntialized = true;
    this._alt_ellipsoidIntialized = true;
    this._delta_altIntialized = true;
    this._lat_lon_reset_counterIntialized = true;
    this._alt_reset_counterIntialized = true;
    this._ephIntialized = true;
    this._epvIntialized = true;
    this._terrain_altIntialized = true;
    this._terrain_alt_validIntialized = true;
    this._dead_reckoningIntialized = true;
  }
  static get classType() {
    return VehicleGlobalPositionWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_sample","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lon","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"alt_ellipsoid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"delta_alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat_lon_reset_counter","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"alt_reset_counter","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"eph","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"epv","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"terrain_alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"terrain_alt_valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"dead_reckoning","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"VehicleGlobalPosition","stringUpperBound":null,"isPrimitiveType":false},"msgName":"VehicleGlobalPosition"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","timestamp_sample","lat","lon","alt","alt_ellipsoid","delta_alt","lat_lon_reset_counter","alt_reset_counter","eph","epv","terrain_alt","terrain_alt_valid","dead_reckoning"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class VehicleGlobalPositionArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof VehicleGlobalPositionWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new VehicleGlobalPositionWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VehicleGlobalPositionArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to VehicleGlobalPositionArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new VehicleGlobalPositionRefArray(size);
    this._refObject = new VehicleGlobalPositionRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new VehicleGlobalPositionWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof VehicleGlobalPositionArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "VehicleGlobalPositionArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      VehicleGlobalPositionWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return VehicleGlobalPositionWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return VehicleGlobalPositionArrayWrapper;
  }
}
module.exports = VehicleGlobalPositionWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_sample",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lon",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "alt_ellipsoid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "delta_alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat_lon_reset_counter",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "alt_reset_counter",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "eph",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "epv",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "terrain_alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "terrain_alt_valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "dead_reckoning",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "VehicleGlobalPosition",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "VehicleGlobalPosition"
}
*/
