// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaterStatusRefStruct = StructType({
  timestamp: primitiveTypes.uint64,
  device_id: primitiveTypes.uint32,
  heater_on: primitiveTypes.bool,
  temperature_target_met: primitiveTypes.bool,
  temperature_sensor: primitiveTypes.float32,
  temperature_target: primitiveTypes.float32,
  controller_period_usec: primitiveTypes.uint32,
  controller_time_on_usec: primitiveTypes.uint32,
  proportional_value: primitiveTypes.float32,
  integrator_value: primitiveTypes.float32,
  feed_forward_value: primitiveTypes.float32,
  mode: primitiveTypes.uint8,
});
const HeaterStatusRefArray = ArrayType(HeaterStatusRefStruct);
const HeaterStatusRefStructArray = StructType({
  data: HeaterStatusRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class HeaterStatusWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new HeaterStatusRefStruct(other._refObject.toObject());
      this._timestampIntialized = true;
      this._device_idIntialized = true;
      this._heater_onIntialized = true;
      this._temperature_target_metIntialized = true;
      this._temperature_sensorIntialized = true;
      this._temperature_targetIntialized = true;
      this._controller_period_usecIntialized = true;
      this._controller_time_on_usecIntialized = true;
      this._proportional_valueIntialized = true;
      this._integrator_valueIntialized = true;
      this._feed_forward_valueIntialized = true;
      this._modeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new HeaterStatusRefStruct();
    this._timestampIntialized = false;
    this._device_idIntialized = false;
    this._heater_onIntialized = false;
    this._temperature_target_metIntialized = false;
    this._temperature_sensorIntialized = false;
    this._temperature_targetIntialized = false;
    this._controller_period_usecIntialized = false;
    this._controller_time_on_usecIntialized = false;
    this._proportional_valueIntialized = false;
    this._integrator_valueIntialized = false;
    this._feed_forward_valueIntialized = false;
    this._modeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new HeaterStatusWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new HeaterStatusArrayWrapper;
  }
  static get ArrayType() {
    return HeaterStatusArrayWrapper;
  }
  static get refObjectArrayType() {
    return HeaterStatusRefStructArray
  }
  static get refObjectType() {
    return HeaterStatusRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._timestampIntialized) {
        throw new TypeError('Invalid argument: timestamp in HeaterStatus');
      }
      if (checkConsistency && !this._device_idIntialized) {
        throw new TypeError('Invalid argument: device_id in HeaterStatus');
      }
      if (checkConsistency && !this._heater_onIntialized) {
        throw new TypeError('Invalid argument: heater_on in HeaterStatus');
      }
      if (checkConsistency && !this._temperature_target_metIntialized) {
        throw new TypeError('Invalid argument: temperature_target_met in HeaterStatus');
      }
      if (checkConsistency && !this._temperature_sensorIntialized) {
        throw new TypeError('Invalid argument: temperature_sensor in HeaterStatus');
      }
      if (checkConsistency && !this._temperature_targetIntialized) {
        throw new TypeError('Invalid argument: temperature_target in HeaterStatus');
      }
      if (checkConsistency && !this._controller_period_usecIntialized) {
        throw new TypeError('Invalid argument: controller_period_usec in HeaterStatus');
      }
      if (checkConsistency && !this._controller_time_on_usecIntialized) {
        throw new TypeError('Invalid argument: controller_time_on_usec in HeaterStatus');
      }
      if (checkConsistency && !this._proportional_valueIntialized) {
        throw new TypeError('Invalid argument: proportional_value in HeaterStatus');
      }
      if (checkConsistency && !this._integrator_valueIntialized) {
        throw new TypeError('Invalid argument: integrator_value in HeaterStatus');
      }
      if (checkConsistency && !this._feed_forward_valueIntialized) {
        throw new TypeError('Invalid argument: feed_forward_value in HeaterStatus');
      }
      if (checkConsistency && !this._modeIntialized) {
        throw new TypeError('Invalid argument: mode in HeaterStatus');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._timestampIntialized = true;
    this._refObject.timestamp = refObject.timestamp;
    this._device_idIntialized = true;
    this._refObject.device_id = refObject.device_id;
    this._heater_onIntialized = true;
    this._refObject.heater_on = refObject.heater_on;
    this._temperature_target_metIntialized = true;
    this._refObject.temperature_target_met = refObject.temperature_target_met;
    this._temperature_sensorIntialized = true;
    this._refObject.temperature_sensor = refObject.temperature_sensor;
    this._temperature_targetIntialized = true;
    this._refObject.temperature_target = refObject.temperature_target;
    this._controller_period_usecIntialized = true;
    this._refObject.controller_period_usec = refObject.controller_period_usec;
    this._controller_time_on_usecIntialized = true;
    this._refObject.controller_time_on_usec = refObject.controller_time_on_usec;
    this._proportional_valueIntialized = true;
    this._refObject.proportional_value = refObject.proportional_value;
    this._integrator_valueIntialized = true;
    this._refObject.integrator_value = refObject.integrator_value;
    this._feed_forward_valueIntialized = true;
    this._refObject.feed_forward_value = refObject.feed_forward_value;
    this._modeIntialized = true;
    this._refObject.mode = refObject.mode;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    HeaterStatusWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'px4_msgs', subFolder: 'msg', interfaceName: 'HeaterStatus'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    if (!this._timestampIntialized) {
      return undefined;
    }
    return this._refObject.timestamp;
  }
  set timestamp(value) {
    this._timestampIntialized = true;
    this._refObject.timestamp = value;
  }
  get device_id() {
    if (!this._device_idIntialized) {
      return undefined;
    }
    return this._refObject.device_id;
  }
  set device_id(value) {
    this._device_idIntialized = true;
    this._refObject.device_id = value;
  }
  get heater_on() {
    if (!this._heater_onIntialized) {
      return undefined;
    }
    return this._refObject.heater_on;
  }
  set heater_on(value) {
    this._heater_onIntialized = true;
    this._refObject.heater_on = value;
  }
  get temperature_target_met() {
    if (!this._temperature_target_metIntialized) {
      return undefined;
    }
    return this._refObject.temperature_target_met;
  }
  set temperature_target_met(value) {
    this._temperature_target_metIntialized = true;
    this._refObject.temperature_target_met = value;
  }
  get temperature_sensor() {
    if (!this._temperature_sensorIntialized) {
      return undefined;
    }
    return this._refObject.temperature_sensor;
  }
  set temperature_sensor(value) {
    this._temperature_sensorIntialized = true;
    this._refObject.temperature_sensor = value;
  }
  get temperature_target() {
    if (!this._temperature_targetIntialized) {
      return undefined;
    }
    return this._refObject.temperature_target;
  }
  set temperature_target(value) {
    this._temperature_targetIntialized = true;
    this._refObject.temperature_target = value;
  }
  get controller_period_usec() {
    if (!this._controller_period_usecIntialized) {
      return undefined;
    }
    return this._refObject.controller_period_usec;
  }
  set controller_period_usec(value) {
    this._controller_period_usecIntialized = true;
    this._refObject.controller_period_usec = value;
  }
  get controller_time_on_usec() {
    if (!this._controller_time_on_usecIntialized) {
      return undefined;
    }
    return this._refObject.controller_time_on_usec;
  }
  set controller_time_on_usec(value) {
    this._controller_time_on_usecIntialized = true;
    this._refObject.controller_time_on_usec = value;
  }
  get proportional_value() {
    if (!this._proportional_valueIntialized) {
      return undefined;
    }
    return this._refObject.proportional_value;
  }
  set proportional_value(value) {
    this._proportional_valueIntialized = true;
    this._refObject.proportional_value = value;
  }
  get integrator_value() {
    if (!this._integrator_valueIntialized) {
      return undefined;
    }
    return this._refObject.integrator_value;
  }
  set integrator_value(value) {
    this._integrator_valueIntialized = true;
    this._refObject.integrator_value = value;
  }
  get feed_forward_value() {
    if (!this._feed_forward_valueIntialized) {
      return undefined;
    }
    return this._refObject.feed_forward_value;
  }
  set feed_forward_value(value) {
    this._feed_forward_valueIntialized = true;
    this._refObject.feed_forward_value = value;
  }
  get mode() {
    if (!this._modeIntialized) {
      return undefined;
    }
    return this._refObject.mode;
  }
  set mode(value) {
    this._modeIntialized = true;
    this._refObject.mode = value;
  }
  copyRefObject(refObject) {
    this._refObject = new HeaterStatusRefStruct(refObject.toObject());
    this._timestampIntialized = true;
    this._device_idIntialized = true;
    this._heater_onIntialized = true;
    this._temperature_target_metIntialized = true;
    this._temperature_sensorIntialized = true;
    this._temperature_targetIntialized = true;
    this._controller_period_usecIntialized = true;
    this._controller_time_on_usecIntialized = true;
    this._proportional_valueIntialized = true;
    this._integrator_valueIntialized = true;
    this._feed_forward_valueIntialized = true;
    this._modeIntialized = true;
  }
  copy(other) {
    this._refObject = new HeaterStatusRefStruct(other._refObject.toObject());
    this._timestampIntialized = true;
    this._device_idIntialized = true;
    this._heater_onIntialized = true;
    this._temperature_target_metIntialized = true;
    this._temperature_sensorIntialized = true;
    this._temperature_targetIntialized = true;
    this._controller_period_usecIntialized = true;
    this._controller_time_on_usecIntialized = true;
    this._proportional_valueIntialized = true;
    this._integrator_valueIntialized = true;
    this._feed_forward_valueIntialized = true;
    this._modeIntialized = true;
  }
  static get classType() {
    return HeaterStatusWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"MODE_GPIO","value":1},{"type":"uint8","name":"MODE_PX4IO","value":2}],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"device_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"heater_on","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature_target_met","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature_sensor","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"temperature_target","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"controller_period_usec","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"controller_time_on_usec","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"proportional_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"integrator_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"feed_forward_value","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"px4_msgs","type":"HeaterStatus","stringUpperBound":null,"isPrimitiveType":false},"msgName":"HeaterStatus"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","device_id","heater_on","temperature_target_met","temperature_sensor","temperature_target","controller_period_usec","controller_time_on_usec","proportional_value","integrator_value","feed_forward_value","mode"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class HeaterStatusArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof HeaterStatusWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new HeaterStatusWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to HeaterStatusArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to HeaterStatusArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new HeaterStatusRefArray(size);
    this._refObject = new HeaterStatusRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new HeaterStatusWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof HeaterStatusArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "HeaterStatusArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      HeaterStatusWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return HeaterStatusWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return HeaterStatusArrayWrapper;
  }
}
// Define constants (2 in total)
Object.defineProperty(HeaterStatusWrapper, "MODE_GPIO", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(HeaterStatusWrapper, "MODE_PX4IO", {value: 2, writable: false, enumerable: true, configurable: true});
module.exports = HeaterStatusWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "MODE_GPIO",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "MODE_PX4IO",
      "value": 2
    }
  ],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "device_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "heater_on",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature_target_met",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature_sensor",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "temperature_target",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "controller_period_usec",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "controller_time_on_usec",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "proportional_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "integrator_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "feed_forward_value",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "px4_msgs",
    "type": "HeaterStatus",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "HeaterStatus"
}
*/
